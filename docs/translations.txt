= Translations

== Goals

When we created the current mechanism of handling translations, we had a the
following goals:

- When we modify source code or documentation, the translators should be able
  to begin the necessary (if any) translations without any manual action.
- It would be be nice to overview the localization status of a language.
- It should be easy to maintain the translation (ie. doing a manual sync for
  big documents are rather problematic).
- Tranlators are not developers, write access to the translations should not
  require any other right.
- It should be possible for anyone to translate, but only given users should be
  able to push changes.

== Overview

Now let's see how this all is possible. We'll take our `asciidoc` documentation
as an example.

First, we need to extract the translatable strings from the sources.  This is
an important step since this way a document is split to paragraphs and you can
then later translate only even one paragraph rather then choosing between
translating a 10-page-length document entirely or not.  We use `po4a` for this
purpose. It creates a template, named `docs.pot`, which is transfered daily to
the translation server.

(For source codes we usually use the `intltool-update` utility to extract
translatable strings.)

Right after the transfer the po localization files are updated using `msgmerge`
from the `gettext` package: this way the tranlators do not have to re-translate
the strings which are already done.

On that machine, we use a web interface for the translation. This has several
advantages:

- The translators can register and begin the work witout any confirmation from
  our developer team.
- Those accounts are - of course - not real unix accounts just virtual ones.
- We can give commit access for users by specifying their project and language.
  So everybody can make translations but only users we know can push the
  changes.
- Collaboration for people who does not know what a patch or a version control
  system is now should not be a big problem. This is important since for
  example the whole documentation is one big file per language.

Once a user with enough privilieges pushes the translation to our `darcs`
version control system, we can use it. The documentation is built daily and we
pull the new translations from the dedicated repo before each build.

The output of the English build is available
http://ftp.frugalware.org/pub/frugalware/frugalware-current/docs/build.log[here].
If it contains any error or warning, the testsuite will let us know by
including them in the daily testsuite mail, sent to the developer mailing list.
The log of the localization builds is available
http://ftp.frugalware.org/pub/frugalware/frugalware-current/docs/build-i18n.log[here.]

There we use `po4a` again to reconstruct the original (now in some language
other than English) document from the translated strings.

For source code we pull the translations right before creating a release
tarball so. This has the following benefits:

- We ship the latest translations
- Once the tarball is ready, users who would like to compile the source code
  should not fetch the translations manually.

The proof of concept for this while mechanish is our French documentation with
is more than 80 pages lenght and includes zero percent of manual editing by the
developers (while till now we had to push the submitted - by email and other
undocumented channels - translated documents manually, hoping that the newer
version is better than the old was).
