== Development

=== Questions and answers
==== What is the recommended way to version bump a package if I don't have darcs push access?

.. Update the FrugalBuild.
.. Optional: update the patches/docs/etc.
.. Compile the package.
.. Upload the new .fpm to incoming.
.. darcs rec and darcs send the fixes. (Don't forget to set your darcs credentials!)

==== makepkg ends up with <packagename>: /usr/info/dir: exists in filesystem

Instead of

`make DESTDIR=$startdir/pkg install`

you should write

`Fmakeinstall`

in your FrugalBuild.

==== Should I increase pkgrel or not?

If the package needs to be updated at the users, you should increase
 pkgrel - otherwise not. There's no need to increase pkgrel if you:

* only corrected a package's up2date line.

But pkgrel should be increased if you

* changed the depends.

If you increase pkgrel you are supposed to recompile the package.

==== I can't pacman -Su <package>, it says local version is newer, but I know it isn't!

This is a bug in the package's version numbering, the maintainer should
bothered with this. Since pacman checks the version numbers (installed vs.
repo version), the new package's version should be bigger than the old one
to upgrade flawlessly.

==== What does 5.55 SBU mean?

It took 5.55 times longer to compile the package by the maintainer
than binutils. So if you want to know how much will it take to compile
a package with 5.55 SBU, you should first compile binutils (makepkg helps
you, as it writes how many seconds elapsed). Then you should multiply it
by 5.55 to know how many seconds will it take to compile the package.

==== Why do maintainers cry about my new package's tarball?

Let's have a look at the filelist of eaccelerator's tarball:

------------------------------------------
$ tar -tf eaccelerator-0.9.3-1.tar.bz2
eaccelerator/
eaccelerator/eaccelerator-0.9.3.zip
eaccelerator/FrugalBuild
eaccelerator/README.Frugalware
eaccelerator/eaccelerator-0.9.3-1-i686.fpm
$
------------------------------------------

You have to name the tarball as
<pkgname>-<pkgver>-<pkgrel>.tar.bz2 (or gz), which should only
contain a <pkgname> directory at first level, and all the files needed to
 create the fpm in it. It is the easiest way for the maintainers to work
 with your tarball when addig your package to the repo.

==== What should I include in depends(), rodepends() and makedepends() and what shouldn't?

You shouldn't include any trivial makedepends, you should only include what
 chkdep -p recommends. Trivial makedepends:

* auto*
* make
* gcc
* kernel-headers
* libtool
* glibc

Don't forget: every depends is a makedepends as well!

The rodepends() array should only contain packages really needed for running
the given application.

==== What are the various dependancy-control arrays for?

* 'depends' should contain any packages that this one depends on a compile and run time as well.
* 'makedepends' is for packages that this one needs to compile.
* 'rodepends' is for run time only dependencies;
eg. a wordlist package (with no executables) needs a program
which can handle it as a dictionary.
* 'provides' is an alternate name for the package. Main use is for
more packages which do the same; eg. hunspell-en and hunspell-de both provides
hunspell-dict, and hunspell depends on hunspell-dict instead of any specific
language. (Sometimes those packages are conflicting, like postfix provides
_and_ conflicts with mta, and exim too - this way there can be only one MTA on
the system, without the need to know other MTAs' name.)

Be careful with dependency-cycles: while pacman can handle them,
 makepkg can not.

==== How can I have PHP to work with my newly packaged eaccelerator/anything extension?

Since package A should not tamper with package B's config files,
you should write a README.Frugalware, describing how to enable/use
the extension, include it in source() and Fdoc README.Frugalware.

==== How can I cross-compile (package) an architecture-independent (non-binary) program?

You should modify carch and chost in '/etc/makepkg.conf' and
build the package again.

==== Should I rebuild a (non-binary) package after removing an archs() item?

No.

==== What is the easiest/shortest/intended way to version bump a package?

* `makepkg -d` tells you the new version to correct the FrugalBuild with
* `makepkg -d` again (it should fail on the checksum)
* `makepkg -dG` generates the correct checksums into the FB (you should check it anyway)
* `sudo makepkg -a` generates the fpm in chroot and also runs chkdep

==== repoman upd can't create /var/fst/ as it already exists

`Su -` to root and

`cd /var/fst && mv * frugalware-current`

==== How can I access the central FW repo (mirrors are too slow for me)?

`darcs get --partial http://darcs.frugalware.org/repos/frugalware-current`

This creates a new local repo for you, which is a copy of the central repo. To update it, run

`darcs pull`

in it. That's all to have a read-only copy; if you want to darcs
send patches, then you should read the Darcs docs to set up your
http://darcs.net/manual/node5.html#author_prefs[name],
http://darcs.net/manual/node5.html#SECTION00510060000000000000[email], etc.

==== What should I write as patch name and long comment at darcs rec?

Patch name should be the same as the fpm (but without .fpm, of course);
and long comment should only contain what you have done to create that
patch (eg. "added i686 to archs()" or alike).

==== I want to see my accents in darcs what output!

`echo "export DARCS_DONT_ESCAPE_ISPRINT=1" >> ~/.bash_profile`

and have your locale set correctly.

==== Where should I place my comments about a package?

You mean README.Frugalware. It should be in source() and then
at the end of the build() you should use:

Fdoc README.Frugalware

It is automatically included if you use empty build() or Fbuild.

==== I want to work with the latest development version of pacman&co.! How?

------------------------------------------------------------------
darcs get --partial http://darcs.frugalware.org/repos/pacman-tools
cd pacman-tools
make dist
------------------------------------------------------------------

You will have a brand new .tar.gz. Give it to pacman-tools' FrugalBuild,
correct the checksum, create a new pacman-tools package (makepkg -fucH helps)
and install it. That's all (and if you don't understand this, read it again,
and if it's still not clear, then wait for pacman-tools' normal upgrade
since you don't need this really)...

==== What is the order of a new package's locales? How should I name them?

Have a look at hunspell There is a hunspell package, which depends on
hunspell-dict. There is no package named hunspell-dict, but it is provided by the
locale packages. The most important ones are -en (==en_US), -hu (==hu_HU), -de (==de_DE),
 -fr (==fr_FR), -it (==it_IT), -es (==es_ES) and -sk (==sk_SK).
here are others: -en_US, -de_CH, -es_MX.

The -xx packages will be installed by the non-CD based (ie. netinst, DVD) installers.

=== Short developer notes

* If you don't use F* macros in your build(), then you'll need a || return 1.
* Shared Libraries (.so) have to be executable.
* Stripping binaries is unnecessary since automatically done by makepkg.
* If $pkgname.install exists, it is used automatically, no need to specify it
in the FrugalBuild neither as install nor source.
* If you use scrollkeeper-update or update-desktop-database or alike,
then you must include them (scrollkeeper, desktop-file-utils etc.) in the depends.
* Instead of Fmake; Fmakeinstall you can use Fbuild
(which is == Fpatchall && Fmake && Fmakeinstall).
* If you use F* command $Fdestdir or $Fsrcdir isn't required. Mostly. ;)
* license="GPL2" is not required, but it's a habit of BMH.
* You can use makepkg -G instead of makepkg -g to update sha1sums automatically.
* If any program depends on a graphical toolkit, then it should have x* group.
* A package may have only one contributor: the first person who wrote FrugalBuild for it.
* If a package's group changed you don't have to repackage it, a repoman cl is enough
on _all_ architecture.
* To turn off ccache, add -B switch to makepkg. In the meantime, read man makepkg. ;)
* Package name should only contain [A-Za-z0-9+_-], pkgrel and pkgver: [A-Za-z0-9+_].
* The full uid/gid reference is not currently part of the doc, but can be found at
(http://darcs.frugalware.org/darcsweb/darcsweb.cgi?r=frugalware-current;a=headblob;f=/docs/ids.txt)

=== Things to do (TODO)

You can check out TODOs by looking at the http://bugs.frugalware.org[BTS] or the
http://wiki.frugalware.org[wiki]'s TODO section.

