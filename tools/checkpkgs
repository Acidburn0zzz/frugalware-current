#!/usr/bin/env python
# -*- coding: UTF-8 -*-

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Import needed modules
import getopt, os, sys

# Defaults
color, command = (True, 'missing')
ctxt = '\x1b[01m%-35s \x1b[0m%-15s \x1b[01;%smi686 \x1b[01;%smx86_64 \x1b[01;%smppc\x1b[0m'
rtxt = '%-35s %-15s [%s] i686 [%s] x86_64 [%s] ppc'

def checkpkgs():
	'''Check if the remote packages are equal to the local FrugalBuilds.'''
	i686, x86_64, ppc = (get_pkgs('i686'), get_pkgs('x86_64'), get_pkgs('ppc'))
	ffdata, efdata = get_fbuilds()
	for fdata in (ffdata, efdata):
		for pkg in fdata:
			i686_msg = check_pkgs(pkg[1], i686, 'i686', pkg[2])
			x86_64_msg = check_pkgs(pkg[1], x86_64, 'x86_64', pkg[2])
			ppc_msg = check_pkgs(pkg[1], ppc, 'ppc', pkg[2])
			print_pkgs(pkg[1], pkg[0], i686_msg, x86_64_msg, ppc_msg)

def print_pkgs(pkg, grp, i686, x86_64, ppc):
	'''Print packages for that we are searching.'''
	if command == 'all':
		if color: print ctxt % (pkg, grp, i686[0], x86_64[0], ppc[0])
		else: print rtxt % (pkg, grp, i686[1], x86_64[1], ppc[1])
	elif command == 'build' and (33, '-') in (i686, x86_64, ppc):
		if color: print ctxt % (pkg, grp, i686[0], x86_64[0], ppc[0])
		else: print rtxt % (pkg, grp, i686[1], x86_64[1], ppc[1])
	elif command == 'available' and (34, '!') in (i686, x86_64, ppc):
		if color: print ctxt % (pkg, grp, i686[0], x86_64[0], ppc[0])
		else: print rtxt % (pkg, grp, i686[1], x86_64[1], ppc[1])
	elif command == 'missing' and (31, 'O') in (i686, x86_64, ppc):
		if color: print ctxt % (pkg, grp, i686[0], x86_64[0], ppc[0])
		else: print rtxt % (pkg, grp, i686[1], x86_64[1], ppc[1])

def check_pkgs(pkg, pkgs, arch, archs):
	'''Return the markers for the finded packages.'''
	if pkg in pkgs and arch in archs: return (32, 'X')
	elif not pkg in pkgs and arch in archs: return (31, 'O')
	elif '!' + arch in archs: return (34, '!')
	else: return (33, '-')

def clean_fb_data(bstring, typ = 's'):
	'''Clean strings from FrugalBuild files.'''
	cstring = bstring.split('=')[1]
	cstring = cstring.replace('"', '').replace("'", '')
	cstring = cstring.replace('(', '').replace(')', '')
	cstring = cstring.rstrip()
	if typ == 'l': cstring = cstring.split()
	return cstring

def get_fb_data(fbuild, repo = ''):
	'''Read and return informations from FrugalBuild files.'''
	pkgname, pkgver, pkgrel, group = (str(), str(), str(), str())
	archs, nobuild = (('i686', 'x86_64', 'ppc'), False)
	if repo == 'extra': group = 'extra/'
	group += os.path.basename(os.path.dirname(os.path.dirname(fbuild)))
	fbuild = file(fbuild, 'r') ; lines = fbuild.readlines() ; fbuild.close()
	for line in lines:
		if line.startswith('pkgname='): pkgname = clean_fb_data(line)
		elif line.startswith('pkgver='): pkgver = clean_fb_data(line)
		elif line.startswith('pkgrel='): pkgrel = clean_fb_data(line)
		elif line.startswith('archs='): archs = clean_fb_data(line, 'l')
		elif line.startswith('nobuild=1'): nobuild = True
		elif line.startswith('options=') and 'nobuild' in line: nobuild = True
		# Workaround for localization packages
		elif line.startswith('lang='): lang = clean_fb_data(line)
	try: pkgname = pkgname.replace('$lang', lang) + '-' + pkgver + '-' + pkgrel
	except: pkgname += '-' + pkgver + '-' + pkgrel
	if not pkgname.startswith('-'): return (group, pkgname, archs, nobuild)

def get_fbuilds():
	'''Get informations from FrugalBuild files.'''
	ffdata, efdata = (list(), list())
	for fbuild in os.walk('../source'):
		if 'FrugalBuild' in fbuild[2]:
			fbdata = get_fb_data(fbuild[0] + '/FrugalBuild')
			if fbdata and not fbdata[3]: ffdata.append(fbdata)
	ffdata.sort()
	for fbuild in os.walk('../extra/source'):
		if 'FrugalBuild' in fbuild[2]:
			fbdata = get_fb_data(fbuild[0] + '/FrugalBuild', 'extra')
			if fbdata and not fbdata[3]: efdata.append(fbdata)
	efdata.sort()
	return (ffdata, efdata)

def get_pkgs(arch):
	'''List remote packages.'''
	repkg = list()
	frepo = r'repoman ls frugalware-%s/ 2> /dev/null' % arch
	erepo = r'repoman ls extra/frugalware-%s/ 2> /dev/null' % arch
	restr = '-%s.fpm' % arch
	for pkg in os.popen(frepo + ' && ' + erepo).readlines():
		if not pkg.endswith('.fpm\n'): continue
		cpkg = os.path.basename(pkg.replace(restr, '').rstrip())
		repkg.append(cpkg)
	return repkg

def show_help(retval = 0):
	'''Help message / how to use this script.'''
	print 'Usage: %s [options]' % os.path.abspath(sys.argv[0])
	print
	print '\t-a|--all          Check all packages'
	print '\t-b|--build        Search for not builded packages'
	print '\t-e|--available    Search for packages that will not be available'
	print '\t-m|--missing      Search for missing packages (default)'
	print '\t-n|--nocolor      Don\'t use color'
	print
	print '-b is searching for packages they are only available on one architecture.'
	print '-m is searching for packages that can\'t be found, but should be existing.'
	print '-a is a short version for -bm.'
	print '-n doesn\'t use colors on the output. That\'s usefull if you want to send'
	print '   the output via mail or you want to save it in a file.'
	print
	print '[X] or green  = package is existing'
	print '[O] or red    = package is missing'
	print '[-] or yellow = package isn\'t builded for this architecture'
	print '[!] or blue   = package will not be available for this architecture'
	sys.exit(retval)

def wrong_command(options):
	'''Show the help message and exit with return code 1.'''
	command = os.path.abspath(sys.argv[0])
	for i in options: command += ' ' + i
	print 'Wrong command line: %s' % command
	show_help(1)

# Main
if __name__ == '__main__':
	# Read the command line
	try: args = getopt.getopt(sys.argv[1:], 'abehmn', ('all', 'available',
	                                                   'build', 'help',
	                                                   'missing', 'nocolor'))
	except: wrong_command(getopt.GetoptError('', sys.argv[1:]).opt)
	for arg in args[0]:
		if len(arg) > 0:
			if '-a' in arg[0] or '--all' in arg[0]: command = 'all'
			if '-b' in arg[0] and command == 'missing': command = 'all'
			elif '--build' in arg[0] and command == 'missing': command = 'all'
			elif '-b' in arg[0] or '--build' in arg[0]: command = 'build'
			if '-e' in arg[0] or '--available' in arg[0]: command = 'available'
			if '-m' in arg[0] and command == 'build': command = 'all'
			elif '--missing' in arg[0] and command == 'build': command = 'all'
			elif '-m' in arg[0] or '--missing' in arg[0]: command = 'missing'
			if '-n' in arg[0] or '--nocolor' in arg[0]: color = False
			if '-h' in arg[0] or '--help' in arg[0]: show_help()

	# Check and print the packages
	checkpkgs()
