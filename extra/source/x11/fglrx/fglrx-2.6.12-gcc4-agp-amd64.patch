diff -ur ./2.6.x/Makefile /lib/modules/fglrx/build_mod/2.6.x/Makefile
--- /lib/modules/fglrx/build_mod/2.6.x/Makefile	2005-06-16 01:57:33.000000000 +0200
+++ /lib/modules/fglrx/build_mod/2.6.x/Makefile	2005-06-16 10:42:21.000000000 +0200
@@ -1,4 +1,7 @@
 GCC_VER_MAJ      = $(shell gcc --version | head -n 1 | sed -e 's/[^0-9. ]//g;s/^ *//;s/^\(.\)\..*$$/\1/')
+ifeq ($(GCC_VER_MAJ),4)
+GCC_VER_MAJ	 = 3
+endif
 
 obj-m           += fglrx.o
 fglrx-libs      += libfglrx_ip.a.GCC$(GCC_VER_MAJ)
diff -ur ./agpgart_be.c /lib/modules/fglrx/build_mod/agpgart_be.c
--- /lib/modules/fglrx/build_mod/agpgart_be.c	2005-06-16 01:57:33.000000000 +0200
+++ /lib/modules/fglrx/build_mod/agpgart_be.c	2005-06-16 11:05:27.000000000 +0200
@@ -7067,7 +7067,7 @@
 			if ( agp_bridge.capndx )
             {
 				printk(KERN_INFO PFX "Detected HP ZX1 AGP "
-				       "chipset at %s\n", dev->slot_name);
+				       "chipset at %s\n", pci_name(dev));
 				agp_bridge.type = HP_ZX1;
 				agp_bridge.dev = dev;
               	/* fill in the mode register */
@@ -7133,7 +7133,7 @@
                 if( cap_ptr )
                 {
     				printk(KERN_INFO PFX "Detected a Via Apollo KT400 chipset in AGP v3 mode "
-	    			       "at %s\n", dev->slot_name);
+	    			       "at %s\n", pci_name(dev));
 
                     agp_bridge.type = VIA_APOLLO_KT400;
     				agp_bridge.dev = dev;
@@ -7153,12 +7153,12 @@
                 if( cap_ptr )
                 {
     				printk(KERN_DEBUG PFX "Detected a Via Apollo KT400 chipset in AGP v2 compat mode "
-	    			       "at %s\n", dev->slot_name);
+	    			       "at %s\n", pci_name(dev));
                 }
                 else
                 {
     				printk(KERN_ERR PFX "Detected a Via Apollo KT400 chipset but no AGPv2/v3 caps found "
-	    			       "at %s\n", dev->slot_name);
+	    			       "at %s\n", pci_name(dev));
                 }
             }
             break;
@@ -7184,7 +7184,7 @@
                 if( cap_ptr )
                 {
                     printk(KERN_INFO PFX "Detected a Via P4X400 chipset in AGP v3 mode "
-                           "at %s\n", dev->slot_name);
+                           "at %s\n", pci_name(dev));
 
                     agp_bridge.type = VIA_APOLLO_P4X400;
                     agp_bridge.dev = dev;
@@ -7204,7 +7204,7 @@
                 if( cap_ptr )
                 {
                     printk(KERN_INFO PFX "Detected a Via P4X400 chipset with AGP v3.x caps in AGP v2 compatibility mode "
-                           "at %s\n", dev->slot_name);
+                           "at %s\n", pci_name(dev));
 
                     agp_bridge.type = VIA_APOLLO_P4X400;
                     agp_bridge.dev = dev;
@@ -7224,12 +7224,12 @@
                 if( cap_ptr )
                 {
                     printk(KERN_DEBUG PFX "Detected a Via P4X400 chipset with AGP v2 caps in true AGP v2 mode "
-                           "at %s\n", dev->slot_name);
+                           "at %s\n", pci_name(dev));
                 }
                 else
                 {
                     printk(KERN_ERR PFX "Detected a Via P4X400 chipset but no AGPv2/v3 caps found "
-                           "at %s\n", dev->slot_name);
+                           "at %s\n", pci_name(dev));
                 }
             }
             break;
diff -ur ./firegl_public.c /lib/modules/fglrx/build_mod/firegl_public.c
--- /lib/modules/fglrx/build_mod/firegl_public.c	2005-06-16 01:57:33.000000000 +0200
+++ /lib/modules/fglrx/build_mod/firegl_public.c	2005-06-16 11:08:36.000000000 +0200
@@ -167,7 +167,7 @@
 
 #if !defined(__ia64__)
 // the macros do use errno variable
-static int errno;
+int errno;
 #endif // __ia64__
 
 // int mlock(const void *addr, size_t len);
@@ -336,15 +336,17 @@
 } firegl_drm_stub_info_t;
 static firegl_drm_stub_info_t firegl_stub_info;
 
-#if LINUX_VERSION_CODE < 0x020400
+#if LINUX_VERSION_CODE < 0x020400 || LINUX_VERSION_CODE > KERNEL_VERSION(2,6,10)
 struct firegl_drm_stub_info_t *firegl_stub_pointer = NULL;
 #define inter_module_put(x)
 #define inter_module_unregister(x)
 #define inter_module_get(x)             firegl_stub_pointer
 #define inter_module_register(x,y,z)    do { firegl_stub_pointer = z; } while (0)
+#if LINUX_VERSION_CODE < 0x020400
 /* This is a kludge for backward compatibility that is only useful in DRM(stub_open) */
 #define fops_put(fops)      MOD_DEC_USE_COUNT
 #define fops_get(fops)      (fops); MOD_INC_USE_COUNT
+#endif
 #endif // LINUX_VERSION_CODE < 0x020400
 
 #define DRM_MODULE_GET          (firegl_drm_stub_info_t *)inter_module_get("drm")
@@ -997,8 +999,49 @@
     return high_memory;
 }
 
+static struct pci_dev *fc4_pci_dev = NULL;
+static struct agp_bridge_data *fc4_agp_bridge = NULL;
+
+static struct agp_memory *fc4_agp_allocate_memory(size_t pages, u32 type)
+{
+    return agp_allocate_memory(fc4_agp_bridge, pages, type);
+}
+
+static void fc4_agp_enable(u32 mode)
+{
+    agp_enable(fc4_agp_bridge, mode);
+}
+
+static int fc4_agp_backend_acquire(void)
+{
+    if ((fc4_agp_bridge = agp_backend_acquire(fc4_pci_dev)))
+	return 0;
+    return -ENODEV;
+}
+
+static void fc4_agp_backend_release(void)
+{
+    agp_backend_release(fc4_agp_bridge);
+}
+
+static void fc4_agp_copy_info(struct agp_kern_info *info)
+{
+    fc4_agp_bridge = agp_find_bridge(fc4_pci_dev);
+    if (!fc4_agp_bridge) {
+	if (!(fc4_agp_bridge = agp_backend_acquire(fc4_pci_dev))) {
+	    // fail...
+	}
+	agp_copy_info(fc4_agp_bridge, info);
+	agp_backend_release(fc4_agp_bridge);
+    } else {
+	agp_copy_info(fc4_agp_bridge, info);
+    }
+    info->device = fc4_pci_dev;
+}
+
 int ATI_API_CALL __ke_pci_enable_device(__ke_pci_dev_t* dev)
 {
+    fc4_pci_dev = dev;
     return (pci_enable_device( (struct pci_dev*)(void *)dev ));
 }
 
@@ -2862,13 +2905,13 @@
 
 static const drm_agp_t drm_agp = {
 	&agp_free_memory,
-	&agp_allocate_memory,
+	&fc4_agp_allocate_memory,
 	&agp_bind_memory,
 	&agp_unbind_memory,
-	&agp_enable,
-	&agp_backend_acquire,
-	&agp_backend_release,
-	&agp_copy_info
+	&fc4_agp_enable,
+	&fc4_agp_backend_acquire,
+	&fc4_agp_backend_release,
+	&fc4_agp_copy_info
 };
 #undef DRM_AGP_MODULE_GET
 #undef DRM_AGP_MODULE_PUT
diff -ur ./nvidia-agp.c /lib/modules/fglrx/build_mod/nvidia-agp.c
--- /lib/modules/fglrx/build_mod/nvidia-agp.c	2005-06-16 01:57:33.000000000 +0200
+++ /lib/modules/fglrx/build_mod/nvidia-agp.c	2005-06-16 11:04:20.000000000 +0200
@@ -54,7 +54,7 @@
 #define NVIDIA_3_APLIMIT	0x54
 
 
-static int agp_try_unsupported __initdata = 0;
+//static int agp_try_unsupported __initdata = 0;
 
 static struct _nvidia_private {
 	struct pci_dev *dev_1;
--- /lib/modules/fglrx/build_mod/firegl_public.c	2005-06-18 17:42:41.000000000 -0300
+++ /lib/modules/fglrx/build_mod/firegl_public.c	2005-06-18 17:43:46.000000000 -0300
@@ -116,7 +116,11 @@
 #endif
 
 #ifdef __x86_64__
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,12)
+#include "linux/ioctl32.h"
+#else
 #include "asm/ioctl32.h"
+#endif
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,2)
 #include "linux/syscalls.h"
 #endif

