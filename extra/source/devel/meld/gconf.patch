diff -Naur meld-1.0.0-orig/meldapp.py meld-1.0.0/meldapp.py
--- meld-1.0.0-orig/meldapp.py	2005-07-01 20:32:08.000000000 +0200
+++ meld-1.0.0/meldapp.py	2005-09-05 00:08:03.000000000 +0200
@@ -470,11 +470,11 @@
         if self.use_custom_font:
             return self.custom_font
         else:
-            return self._gconf.get_string('/desktop/gnome/interface/monospace_font_name') or "Monospace 10"
+            return "Monospace 10"
 
     def get_toolbar_style(self):
         if self.toolbar_style == 0:
-            style = self._gconf.get_string('/desktop/gnome/interface/toolbar_style') or "both"
+            style = "both"
             style = style.replace("-","_")
             style = {"both":gtk.TOOLBAR_BOTH, "text":gtk.TOOLBAR_TEXT,
                      "icon":gtk.TOOLBAR_ICONS, "icons":gtk.TOOLBAR_ICONS,
@@ -487,17 +487,17 @@
 
     def get_gnome_editor_command(self, files):
         argv = []
-        editor = self._gconf.get_string('/desktop/gnome/applications/editor/exec') or "gedit"
-        if self._gconf.get_bool("/desktop/gnome/applications/editor/needs_term"):
-            texec = self._gconf.get_string("/desktop/gnome/applications/terminal/exec")
-            if texec:
-                argv.append(texec)
-                targ = self._gconf.get_string("/desktop/gnome/applications/terminal/exec_arg")
-                if targ:
-                    argv.append(targ)
-            argv.append( "%s %s" % (editor, " ".join( [f.replace(" ","\\ ") for f in files]) ) )
-        else:
-            argv = [editor] + files
+        editor = "gedit"
+#        if self._gconf.get_bool("/desktop/gnome/applications/editor/needs_term"):
+#            texec = self._gconf.get_string("/desktop/gnome/applications/terminal/exec")
+#            if texec:
+#                argv.append(texec)
+#                targ = self._gconf.get_string("/desktop/gnome/applications/terminal/exec_arg")
+#                if targ:
+#                    argv.append(targ)
+#            argv.append( "%s %s" % (editor, " ".join( [f.replace(" ","\\ ") for f in files]) ) )
+#        else:
+        argv = [editor] + files
         return argv
 
     def get_custom_editor_command(self, files):
diff -Naur meld-1.0.0-orig/prefs.py meld-1.0.0/prefs.py
--- meld-1.0.0-orig/prefs.py	2004-10-28 21:09:19.000000000 +0200
+++ meld-1.0.0/prefs.py	2005-09-05 00:06:00.000000000 +0200
@@ -49,7 +49,7 @@
         self.current = d
 
 # maybe fall back to ConfigParser if gconf is unavailable.
-import gconf
+#import gconf
 
 # types of values allowed
 BOOL = "bool"
@@ -84,19 +84,22 @@
         rootkey : the root gconf key where the values will be stored
         initial : a dictionary of string to Value objects.
         """
-        self.__dict__["_gconf"] = gconf.client_get_default()
+#        self.__dict__["_gconf"] = gconf.client_get_default()
         self.__dict__["_listeners"] = []
         self.__dict__["_rootkey"] = rootkey
         self.__dict__["_prefs"] = initial
-        self._gconf.add_dir(rootkey, gconf.CLIENT_PRELOAD_NONE)
-        self._gconf.notify_add(rootkey, self._on_preference_changed)
-        for key, value in self._prefs.items():
-            gval = self._gconf.get_without_default("%s/%s" % (rootkey, key) )
-            if gval != None:
-                value.current = getattr( gval, "get_%s" % value.type )()
+#        self._gconf.add_dir(rootkey, gconf.CLIENT_PRELOAD_NONE)
+#        self._gconf.notify_add(rootkey, self._on_preference_changed)
+#        for key, value in self._prefs.items():
+#            gval = self._gconf.get_without_default("%s/%s" % (rootkey, key) )
+#            if gval != None:
+#                value.current = getattr( gval, "get_%s" % value.type )()
 
     def __getattr__(self, attr):
-        return self._prefs[attr].current
+	if attr != "_gconf":
+            return self._prefs[attr].current
+        else:
+	    return None
 
     def get_default(self, attr):
         return self._prefs[attr].default
@@ -105,7 +108,7 @@
         value = self._prefs[attr]
         if value.current != val:
             value.current = val
-            setfunc = getattr(self._gconf, "set_%s" % value.type)
+#            setfunc = getattr(self._gconf, "set_%s" % value.type)
             setfunc("%s/%s" % (self._rootkey, attr), val)
             try:
                 for l in self._listeners:
