diff -Naur gtk-qt-engine-0.6/kcm_gtk/kcmgtk.cpp gtk-qt-engine-20060413/kcm_gtk/kcmgtk.cpp
--- gtk-qt-engine-0.6/kcm_gtk/kcmgtk.cpp	2006-04-13 02:22:30.000000000 +0200
+++ gtk-qt-engine-20060413/kcm_gtk/kcmgtk.cpp	2006-04-13 02:21:14.000000000 +0200
@@ -148,6 +148,9 @@
 	QBoxLayout* l = new QVBoxLayout(this);
 	widget = new KcmGtkWidget(this);
 	l->addWidget(widget);
+        
+	// Hide "Firefox and Thunderbird" groupbox
+	widget->groupBox1->setHidden(true);
 	
 	// Load the icons
 	KIconLoader iconLoader;
@@ -376,7 +379,7 @@
 			KListViewItem* i = new KListViewItem(w->profilesList);
 			i->setPixmap(0, icon);
 			i->setText(0, (p->type ? i18n("Thunderbird") : i18n("Firefox")) + " - " + p->name);
-			i->setText(1, QString::number((int)p));
+			i->setText(1, QString::number((long)p));
 		}
 		
 		dialog->setMainWidget(w);
diff -Naur gtk-qt-engine-0.6/kcm_gtk/kcmgtk.desktop gtk-qt-engine-20060413/kcm_gtk/kcmgtk.desktop
--- gtk-qt-engine-0.6/kcm_gtk/kcmgtk.desktop	2006-04-13 02:22:30.000000000 +0200
+++ gtk-qt-engine-20060413/kcm_gtk/kcmgtk.desktop	2006-04-13 02:21:14.000000000 +0200
@@ -3,7 +3,7 @@
 Comment=Control the style and fonts used by GTK applications
 Exec=kcmshell kcmgtk
 Terminal=false
-Icon=gnome_apps.png
+Icon=gnome_apps
 Hidden=true
 
 Encoding=UTF-8
diff -Naur gtk-qt-engine-0.6/kcm_gtk/kcmgtk-xdg.desktop gtk-qt-engine-20060413/kcm_gtk/kcmgtk-xdg.desktop
--- gtk-qt-engine-0.6/kcm_gtk/kcmgtk-xdg.desktop	2006-04-13 02:22:30.000000000 +0200
+++ gtk-qt-engine-20060413/kcm_gtk/kcmgtk-xdg.desktop	2006-04-13 02:21:14.000000000 +0200
@@ -3,7 +3,7 @@
 Comment=Control the style and fonts used by GTK applications
 Exec=kcmshell kcmgtk
 Terminal=false
-Icon=gnome_apps.png
+Icon=gnome_apps
 
 Encoding=UTF-8
 Keywords=kcmgtk,gtk,style,font
diff -Naur gtk-qt-engine-0.6/Makefile.am gtk-qt-engine-20060413/Makefile.am
--- gtk-qt-engine-0.6/Makefile.am	2006-04-13 02:22:30.000000000 +0200
+++ gtk-qt-engine-20060413/Makefile.am	2006-04-13 02:21:14.000000000 +0200
@@ -1,4 +1,4 @@
-SUBDIRS = $(TOPSUBDIRS) po
+SUBDIRS = kcm_gtk src po
 
 $(top_srcdir)/acinclude.m4: $(top_srcdir)/admin/acinclude.m4.in $(top_srcdir)/admin/libtool.m4.in
 	@cd $(top_srcdir) && cat admin/acinclude.m4.in admin/libtool.m4.in > acinclude.m4
diff -Naur gtk-qt-engine-0.6/src/qt_qt_wrapper.cpp gtk-qt-engine-20060413/src/qt_qt_wrapper.cpp
--- gtk-qt-engine-0.6/src/qt_qt_wrapper.cpp	2006-04-13 02:22:30.000000000 +0200
+++ gtk-qt-engine-20060413/src/qt_qt_wrapper.cpp	2006-04-13 02:21:33.000000000 +0200
@@ -40,6 +40,7 @@
 #include <fcntl.h>
 #include <stdlib.h>
 #include <unistd.h>
+#include <dlfcn.h>
 
 #ifdef USE_SOLARIS
 #include <procfs.h>
@@ -74,7 +75,7 @@
 
 QStringList kdeSearchPaths;
 QString iconTheme;
-QString iconThemeDir;
+QStringList iconThemeDirs;
 QColor alternateBackgroundColour;
 
 const QPixmap* backgroundTile;
@@ -144,6 +145,26 @@
 	return 0;
 }
 
+typedef void (*kstyle_fn)( void* );
+
+static kstyle_fn get_set_scrollbar_fn()
+{
+	void* handle = dlopen( "libkdefx.so.4", RTLD_LAZY );
+	if( handle == NULL )
+		return NULL;
+	kstyle_fn ret = (kstyle_fn) dlsym( handle, "kde_kstyle_set_scrollbar_type_windows" );
+	dlclose( handle );
+        return ret;
+}
+
+static void initStyle( QStyle* style )
+{
+	if( !style->inherits("KStyle" ) || !mozillaFix )
+		return;
+	static kstyle_fn set_scrollbar = get_set_scrollbar_fn();
+	if( set_scrollbar != NULL )
+		set_scrollbar( style );
+}
 
 void createQApp()
 {
@@ -262,7 +283,7 @@
 	}
 #endif // USE_SOLARIS
 
-	if (cmdLine.contains("mozilla") || cmdLine.contains("firefox"))
+	if (cmdLine.contains("mozilla") || cmdLine.contains("firefox") || cmdLine.contains("thunderbird") || cmdLine.contains("seamonkey"))
 		mozillaFix = true;
 		
 	gtkQtDebug = (getenv("GTK_QT_ENGINE_DEBUG") != NULL) ? 1 : 0;
@@ -353,6 +374,8 @@
 	backgroundTile = meepWidget->paletteBackgroundPixmap();
 	if (backgroundTile != NULL)
 		backgroundTileGdk = gdk_pixmap_foreign_new(backgroundTile->handle());
+
+	initStyle( &qApp->style());
 }
 
 void destroyQApp()
@@ -395,6 +418,7 @@
 		
 		// Tell the QApplication about this new style
 		qApp->setStyle(style);
+		initStyle(style);
 		
 		// Now we need to update GTK's properties
 		setRcProperties(gtkRcStyle, 1); // Rewrite our cache file
@@ -488,7 +512,7 @@
 		kdeSearchPaths.append(kdeDir);
 	kdeSearchPaths.append(runCommand("kde-config --prefix"));
 	
-	iconTheme = kdeConfigValue("Icons", "Theme", "crystal");
+	iconTheme = kdeConfigValue("Icons", "Theme", "crystalsvg");
 	QStringList back = QStringList::split(',', kdeConfigValue("General", "alternateBackground", "238,246,255"));
 	alternateBackgroundColour.setRgb(back[0].toInt(), back[1].toInt(), back[2].toInt());
 }
@@ -528,6 +552,9 @@
 	if (!gtkQtEnable)
 		return;
 	
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap     pixmap(w, h);
 	QPainter    painter(&pixmap);
 	QPushButton button(meepWidget);	
@@ -577,6 +604,10 @@
 		h1 = h * 3;
 	}
 
+	if ((w1 < 1) || (h1 < 1) ||
+	    (w < 1) || (h < 1))
+		return;
+
 	QPixmap     pixmap(w1, h1);
 	QPixmap     p(w, h);
 	QPainter    painter(&pixmap);
@@ -628,6 +659,10 @@
 		h1 = h * 3;
 	}
 
+	if ((w1 < 1) || (h1 < 1) ||
+	    (w < 1) || (h < 1))
+		return;
+
 	QPixmap     pixmap(w1, h1);
 	QPixmap     p(w, h);
 	QPainter    painter(&pixmap);
@@ -652,6 +687,9 @@
 	if (!gtkQtEnable)
 		return;
 
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w,h);
 	QPainter painter(&pixmap);
 	
@@ -685,6 +723,9 @@
 	
 	if (width < 2) width = 2;
 
+	if ((width < 1) || (height < 1))
+		return;
+
 	QPixmap pixmap(width, height);
 	QPainter painter(&pixmap);
 
@@ -707,6 +748,9 @@
 	int width = abs(xSource-xDest);
 	int height = style->ythickness;
 
+	if ((width < 1) || (height < 1))
+		return;
+
 	QPixmap pixmap(width, height);
 	QPainter painter(&pixmap);
 
@@ -726,6 +770,9 @@
 	if (!gtkQtEnable)
 		return;
 
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w, h);
 	QPainter painter(&pixmap);
 
@@ -773,6 +820,9 @@
 	if (!gtkQtEnable)
 		return;
 
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w,h);
 	QPainter painter(&pixmap);
 	QComboBox cb(false, 0);
@@ -801,6 +851,9 @@
 	int realH = qApp->style().pixelMetric(QStyle::PM_IndicatorHeight);
 	int realW = qApp->style().pixelMetric(QStyle::PM_IndicatorWidth);
 
+	if ((realW < 1) || (realH < 1))
+		return;
+
 	QPixmap pixmap(realW, realH);
 	QPainter painter(&pixmap);
 	QCheckBox checkbox(0);
@@ -834,6 +887,9 @@
 	int w1 = checkbox.sizeHint().width();
 	int h1 = checkbox.sizeHint().height(); */
 
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w,h);
 	QPainter painter(&pixmap);
 
@@ -864,6 +920,9 @@
 	int realH = qApp->style().pixelMetric(QStyle::PM_IndicatorHeight);
 	int realW = qApp->style().pixelMetric(QStyle::PM_IndicatorWidth);
 
+	if ((realW < 1) || (realH < 1))
+		return;
+
 	QPixmap pixmap(realH, realW);
 	QPainter painter(&pixmap);
 	QRadioButton radio(0);
@@ -896,6 +955,9 @@
 	if (!gtkQtEnable)
 		return;
 	
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w, h);
 	QPainter painter(&pixmap);
 	
@@ -915,6 +977,9 @@
 	if (!gtkQtEnable)
 		return;
 	
+	if ((w < 1) || (h < 1))
+		return;
+
 	if (scrollBar != 0)
 		delete scrollBar;
 	scrollBar = new QScrollBar(NULL);
@@ -955,6 +1020,8 @@
 				scrollBar, QStyle::SC_ScrollBarSlider);
 		offset = r.y();
 		thumbSize = r.height();
+                if (thumbSize < 0)
+                  thumbSize = -thumbSize;
 		
 		if (!r.isValid()) // Fix a crash bug in Eclipse where it was trying to draw tiny scrollbars.
 			return;
@@ -978,6 +1045,8 @@
 				scrollBar, QStyle::SC_ScrollBarSlider);
 		offset = r.x();
 		thumbSize = r.width();
+		if (thumbSize < 0)
+		  thumbSize = -thumbSize;
 
 		if (!r.isValid()) // Fix a crash bug in Eclipse when it was trying to draw tiny scrollbars.
 			return;
@@ -1007,6 +1076,9 @@
 	if (!gtkQtEnable)
 		return;
 
+	if ((w < 1) || (h < 1))
+		return;
+
 	QToolButton button(NULL);
 	button.resize(w, h);
 	
@@ -1043,6 +1115,9 @@
 	if (!gtkQtEnable)
 		return;
 
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w, h);
 	QPainter painter(&pixmap);
 	QMenuItem mi;
@@ -1062,6 +1137,9 @@
 	if (!gtkQtEnable)
 		return;
 	
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w,h);
 	QPainter painter(&pixmap);
 	QPopupMenu pm;
@@ -1084,6 +1162,9 @@
 	if (!gtkQtEnable)
 		return;
 
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w,h);
 	QPainter painter(&pixmap);
 
@@ -1104,6 +1185,9 @@
 	if (!gtkQtEnable)
 		return;
 	
+	if ((w < 1) || (h < 1))
+		return;
+
 	QStyle::SFlags sflags = stateToSFlags(state);
 		
 	QPixmap pixmap(w, h);
@@ -1123,9 +1207,10 @@
 	// Drawing tab base
         int th = qApp->style().pixelMetric(QStyle::PM_TabBarBaseHeight, meepTabBar);
 	int tw = w;
-        if (!th || !tw)
-                return;
 	
+	if ((tw < 1) || (th < 1))
+		return;
+
         QPixmap pixmap1(tw,th);
         QPainter painter1(&pixmap1);
 	if ((backgroundTile) && (!backgroundTile->isNull()))
@@ -1158,6 +1243,9 @@
 	if (!gtkQtEnable)
 		return;
 	
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w, h);
 	QPainter painter(&pixmap);
 	QStyle::SFlags sflags = stateToSFlags(state);
@@ -1207,6 +1295,9 @@
 	bar.setPercentageVisible(false);
 	bar.setFrameStyle(QFrame::NoFrame);
 	
+	if ((w2 < 1) || (h2 < 1))
+		return;
+
 	QPixmap pixmap(w2, h2);
 	QPainter painter(&pixmap);
 
@@ -1265,26 +1356,12 @@
 	if (!gtkQtEnable)
 		return;
 
-	int w1, h1;
 	meepSlider->setBackgroundOrigin(QWidget::ParentOrigin);
 	
 	meepSlider->setOrientation((orientation == GTK_ORIENTATION_HORIZONTAL) ? Qt::Horizontal : Qt::Vertical);
 	meepSlider->setEnabled(state != GTK_STATE_INSENSITIVE);
 
-	/* This can be draw in two ways -- 
-		If the slider is horizontal -- we can resize the slider to height using the sizeHint() (equivalent to using Qt's guidelines regarding height ) and (1)scale it later to GTK's sizes which will work for all slider sizes but will look in GTK as if the slider has been crushed or (2)else we can draw the slider using the height hint provided by Qt 
-		.. and vice versa for vertical slider */
-	if (w > h)
-	{
-		h1 = meepSlider->sizeHint().height();
-		w1 = w;
-	}
-	else
-	{
-		h1 = h;
-		w1 = meepSlider->sizeHint().width();
-	}
-	meepSlider->setGeometry(x, y, w1, h1);
+	meepSlider->setGeometry(x, y, w, h);
 	meepSlider->setMinValue(0);
 	meepSlider->setMaxValue(100);
 	
@@ -1304,6 +1381,9 @@
 	if (!gtkQtEnable)
 		return;
 	
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w, h);
 	QPainter painter(&pixmap);
 
@@ -1322,6 +1402,9 @@
 	if (!gtkQtEnable)
 		return;
 
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w,h);
 	QPainter painter(&pixmap);
 
@@ -1341,6 +1424,9 @@
         if (!gtkQtEnable)
                 return;
 
+	if ((w < 1) || (h < 1))
+		return;
+
         QPixmap     pixmap(w, h);
         QPainter    painter(&pixmap);
 
@@ -1438,6 +1524,9 @@
 		h -= 3;
 	}
 	
+	if ((w < 1) || (h < 1))
+		return;
+
 	QPixmap pixmap(w,h);
 	QPainter painter(&pixmap);
 	
@@ -1467,6 +1556,9 @@
 	if (!gtkQtEnable)
 		return;
 	
+	if ((w < 1) || (h < 1))
+		return;
+
 	QStyle::SFlags sflags = stateToSFlags(state);
 	if (state == GTK_STATE_INSENSITIVE)
 		sflags |= QStyle::Style_Off;
@@ -1535,15 +1627,22 @@
 {
 	QString fullPath;
 
-	fullPath = iconThemeDir + "16x16/" + path;
-	if (access(fullPath.latin1(), R_OK))
-		sizes &= ~1;
-	fullPath = iconThemeDir + "22x22/" + path;
-	if (access(fullPath.latin1(), R_OK))
-		sizes &= ~2;
-	fullPath = iconThemeDir + "32x32/" + path;
-	if (access(fullPath.latin1(), R_OK))
-		sizes &= ~4;
+        int has_sizes = 0;
+        for( QStringList::ConstIterator it = iconThemeDirs.begin();
+             it != iconThemeDirs.end();
+             ++it )
+        {
+            fullPath = *it + "16x16/" + path;
+	    if (access(fullPath.latin1(), R_OK) == 0)
+                has_sizes |= 1;
+            fullPath = *it + "22x22/" + path;
+	    if (access(fullPath.latin1(), R_OK) == 0)
+		has_sizes |= 2;
+	    fullPath = *it + "32x32/" + path;
+	    if (access(fullPath.latin1(), R_OK) == 0)
+		has_sizes |= 4;
+        }
+        sizes &= has_sizes;
 
 	if (!sizes) return "";
 	
@@ -1578,6 +1677,28 @@
 	return ret;
 }
 
+static QString iconInheritsDir( const QString& icondir )
+{
+    QFile index;
+    index.setName( icondir + "index.theme" );
+    if( !index.open( IO_ReadOnly ))
+    {
+        index.setName( icondir + "index.desktop" );
+        if( !index.open( IO_ReadOnly ))
+            return QString::null;
+    }
+    char buf[ 1024 ];
+    QRegExp reg( "^\\s*Inherits=([^\\n]*)" );
+    for(;;)
+        {
+        if( index.readLine( buf, 1023 ) <= 0 )
+            break;
+        if( reg.search( buf, 0 ) >= 0 )
+            return reg.cap( 1 );
+        }    
+    return QString::null;
+}
+
 void setRcProperties(GtkRcStyle* rc_style, int forceRecreate)
 {
 	if (!gtkQtEnable)
@@ -1591,6 +1712,8 @@
 	// This function takes quite a long time to execute, and is run at the start of every app.
 	// In order to speed it up, we can store the results in a file, along with the name of icon
 	// theme and style.  This file can then be regenerated when the icon theme or style change.
+        
+        const char* const VERSION = "1";
 	
 	QString cacheFilePath = QDir::homeDirPath() + "/.gtk_qt_engine_rc";
 	QFile cacheFile(cacheFilePath);
@@ -1601,7 +1724,7 @@
 		cacheFile.open(IO_ReadOnly);
 		stream.setDevice(&cacheFile);
 		
-		if (stream.readLine() == "# " + iconTheme + ", " + qApp->style().name())
+		if (stream.readLine() == "# " + iconTheme + ", " + qApp->style().name() + ", " + VERSION )
 		{
 			// This cache matches the current icon theme and style
 			// Let's load it and return
@@ -1616,7 +1739,7 @@
 	cacheFile.open(IO_WriteOnly | IO_Truncate);
 	stream.setDevice(&cacheFile);
 	
-	stream << "# " << iconTheme << ", " << qApp->style().name() << "\n\n";
+	stream << "# " << iconTheme << ", " << qApp->style().name() << ", " << VERSION << "\n\n";
 	stream << "# This file was generated by the Gtk Qt Theme Engine\n";
 	stream << "# It will be recreated when you change your KDE icon theme or widget style\n\n";
 	
@@ -1684,16 +1807,26 @@
 	//insertIntProperty(rc_style, "GtkCheckButton", "indicator-size", qApp->style().pixelMetric(QStyle::PM_IndicatorHeight) );
 	
 	// For icons
-	
-	iconThemeDir = kdeFindDir("/share/icons/" + iconTheme + "/", "index.theme", "index.desktop");
-	if (iconThemeDir.isEmpty())
+
+        QString theme = iconTheme;
+        for(;;)
+        {
+            QString icondir = kdeFindDir("/share/icons/" + theme + "/", "index.theme", "index.desktop");
+            if( icondir.isEmpty())
+                break;
+            iconThemeDirs.append( icondir );
+            theme = iconInheritsDir( icondir );
+            if( theme.isEmpty())
+                break;
+            }
+	if (iconThemeDirs.isEmpty())
 	{
 		cacheFile.close();
 		gtk_rc_add_default_file(cacheFilePath.latin1());
 		return;
 	}
-	
-	stream << "\npixmap_path \"" + iconThemeDir + "\"\n\n";
+
+	stream << "\npixmap_path \"" + iconThemeDirs.join( ":" ) + "\"\n\n";
 	
 	stream << "style \"KDE-icons\" {\n";
 	stream << doIconMapping("gtk-bold", "actions/text_bold.png");
diff -Naur gtk-qt-engine-0.6/src/qt_theme_draw.c gtk-qt-engine-20060413/src/qt_theme_draw.c
--- gtk-qt-engine-0.6/src/qt_theme_draw.c	2006-04-13 02:22:30.000000000 +0200
+++ gtk-qt-engine-20060413/src/qt_theme_draw.c	2006-04-13 02:21:14.000000000 +0200
@@ -1204,9 +1204,9 @@
 	{
 		GtkAdjustment* adj = gtk_range_get_adjustment(GTK_RANGE(widget));
 		if (orientation == GTK_ORIENTATION_VERTICAL)
-			drawScrollBarSlider(window, style, state_type, orientation, adj, x-1, y, width+2, height);
+			drawScrollBarSlider(window, style, state_type, orientation, adj, x, y, width, height);
 		else
-			drawScrollBarSlider(window, style, state_type, orientation, adj, x, y-1, width, height+2);
+			drawScrollBarSlider(window, style, state_type, orientation, adj, x, y, width, height);
 		return;
 	}
 }
@@ -1830,9 +1830,9 @@
   GdkPixmap* pix_test;
   
   /* What kind of horrible person would store a pointer to a widget here... */
-  GtkWidget* parent = 0;
-  gdk_window_get_user_data(window, (void **) &parent);
-  if (GTK_IS_MENU(parent))
+  void* parent = 0;
+  gdk_window_get_user_data(window, &parent);
+  if (GTK_IS_MENU((GtkWidget*) parent))
   {
     pix_test = QTENGINE_STYLE(style)->menuBackground;
   }
