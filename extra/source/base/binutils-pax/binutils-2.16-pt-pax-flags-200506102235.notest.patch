diff -Nurp binutils-2.16/bfd/elf-bfd.h binutils-2.16-pax/bfd/elf-bfd.h
--- binutils-2.16/bfd/elf-bfd.h	2005-03-03 20:52:31.000000000 +0000
+++ binutils-2.16-pax/bfd/elf-bfd.h	2005-06-10 23:31:18.000000000 +0100
@@ -1281,6 +1281,9 @@ struct elf_obj_tdata
   /* Should the PT_GNU_RELRO segment be emitted?  */
   bfd_boolean relro;
 
+  /* Segment flags for the PT_PAX_FLAGS segment.  */
+  unsigned int pax_flags;
+
   /* Symbol version definitions in external objects.  */
   Elf_Internal_Verdef *verdef;
 
diff -Nurp binutils-2.16/bfd/elf.c binutils-2.16-pax/bfd/elf.c
--- binutils-2.16/bfd/elf.c	2005-03-06 02:02:15.000000000 +0000
+++ binutils-2.16-pax/bfd/elf.c	2005-06-10 23:31:19.000000000 +0100
@@ -1028,6 +1028,7 @@ _bfd_elf_print_private_bfd_data (bfd *ab
 	    case PT_GNU_EH_FRAME: pt = "EH_FRAME"; break;
 	    case PT_GNU_STACK: pt = "STACK"; break;
 	    case PT_GNU_RELRO: pt = "RELRO"; break;
+	    case PT_PAX_FLAGS: pt = "PAX_FLAGS"; break;
 	    default: sprintf (buf, "0x%lx", p->p_type); pt = buf; break;
 	    }
 	  fprintf (f, "%8s off    0x", pt);
@@ -2376,6 +2377,9 @@ bfd_section_from_phdr (bfd *abfd, Elf_In
     case PT_GNU_RELRO:
       return _bfd_elf_make_section_from_phdr (abfd, hdr, index, "relro");
 
+    case PT_PAX_FLAGS:
+      return _bfd_elf_make_section_from_phdr (abfd, hdr, index, "pax_flags");
+
     default:
       /* Check for any processor-specific program segment types.  */
       bed = get_elf_backend_data (abfd);
@@ -3720,6 +3724,20 @@ map_sections_to_segments (bfd *abfd)
       pm = &m->next;
     }
 
+    {
+      amt = sizeof (struct elf_segment_map);
+      m = bfd_zalloc (abfd, amt);
+      if (m == NULL)
+	goto error_return;
+      m->next = NULL;
+      m->p_type = PT_PAX_FLAGS;
+      m->p_flags = elf_tdata (abfd)->pax_flags;
+      m->p_flags_valid = 1;
+
+      *pm = m;
+      pm = &m->next;
+    }
+
   free (sections);
   sections = NULL;
 
@@ -4424,6 +4442,11 @@ get_program_header_size (bfd *abfd)
       ++segs;
     }
 
+    {
+      /* We need a PT_PAX_FLAGS segment.  */
+      ++segs;
+    }
+
   for (s = abfd->sections; s != NULL; s = s->next)
     {
       if ((s->flags & SEC_LOAD) != 0
@@ -4959,7 +4982,8 @@ copy_private_bfd_data (bfd *ibfd, bfd *o
        6. PT_TLS segment includes only SHF_TLS sections.
        7. SHF_TLS sections are only in PT_TLS or PT_LOAD segments.
        8. PT_DYNAMIC should not contain empty sections at the beginning
-          (with the possible exception of .dynamic).  */
+          (with the possible exception of .dynamic).
+       9. PT_PAX_FLAGS segments do not include any sections.  */
 #define INCLUDE_SECTION_IN_SEGMENT(section, segment, bed)		\
   ((((segment->p_paddr							\
       ? IS_CONTAINED_BY_LMA (section, segment, segment->p_paddr)	\
@@ -4968,6 +4992,7 @@ copy_private_bfd_data (bfd *ibfd, bfd *o
     || IS_COREFILE_NOTE (segment, section))				\
    && section->output_section != NULL					\
    && segment->p_type != PT_GNU_STACK					\
+   && segment->p_type != PT_PAX_FLAGS					\
    && (segment->p_type != PT_TLS					\
        || (section->flags & SEC_THREAD_LOCAL))				\
    && (segment->p_type == PT_LOAD					\
diff -Nurp binutils-2.16/bfd/elflink.c binutils-2.16-pax/bfd/elflink.c
--- binutils-2.16/bfd/elflink.c	2005-04-29 14:40:22.000000000 +0100
+++ binutils-2.16-pax/bfd/elflink.c	2005-06-10 23:31:19.000000000 +0100
@@ -4941,17 +4941,31 @@ bfd_elf_size_dynamic_sections (bfd *outp
   if (!is_elf_hash_table (info->hash))
     return TRUE;
 
+  elf_tdata (output_bfd)->pax_flags = PF_NORANDEXEC;
+
+  if (info->execheap)
+    elf_tdata (output_bfd)->pax_flags |= PF_NOMPROTECT;
+  else if (info->noexecheap)
+    elf_tdata (output_bfd)->pax_flags |= PF_MPROTECT;
+
   elf_tdata (output_bfd)->relro = info->relro;
   if (info->execstack)
-    elf_tdata (output_bfd)->stack_flags = PF_R | PF_W | PF_X;
+    {
+      elf_tdata (output_bfd)->stack_flags = PF_R | PF_W | PF_X;
+      elf_tdata (output_bfd)->pax_flags |= PF_EMUTRAMP;
+    }
   else if (info->noexecstack)
-    elf_tdata (output_bfd)->stack_flags = PF_R | PF_W;
+    {
+      elf_tdata (output_bfd)->stack_flags = PF_R | PF_W;
+      elf_tdata (output_bfd)->pax_flags |= PF_NOEMUTRAMP;
+    }
   else
     {
       bfd *inputobj;
       asection *notesec = NULL;
       int exec = 0;
 
+      elf_tdata (output_bfd)->pax_flags |= PF_NOEMUTRAMP;
       for (inputobj = info->input_bfds;
 	   inputobj;
 	   inputobj = inputobj->link_next)
@@ -4964,7 +4978,11 @@ bfd_elf_size_dynamic_sections (bfd *outp
 	  if (s)
 	    {
 	      if (s->flags & SEC_CODE)
-		exec = PF_X;
+		{
+		  elf_tdata (output_bfd)->pax_flags &= ~PF_NOEMUTRAMP;
+		  elf_tdata (output_bfd)->pax_flags |= PF_EMUTRAMP;
+		  exec = PF_X;
+		}
 	      notesec = s;
 	    }
 	  else
diff -Nurp binutils-2.16/binutils/readelf.c binutils-2.16-pax/binutils/readelf.c
--- binutils-2.16/binutils/readelf.c	2005-04-20 19:43:36.000000000 +0100
+++ binutils-2.16-pax/binutils/readelf.c	2005-06-10 23:31:19.000000000 +0100
@@ -2330,6 +2330,7 @@ get_segment_type (unsigned long p_type)
 			return "GNU_EH_FRAME";
     case PT_GNU_STACK:	return "GNU_STACK";
     case PT_GNU_RELRO:  return "GNU_RELRO";
+    case PT_PAX_FLAGS: return "PAX_FLAGS";
 
     default:
       if ((p_type >= PT_LOPROC) && (p_type <= PT_HIPROC))
diff -Nurp binutils-2.16/include/bfdlink.h binutils-2.16-pax/include/bfdlink.h
--- binutils-2.16/include/bfdlink.h	2005-03-03 11:58:00.000000000 +0000
+++ binutils-2.16-pax/include/bfdlink.h	2005-06-10 23:31:19.000000000 +0100
@@ -318,6 +318,14 @@ struct bfd_link_info
      flags.  */
   unsigned int noexecstack: 1;
 
+  /* TRUE if PT_PAX_FLAGS segment should be created with PF_NOMPROTECT
+     flags.  */
+  unsigned int execheap: 1;
+
+  /* TRUE if PT_PAX_FLAGS segment should be created with PF_MPROTECT
+     flags.  */
+  unsigned int noexecheap: 1;
+
   /* TRUE if PT_GNU_RELRO segment should be created.  */
   unsigned int relro: 1;
 
diff -Nurp binutils-2.16/include/elf/common.h binutils-2.16-pax/include/elf/common.h
--- binutils-2.16/include/elf/common.h	2004-10-08 14:55:08.000000000 +0100
+++ binutils-2.16-pax/include/elf/common.h	2005-06-10 23:31:19.000000000 +0100
@@ -293,12 +293,29 @@
 #define PT_SUNW_EH_FRAME PT_GNU_EH_FRAME      /* Solaris uses the same value */
 #define PT_GNU_STACK	(PT_LOOS + 0x474e551) /* Stack flags */
 #define PT_GNU_RELRO	(PT_LOOS + 0x474e552) /* Read-only after relocation */
+#define PT_PAX_FLAGS	(PT_LOOS + 0x5041580) /* PaX flags */
 
 /* Program segment permissions, in program header p_flags field.  */
 
 #define PF_X		(1 << 0)	/* Segment is executable */
 #define PF_W		(1 << 1)	/* Segment is writable */
 #define PF_R		(1 << 2)	/* Segment is readable */
+
+/* Flags to control PaX behavior. */
+
+#define PF_PAGEEXEC    (1 << 4)    /* Enable  PAGEEXEC */
+#define PF_NOPAGEEXEC  (1 << 5)    /* Disable PAGEEXEC */
+#define PF_SEGMEXEC    (1 << 6)    /* Enable  SEGMEXEC */
+#define PF_NOSEGMEXEC  (1 << 7)    /* Disable SEGMEXEC */
+#define PF_MPROTECT    (1 << 8)    /* Enable  MPROTECT */
+#define PF_NOMPROTECT  (1 << 9)    /* Disable MPROTECT */
+#define PF_RANDEXEC    (1 << 10)   /* Enable  RANDEXEC */
+#define PF_NORANDEXEC  (1 << 11)   /* Disable RANDEXEC */
+#define PF_EMUTRAMP    (1 << 12)   /* Enable  EMUTRAMP */
+#define PF_NOEMUTRAMP  (1 << 13)   /* Disable EMUTRAMP */
+#define PF_RANDMMAP    (1 << 14)   /* Enable  RANDMMAP */
+#define PF_NORANDMMAP  (1 << 15)   /* Disable RANDMMAP */
+
 /* #define PF_MASKOS	0x0F000000    *//* OS-specific reserved bits */
 #define PF_MASKOS	0x0FF00000	/* New value, Oct 4, 1999 Draft */
 #define PF_MASKPROC	0xF0000000	/* Processor-specific reserved bits */
diff -Nurp binutils-2.16/ld/emultempl/elf32.em binutils-2.16-pax/ld/emultempl/elf32.em
--- binutils-2.16/ld/emultempl/elf32.em	2005-04-13 18:59:07.000000000 +0100
+++ binutils-2.16-pax/ld/emultempl/elf32.em	2005-06-10 23:31:19.000000000 +0100
@@ -1725,6 +1725,16 @@ cat >>e${EMULATION_NAME}.c <<EOF
 	  link_info.noexecstack = TRUE;
 	  link_info.execstack = FALSE;
 	}
+      else if (strcmp (optarg, "execheap") == 0)
+	{
+	  link_info.execheap = TRUE;
+	  link_info.noexecheap = FALSE;
+	}
+      else if (strcmp (optarg, "noexecheap") == 0)
+	{
+	  link_info.noexecheap = TRUE;
+	  link_info.execheap = FALSE;
+	}
       else if (strcmp (optarg, "relro") == 0)
 	link_info.relro = TRUE;
       else if (strcmp (optarg, "norelro") == 0)
@@ -1765,6 +1775,7 @@ cat >>e${EMULATION_NAME}.c <<EOF
   fprintf (file, _("  -z combreloc\t\tMerge dynamic relocs into one section and sort\n"));
   fprintf (file, _("  -z defs\t\tReport unresolved symbols in object files.\n"));
   fprintf (file, _("  -z execstack\t\tMark executable as requiring executable stack\n"));
+  fprintf (file, _("  -z execheap\t\tMark executable as requiring executable heap\n"));
   fprintf (file, _("  -z initfirst\t\tMark DSO to be initialized first at runtime\n"));
   fprintf (file, _("  -z interpose\t\tMark object to interpose all DSOs but executable\n"));
   fprintf (file, _("  -z loadfltr\t\tMark object requiring immediate process\n"));
@@ -1776,6 +1787,7 @@ cat >>e${EMULATION_NAME}.c <<EOF
   fprintf (file, _("  -z nodlopen\t\tMark DSO not available to dlopen\n"));
   fprintf (file, _("  -z nodump\t\tMark DSO not available to dldump\n"));
   fprintf (file, _("  -z noexecstack\tMark executable as not requiring executable stack\n"));
+  fprintf (file, _("  -z noexecheap\tMark executable as not requiring executable heap\n"));
   fprintf (file, _("  -z norelro\t\tDon't create RELRO program header\n"));
   fprintf (file, _("  -z now\t\tMark object non-lazy runtime binding\n"));
   fprintf (file, _("  -z origin\t\tMark object requiring immediate \$ORIGIN processing\n\t\t\t  at runtime\n"));
diff -Nurp binutils-2.16/ld/ldgram.y binutils-2.16-pax/ld/ldgram.y
--- binutils-2.16/ld/ldgram.y	2005-01-21 12:04:25.000000000 +0000
+++ binutils-2.16-pax/ld/ldgram.y	2005-06-10 23:31:19.000000000 +0100
@@ -1085,6 +1085,8 @@ phdr_type:
 			    $$ = exp_intop (0x6474e550);
 			  else if (strcmp (s, "PT_GNU_STACK") == 0)
 			    $$ = exp_intop (0x6474e551);
+			  else if (strcmp (s, "PT_PAX_FLAGS") == 0)
+			    $$ = exp_intop (0x65041580);
 			  else
 			    {
 			      einfo (_("\
