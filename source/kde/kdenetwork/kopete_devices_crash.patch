diff -Naur kdenetwork-3.5.2/kopete/libkopete/avdevice/videodevice.cpp kdenetwork-3.5.2-p/kopete/libkopete/avdevice/videodevice.cpp
--- kdenetwork-3.5.2/kopete/libkopete/avdevice/videodevice.cpp	2006-03-17 11:12:32.000000000 +0100
+++ kdenetwork-3.5.2-p/kopete/libkopete/avdevice/videodevice.cpp	2006-04-22 02:11:56.000000000 +0200
@@ -1282,7 +1282,10 @@
 
 float VideoDevice::getBrightness()
 {
+  if (m_current_input < m_input.size() )
 	return m_input[m_current_input].getBrightness();
+  else
+	return 0;
 }
 
 float VideoDevice::setBrightness(float brightness)
@@ -1317,7 +1320,10 @@
 
 float VideoDevice::getContrast()
 {
+  if (m_current_input < m_input.size() )
 	return m_input[m_current_input].getContrast();
+  else
+	return 0;
 }
 
 float VideoDevice::setContrast(float contrast)
@@ -1352,7 +1358,10 @@
 
 float VideoDevice::getSaturation()
 {
+  if (m_current_input < m_input.size() )
 	return m_input[m_current_input].getSaturation();
+  else
+	return 0;
 }
 
 float VideoDevice::setSaturation(float saturation)
@@ -1387,7 +1396,10 @@
 
 float VideoDevice::getWhiteness()
 {
+  if (m_current_input < m_input.size() )
 	return m_input[m_current_input].getWhiteness();
+  else
+	return 0;
 }
 
 float VideoDevice::setWhiteness(float whiteness)
@@ -1422,7 +1434,10 @@
 
 float VideoDevice::getHue()
 {
+  if (m_current_input < m_input.size() )
 	return m_input[m_current_input].getHue();
+  else
+	return 0;
 }
 
 float VideoDevice::setHue(float hue)
@@ -1458,39 +1473,63 @@
 
 bool VideoDevice::getAutoBrightnessContrast()
 {
+  if (m_current_input < m_input.size() )
 	return m_input[m_current_input].getAutoBrightnessContrast();
+  else
+	return false;
 }
 
 bool VideoDevice::setAutoBrightnessContrast(bool brightnesscontrast)
 {
 	kdDebug() <<  k_funcinfo << "VideoDevice::setAutoBrightnessContrast(" << brightnesscontrast << ") called." << endl;
-	m_input[m_current_input].setAutoBrightnessContrast(brightnesscontrast);
-	return m_input[m_current_input].getAutoBrightnessContrast();
-
+	if (m_current_input < m_input.size() ) 
+	  {
+		m_input[m_current_input].setAutoBrightnessContrast(brightnesscontrast);
+		return m_input[m_current_input].getAutoBrightnessContrast();
+	  }
+	else
+	  return false;
+   
 }
 
 bool VideoDevice::getAutoColorCorrection()
 {
+  if (m_current_input < m_input.size() )
 	return m_input[m_current_input].getAutoColorCorrection();
+  else
+	return false;
 }
 
 bool VideoDevice::setAutoColorCorrection(bool colorcorrection)
 {
 	kdDebug() <<  k_funcinfo << "VideoDevice::setAutoColorCorrection(" << colorcorrection << ") called." << endl;
-	m_input[m_current_input].setAutoColorCorrection(colorcorrection);
-	return m_input[m_current_input].getAutoColorCorrection();
+	if (m_current_input < m_input.size() )
+	  {
+		m_input[m_current_input].setAutoColorCorrection(colorcorrection);
+		return m_input[m_current_input].getAutoColorCorrection();
+	  }
+	else
+	  return false;
 }
 
 bool VideoDevice::getImageAsMirror()
 {
+  if (m_current_input < m_input.size() )
 	return m_input[m_current_input].getImageAsMirror();
+  else
+	return false;
 }
 
 bool VideoDevice::setImageAsMirror(bool imageasmirror)
 {
 	kdDebug() <<  k_funcinfo << "VideoDevice::setImageAsMirror(" << imageasmirror << ") called." << endl;
-	m_input[m_current_input].setImageAsMirror(imageasmirror);
-	return m_input[m_current_input].getImageAsMirror();
+	if (m_current_input < m_input.size() ) 
+	  {
+		m_input[m_current_input].setImageAsMirror(imageasmirror);
+		return m_input[m_current_input].getImageAsMirror();
+	  }
+	else
+	  return false;
 }
 
 bool VideoDevice::getWorkaroundBrokenDriver()
diff -Naur kdenetwork-3.5.2/kopete/libkopete/avdevice/videodevicepool.cpp kdenetwork-3.5.2-p/kopete/libkopete/avdevice/videodevicepool.cpp
--- kdenetwork-3.5.2/kopete/libkopete/avdevice/videodevicepool.cpp	2006-03-17 11:12:32.000000000 +0100
+++ kdenetwork-3.5.2-p/kopete/libkopete/avdevice/videodevicepool.cpp	2006-04-22 02:11:56.000000000 +0200
@@ -210,7 +210,10 @@
  */
 float VideoDevicePool::getBrightness()
 {
+  if (currentDevice() < m_videodevice.size() )
 	return m_videodevice[currentDevice()].getBrightness();
+  else
+	return 0;
 }
 
 /*!
@@ -218,7 +221,10 @@
  */
 float VideoDevicePool::setBrightness(float brightness)
 {
-	return m_videodevice[currentDevice()].setBrightness(brightness);
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].setBrightness(brightness);
+	else
+	  return 0;
 }
 
 /*!
@@ -226,7 +232,10 @@
  */
 float VideoDevicePool::getContrast()
 {
-	return m_videodevice[currentDevice()].getContrast();
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].getContrast();
+	else
+	  return 0;
 }
 
 /*!
@@ -234,7 +243,10 @@
  */
 float VideoDevicePool::setContrast(float contrast)
 {
-	return m_videodevice[currentDevice()].setContrast(contrast);
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].setContrast(contrast);
+	else
+	  return 0;
 }
 
 /*!
@@ -242,7 +254,10 @@
  */
 float VideoDevicePool::getSaturation()
 {
-	return m_videodevice[currentDevice()].getSaturation();
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].getSaturation();
+	else
+	  return 0;
 }
 
 /*!
@@ -250,7 +265,10 @@
  */
 float VideoDevicePool::setSaturation(float saturation)
 {
-	return m_videodevice[currentDevice()].setSaturation(saturation);
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].setSaturation(saturation);
+	else
+	  return 0;
 }
 
 /*!
@@ -258,7 +276,10 @@
  */
 float VideoDevicePool::getWhiteness()
 {
-	return m_videodevice[currentDevice()].getWhiteness();
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].getWhiteness();
+	else
+	  return 0;
 }
 
 /*!
@@ -266,7 +287,10 @@
  */
 float VideoDevicePool::setWhiteness(float whiteness)
 {
-	return m_videodevice[currentDevice()].setWhiteness(whiteness);
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].setWhiteness(whiteness);
+	else
+	  return 0;
 }
 
 /*!
@@ -274,7 +298,10 @@
  */
 float VideoDevicePool::getHue()
 {
-	return m_videodevice[currentDevice()].getHue();
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].getHue();
+	else
+	  return 0;
 }
 
 /*!
@@ -282,7 +309,10 @@
  */
 float VideoDevicePool::setHue(float hue)
 {
-	return m_videodevice[currentDevice()].setHue(hue);
+    if (currentDevice() < m_videodevice.size() )
+	  return m_videodevice[currentDevice()].setHue(hue);
+	else
+	  return 0;
 }
 
 /*!
