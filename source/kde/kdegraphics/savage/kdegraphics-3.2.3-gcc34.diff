diff -Naur kdegraphics-3.2.3.orig/ksvg/ecma/ksvg_bridge.h kdegraphics-3.2.3/ksvg/ecma/ksvg_bridge.h
--- kdegraphics-3.2.3.orig/ksvg/ecma/ksvg_bridge.h	2003-10-26 11:52:36.000000000 +0100
+++ kdegraphics-3.2.3/ksvg/ecma/ksvg_bridge.h	2004-06-11 10:19:15.000000000 +0200
@@ -23,7 +23,11 @@
 
 #include <kdebug.h>
 
-#include "ksvg_lookup.h"
+//#include "ksvg_lookup.h"
+#include <kjs/object.h>
+#include <kjs/lookup.h>
+#include <kjs/interpreter.h> // for ExecState
+//#include "ksvg_scriptinterpreter.h"
 
 namespace KJS
 {
@@ -90,7 +94,7 @@
 //			kdDebug(26004) << "KSVGBridge::put(), " << propertyName.qstring() << " Name: " << classInfo()->className << " Object: " << m_impl << endl;
 
 		// Try to see if we know this property (and need to take special action)
-		if(m_impl->put(exec, propertyName, value, attr))
+		if(this->m_impl->put(exec, propertyName, value, attr))
 			return;
 
 		// We don't -> set property in ObjectImp.
diff -Naur kdegraphics-3.2.3.orig/ksvg/ecma/ksvg_lookup.h kdegraphics-3.2.3/ksvg/ecma/ksvg_lookup.h
--- kdegraphics-3.2.3.orig/ksvg/ecma/ksvg_lookup.h	2003-08-17 13:49:23.000000000 +0200
+++ kdegraphics-3.2.3/ksvg/ecma/ksvg_lookup.h	2004-06-11 10:19:15.000000000 +0200
@@ -24,6 +24,7 @@
 #include <kjs/object.h>
 #include <kjs/lookup.h>
 #include <kjs/interpreter.h> // for ExecState
+#include "ksvg_scriptinterpreter.h"
 
 class KSVGScriptInterpreter;
 
diff -Naur kdegraphics-3.2.3.orig/ksvg/ecma/ksvg_scriptinterpreter.h kdegraphics-3.2.3/ksvg/ecma/ksvg_scriptinterpreter.h
--- kdegraphics-3.2.3.orig/ksvg/ecma/ksvg_scriptinterpreter.h	2003-05-10 11:32:50.000000000 +0200
+++ kdegraphics-3.2.3/ksvg/ecma/ksvg_scriptinterpreter.h	2004-06-11 10:19:15.000000000 +0200
@@ -99,8 +99,7 @@
 	else
 	{
 		ClassCtor* ctor = new ClassCtor(exec); // create the ClassCtor instance
-		KJS::Object newObject(new KSVGBridge<ClassCtor>(exec, ctor)); // create the bridge around it
-		exec->interpreter()->globalObject().put(exec, propertyName, newObject, Internal);
+		KJS::Object newObject(new ::KSVGBridge<ClassCtor>(exec, ctor)); // create the bridge around it exec->interpreter()->globalObject().put(exec, propertyName, newObject, KJS::Internal);
 		return newObject;
 	}
 }
diff -Naur kdegraphics-3.2.3.orig/ksvg/impl/SVGHelperImpl.h kdegraphics-3.2.3/ksvg/impl/SVGHelperImpl.h
--- kdegraphics-3.2.3.orig/ksvg/impl/SVGHelperImpl.h	2003-08-27 22:08:25.000000000 +0200
+++ kdegraphics-3.2.3/ksvg/impl/SVGHelperImpl.h	2004-06-11 10:19:15.000000000 +0200
@@ -24,6 +24,7 @@
 #include <dom/dom_element.h>
 
 #include "SVGLengthImpl.h"
+#include "SVGElementImpl.h"
 
 #include "ksvg_lookup.h"
 
@@ -56,7 +57,7 @@
 		{
 			T *cast = dynamic_cast<T *>(element->ownerDoc()->getElementFromHandle(node.handle()));
 			if(cast)
-				cast->putValueProperty(element->ownerDoc()->ecmaEngine()->globalExec(), token, KJS::String(value), Internal);
+				cast->putValueProperty(element->ownerDoc()->ecmaEngine()->globalExec(), token, KJS::String(value), KJS::Internal);
 		}
 	}
 
diff -Naur kdegraphics-3.2.3.orig/ksvg/impl/SVGList.h kdegraphics-3.2.3/ksvg/impl/SVGList.h
--- kdegraphics-3.2.3.orig/ksvg/impl/SVGList.h	2004-01-17 13:52:40.000000000 +0100
+++ kdegraphics-3.2.3/ksvg/impl/SVGList.h	2004-06-11 10:19:15.000000000 +0200
@@ -48,7 +48,7 @@
 {
 public:
 	SVGList() { m_impl.setAutoDelete(false); }
-	SVGList(const SVGList &) { *this = other; }
+	SVGList(const SVGList<T> &other) { *this = other; } //SVGList(const SVGList &) { *this = other; }
 	~SVGList() { clear(); }
 
 	SVGList<T> &operator=(const SVGList<T> &other)
