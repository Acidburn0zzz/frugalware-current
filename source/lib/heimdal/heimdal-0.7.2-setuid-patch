Index: appl/dceutils/ChangeLog
===================================================================
RCS file: /afs/pdc.kth.se/src/packages/kth-krb/SourceRepository/heimdal/appl/dceutils/ChangeLog,v
retrieving revision 1.8
retrieving revision 1.8.2.1
diff -u -p -r1.8 -r1.8.2.1
--- heimdal/appl/dceutils/ChangeLog	2005/04/06 11:23:17	1.8
+++ ChangeLog	2006/08/09 00:33:33	1.8.2.1
@@ -1,5 +1,9 @@
-2005-04-06  Love Hörnquist Åstrand  <lha@it.su.se>
+2006-08-08  Love Hörnquist Åstrand  <lha@it.su.se>
 
+	* k5dcecon.c: Check for seteuid failure, prompted by MIT advisory.
+	
+2005-04-06  Love Hörnquist Åstrand  <lha@it.su.se>
+	
 	* testpag.c: use NULL as last argument to execl, not 0
 
 2002-08-12  Johan Danielsson  <joda@pdc.kth.se>
Index: appl/dceutils/k5dcecon.c
===================================================================
RCS file: /afs/pdc.kth.se/src/packages/kth-krb/SourceRepository/heimdal/appl/dceutils/k5dcecon.c,v
retrieving revision 1.4
retrieving revision 1.4.10.1
diff -u -p -r1.4 -r1.4.10.1
--- heimdal/appl/dceutils/k5dcecon.c	2002/08/09 13:19:41	1.4
+++ k5dcecon.c	2006/08/09 00:33:33	1.4.10.1
@@ -71,7 +71,7 @@
 #endif
 
 #ifdef __hpux
-#define seteuid(A)		setresuid(-1,A,-1);
+#define seteuid(A)		setresuid(-1,A,-1)
 #endif
 
 
@@ -549,7 +549,8 @@ int k5dcecreate(luid, luser, pname, krbt
 	 */
 
 	if (uid == 0) {
-		seteuid(luid);
+		if (seteuid(luid) < 0)
+			goto abort;
 	}  
 
 	cp = strchr(pname,'@');
Index: appl/ftp/ChangeLog
===================================================================
RCS file: /afs/pdc.kth.se/src/packages/kth-krb/SourceRepository/appl/ftp/ChangeLog,v
retrieving revision 1.169
retrieving revision 1.169.2.1
diff -u -p -r1.169 -r1.169.2.1
--- SourceRepository/appl/ftp/ChangeLog	2005/05/29 21:42:45	1.169
+++ ChangeLog	2006/08/09 00:33:34	1.169.2.1
@@ -1,3 +1,9 @@
+2006-08-08  Love Hörnquist Åstrand  <lha@it.su.se>
+
+	* rcp.c: Check return values from seteuid, prompted by MIT
+	advisory.  Thanks to Tom Yu at MIT, and Michael Calmer and Marcus
+	Meissner at SUSE.  Either of CVE-2006-3083 or CVE-2006-3084.
+	
 2005-05-29  Love Hörnquist Åstrand  <lha@it.su.se>
 
 	* ftpd/ftpd.c: avoid 'unused variable' warnings
Index: appl/ftp/ftpd/ftpd.c
===================================================================
RCS file: /afs/pdc.kth.se/src/packages/kth-krb/SourceRepository/appl/ftp/ftpd/ftpd.c,v
retrieving revision 1.173
retrieving revision 1.173.2.1
diff -u -p -r1.173 -r1.173.2.1
--- SourceRepository/appl/ftp/ftpd/ftpd.c	2005/06/02 10:41:28	1.173
+++ ftpd.c	2006/08/09 00:33:34	1.173.2.1
@@ -138,9 +138,9 @@ static int	 handleoobcmd(void);
 static int	 checkuser (char *, char *);
 static int	 checkaccess (char *);
 static FILE	*dataconn (const char *, off_t, const char *);
-static void	 dolog (struct sockaddr *sa, int len);
+static void	 dolog (struct sockaddr *, int);
 static void	 end_login (void);
-static FILE	*getdatasock (const char *);
+static FILE	*getdatasock (const char *, int);
 static char	*gunique (char *);
 static RETSIGTYPE	 lostconn (int);
 static int	 receive_data (FILE *, FILE *);
@@ -835,7 +835,8 @@ static void
 end_login(void)
 {
 
-	seteuid((uid_t)0);
+	if (seteuid((uid_t)0) < 0)
+		fatal("Failed to seteuid");
 	if (logged_in)
 		ftpd_logwtmp(ttyline, "", "");
 	pw = NULL;
@@ -1208,14 +1209,15 @@ done:
 }
 
 static FILE *
-getdatasock(const char *mode)
+getdatasock(const char *mode, int domain)
 {
 	int s, t, tries;
 
 	if (data >= 0)
 		return (fdopen(data, mode));
-	seteuid(0);
-	s = socket(ctrl_addr->sa_family, SOCK_STREAM, 0);
+	if (seteuid(0) < 0)
+		fatal("Failed to seteuid");
+	s = socket(domain, SOCK_STREAM, 0);
 	if (s < 0)
 		goto bad;
 	socket_set_reuseaddr (s, 1);
@@ -1232,7 +1234,8 @@ getdatasock(const char *mode)
 			goto bad;
 		sleep(tries);
 	}
-	seteuid(pw->pw_uid);
+	if (seteuid(pw->pw_uid) < 0)
+		fatal("Failed to seteuid");
 #ifdef IPTOS_THROUGHPUT
 	socket_set_tos (s, IPTOS_THROUGHPUT);
 #endif
@@ -1240,7 +1243,8 @@ getdatasock(const char *mode)
 bad:
 	/* Return the real value of errno (close may change it) */
 	t = errno;
-	seteuid((uid_t)pw->pw_uid);
+	if (seteuid((uid_t)pw->pw_uid) < 0)
+		fatal("Failed to seteuid");
 	close(s);
 	errno = t;
 	return (NULL);
@@ -1271,7 +1275,7 @@ dataconn(const char *name, off_t size, c
 {
 	char sizebuf[32];
 	FILE *file;
-	int retry = 0;
+	int domain, retry = 0;
 
 	file_size = size;
 	byte_count = 0;
@@ -1318,7 +1322,15 @@ dataconn(const char *name, off_t size, c
 	if (usedefault)
 		data_dest = his_addr;
 	usedefault = 1;
-	file = getdatasock(mode);
+	/* 
+	 * Default to using the same socket type as the ctrl address,
+	 * unless we know the type of the data address.
+	 */
+	domain = data_dest->sa_family;
+	if (domain == PF_UNSPEC)
+	    domain = ctrl_addr->sa_family;
+
+	file = getdatasock(mode, domain);
 	if (file == NULL) {
 		char data_addr[256];
 
@@ -1889,11 +1901,11 @@ dologout(int status)
     transflag = 0;
     urgflag = 0;
     if (logged_in) {
-	seteuid((uid_t)0);
-	ftpd_logwtmp(ttyline, "", "");
 #ifdef KRB4
 	cond_kdestroy();
 #endif
+	seteuid((uid_t)0); /* No need to check, we call exit() below */
+	ftpd_logwtmp(ttyline, "", "");
     }
     /* beware of flushing buffers after a SIGPIPE */
 #ifdef XXX
@@ -2006,12 +2018,15 @@ pasv(void)
 				     0);
 	socket_set_portrange(pdata, restricted_data_ports, 
 	    pasv_addr->sa_family); 
-	seteuid(0);
+	if (seteuid(0) < 0)
+		fatal("Failed to seteuid");
 	if (bind(pdata, pasv_addr, socket_sockaddr_size (pasv_addr)) < 0) {
-		seteuid(pw->pw_uid);
+		if (seteuid(pw->pw_uid) < 0)
+			fatal("Failed to seteuid");
 		goto pasv_error;
 	}
-	seteuid(pw->pw_uid);
+	if (seteuid(pw->pw_uid) < 0)
+		fatal("Failed to seteuid");
 	len = sizeof(pasv_addr_ss);
 	if (getsockname(pdata, pasv_addr, &len) < 0)
 		goto pasv_error;
@@ -2050,12 +2065,15 @@ epsv(char *proto)
 				     0);
 	socket_set_portrange(pdata, restricted_data_ports, 
 	    pasv_addr->sa_family); 
-	seteuid(0);
+	if (seteuid(0) < 0)
+		fatal("Failed to seteuid");
 	if (bind(pdata, pasv_addr, socket_sockaddr_size (pasv_addr)) < 0) {
-		seteuid(pw->pw_uid);
+		if (seteuid(pw->pw_uid))
+			fatal("Failed to seteuid");
 		goto pasv_error;
 	}
-	seteuid(pw->pw_uid);
+	if (seteuid(pw->pw_uid) < 0)
+		fatal("Failed to seteuid");
 	len = sizeof(pasv_addr_ss);
 	if (getsockname(pdata, pasv_addr, &len) < 0)
 		goto pasv_error;
Index: appl/rcp/rcp.c
===================================================================
RCS file: /afs/pdc.kth.se/src/packages/kth-krb/SourceRepository/heimdal/appl/rcp/rcp.c,v
retrieving revision 1.20
retrieving revision 1.20.2.1
diff -u -p -r1.20 -r1.20.2.1
--- heimdal/appl/rcp/rcp.c	2005/05/11 11:04:30	1.20
+++ rcp.c	2006/08/09 00:33:34	1.20.2.1
@@ -119,13 +119,15 @@ main(int argc, char **argv)
 
 	if (fflag) {			/* Follow "protocol", send data. */
 		response();
-		setuid(userid);
+		if (setuid(userid) < 0)
+			errx(1, "setuid failed");
 		source(argc, argv);
 		exit(errs);
 	}
 
 	if (tflag) {			/* Receive data. */
-		setuid(userid);
+		if (setuid(userid) < 0)
+			errx(1, "setuid failed");
 		sink(argc, argv);
 		exit(errs);
 	}
@@ -221,7 +223,8 @@ toremote(char *targ, int argc, char **ar
 				if (response() < 0)
 					exit(1);
 				free(bp);
-				setuid(userid);
+				if (setuid(userid) < 0)
+					errx(1, "setuid failed");
 			}
 			source(1, argv+i);
 		}
@@ -270,7 +273,8 @@ tolocal(int argc, char **argv)
 		}
 		free(bp);
 		sink(1, argv + argc - 1);
-		seteuid(0);
+		if (seteuid(0) < 0)
+			exit(1);
 		close(remin);
 		remin = remout = -1;
 	}
Index: appl/rcp/util.c
===================================================================
RCS file: /afs/pdc.kth.se/src/packages/kth-krb/SourceRepository/heimdal/appl/rcp/util.c,v
retrieving revision 1.7
retrieving revision 1.7.2.1
diff -u -p -r1.7 -r1.7.2.1
--- heimdal/appl/rcp/util.c	2005/04/18 07:52:58	1.7
+++ util.c	2006/08/09 00:33:34	1.7.2.1
@@ -112,7 +112,8 @@ susystem(s, userid)
 		return (127);
 
 	case 0:
-		(void)setuid(userid);
+		if (setuid(userid) < 0)
+			_exit(127);
 		execl(_PATH_BSHELL, "sh", "-c", s, NULL);
 		_exit(127);
 	}
Index: lib/roken/iruserok.c
===================================================================
RCS file: /afs/pdc.kth.se/src/packages/kth-krb/SourceRepository/lib/roken/iruserok.c,v
retrieving revision 1.25
retrieving revision 1.25.2.1
diff -u -p -r1.25 -r1.25.2.1
--- SourceRepository/lib/roken/iruserok.c	2005/04/12 11:28:54	1.25
+++ iruserok.c	2006/08/09 00:33:34	1.25.2.1
@@ -250,7 +250,8 @@ again:
 		 * are protected read/write owner only.
 		 */
 		uid = geteuid();
-		seteuid(pwd->pw_uid);
+		if (seteuid(pwd->pw_uid) < 0)
+			return (-1);
 		hostf = fopen(pbuf, "r");
 		seteuid(uid);
 
