From d381ea14052505589ee8fc292dff9879dbd16311 Mon Sep 17 00:00:00 2001
From: Jesper Schmitz Mouridsen <jesper@schmitz.computer>
Date: Tue, 17 Oct 2017 21:47:25 +0200
Subject: [PATCH] https://bugs.kde.org/show_bug.cgi?id=378684 Initial patch
 against v.07 including webenigne.

---
 CMakeLists.txt                             | 16 ++++-
 src/Gui/EmbeddedWebView.cpp                | 97 ++++++++++++++++++++++++------
 src/Gui/EmbeddedWebView.h                  | 45 +++++++++-----
 src/Gui/FindBar.cpp                        | 55 +++++++++--------
 src/Gui/FindBar.h                          |  6 +-
 src/Gui/FindBarMixin.cpp                   |  2 +-
 src/Gui/FindBarMixin.h                     |  4 +-
 src/Gui/MessageHeadersWidget.cpp           |  5 +-
 src/Gui/MessageHeadersWidget.h             |  7 +--
 src/Gui/MessageSourceWidget.cpp            |  4 +-
 src/Gui/MessageSourceWidget.h              |  4 +-
 src/Gui/MessageView.cpp                    | 13 ++--
 src/Gui/MessageView.h                      |  8 +--
 src/Gui/SimplePartWidget.cpp               | 73 ++++++++++++----------
 src/Gui/SimplePartWidget.h                 |  5 +-
 src/Gui/UserAgentWebPage.cpp               |  2 +-
 src/Gui/UserAgentWebPage.h                 |  5 +-
 src/Imap/Network/MsgPartNetAccessManager.h |  5 +-
 18 files changed, 229 insertions(+), 127 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 19fd9063..d47ddbf0 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -77,7 +77,11 @@ find_package(Qt5Core 5.2 REQUIRED)
 find_package(Qt5Gui REQUIRED)
 find_package(Qt5Network REQUIRED)
 find_package(Qt5Sql REQUIRED)
-find_package(Qt5WebKitWidgets REQUIRED)
+find_package(Qt5WebKitWidgets)
+find_package(Qt5WebEngineWidgets)
+if (NOT Qt5WebKitWidgets_FOUND AND NOT Qt5WebEngineWidgets_FOUND)
+    MESSAGE(FATAL_ERROR,"You need Qt5WebKitWidgets or Qt5WebEngineWidgets")
+endif()
 find_package(Qt5Widgets REQUIRED)
 find_package(Qt5LinguistTools)
 find_package(Qt5Svg REQUIRED)
@@ -566,6 +570,14 @@ add_dependencies(AppVersion version)
 target_link_libraries(AppVersion Common)
 qt5_use_modules(AppVersion Core)
 
+if(Qt5WebEngineWidgets_FOUND)
+    message(STATUS,"Using Qt5WebEngineWidgets ${Qt5WebEngineWidgets_LIBARARIRES} ${Qt5WebEngineWidgets_INCLUDES}")
+    #target_link_libraries(TARGET )
+    include_directories(Qt5WebEngineWidgets_INCLUDE_DIRS)
+
+endif()
+
+
 if(WITH_SHARED_PLUGINS)
     add_library(Plugins SHARED ${libPlugins_SOURCES})
     set_property(TARGET Plugins APPEND PROPERTY COMPILE_DEFINITIONS BUILDING_LIBTROJITA_PLUGINS)
@@ -707,7 +719,7 @@ if(WITH_DESKTOP)
     # On other platforms WIN32 flag is ignored
     add_executable(trojita WIN32 ${trojita_desktop_SOURCES} ${trojita_QM})
     set_property(TARGET trojita APPEND PROPERTY COMPILE_DEFINITIONS QT_NO_CAST_FROM_ASCII QT_NO_CAST_TO_ASCII)
-    target_link_libraries(trojita AppVersion Common UiUtils DesktopGui ${STATIC_PLUGINS})
+    target_link_libraries(trojita AppVersion Common UiUtils DesktopGui ${STATIC_PLUGINS} ${Qt5WebEngineWidgets_LIBRARIES})
     qt5_use_modules(DesktopGui Network WebKitWidgets)
     qt5_use_modules(trojita Widgets Network)
 endif()
diff --git a/src/Gui/EmbeddedWebView.cpp b/src/Gui/EmbeddedWebView.cpp
index 66350a9c..e3e952d4 100644
--- a/src/Gui/EmbeddedWebView.cpp
+++ b/src/Gui/EmbeddedWebView.cpp
@@ -37,9 +37,9 @@
 #include <QTimer>
 #include <QWebFrame>
 #include <QWebHistory>
-
 #include <QDebug>
-
+using namespace Imap::Network;
+using namespace Gui;
 namespace {
 
 /** @short RAII pattern for counter manipulation */
@@ -58,22 +58,65 @@ class Incrementor {
 };
 
 }
+MyMuaPage::MyMuaPage(QWidget *parent)
+    : QWebEnginePage(parent)
+{
+
+
+}
+bool MyMuaPage::acceptNavigationRequest(const QUrl &url, NavigationType type, bool isMainFrame) {
+
+
+    if(url.scheme() == QStringLiteral("trojita-imap")) {
+        return false;
+    } else if(url.scheme() == QStringLiteral("http")) {
+        QDesktopServices::openUrl(url);
+        return false;
+    }
+    else if(url.scheme() == QStringLiteral("https")) {
+        QDesktopServices::openUrl(url);
+        return false;
+    }
+    return true;
+}
 
 namespace Gui
 {
-
-EmbeddedWebView::EmbeddedWebView(QWidget *parent, QNetworkAccessManager *networkManager)
-    : QWebView(parent)
-    , m_scrollParent(nullptr)
+EmbeddedWebView::EmbeddedWebView(QWidget *parent)
+    : QWebEngineView(parent)
+    /*, m_scrollParent(nullptr)
     , m_resizeInProgress(0)
     , m_staticWidth(0)
     , m_colorScheme(ColorScheme::System)
+        */
 {
     // set to expanding, ie. "freely" - this is important so the widget will attempt to shrink below the sizehint!
     setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
     setFocusPolicy(Qt::StrongFocus); // not by the wheel
-    setPage(new ErrorCheckingPage(this));
-    page()->setNetworkAccessManager(networkManager);
+
+    setMinimumSize(1920,1080);
+    setPage(new MyMuaPage(this));
+    std::string tiScheme = "trojita-imap";
+
+
+
+
+
+    //    std::cout <<  res->readAll().toStdString();
+
+
+      //  return false;
+
+    //QDesktopServices::openUrl(url);
+    // page()->setNetworkAccessManager(networkManager);
+}
+void EmbeddedWebView::setManager(MsgPartNetAccessManager *netAccess) {
+    m_netAccess = netAccess;
+
+}
+
+/*
+
 
     QWebSettings *s = settings();
     s->setAttribute(QWebSettings::JavascriptEnabled, false);
@@ -88,7 +131,7 @@ EmbeddedWebView::EmbeddedWebView(QWidget *parent, QNetworkAccessManager *network
 
     page()->setLinkDelegationPolicy(QWebPage::DelegateAllLinks);
     connect(this, &QWebView::linkClicked, this, &EmbeddedWebView::slotLinkClicked);
-    connect(this, &QWebView::loadFinished, this, &EmbeddedWebView::handlePageLoadFinished);
+
     connect(page()->mainFrame(), &QWebFrame::contentsSizeChanged, this, &EmbeddedWebView::handlePageLoadFinished);
 
     // Scrolling is implemented on upper layers
@@ -112,9 +155,9 @@ EmbeddedWebView::EmbeddedWebView(QWidget *parent, QNetworkAccessManager *network
     setContextMenuPolicy(Qt::NoContextMenu);
     findScrollParent();
 
-    addCustomStylesheet(QString());
-}
-
+    addCustomStylesheet(QString());*/
+//}
+/*
 void EmbeddedWebView::constrainSize()
 {
     Incrementor dummy(&m_resizeInProgress);
@@ -143,6 +186,7 @@ void EmbeddedWebView::constrainSize()
     }
     // now the page has an idea about it's demanded size
     const QSize bestSize = page()->mainFrame()->contentsSize();
+        fprinf(stderr,"%d",bestSize.width);
     // set the viewport to that size! - Otherwise it'd still be our "suggestion"
     page()->setViewportSize(bestSize);
     // fix the widgets size so the layout doesn't have much choice
@@ -164,19 +208,31 @@ void EmbeddedWebView::slotLinkClicked(const QUrl &url)
         QDesktopServices::openUrl(betterUrl);
     }
 }
-
+*/
+MsgPartNetAccessManager* EmbeddedWebView::getManager()  {
+    return m_netAccess;
+}
 void EmbeddedWebView::handlePageLoadFinished()
 {
-    constrainSize();
 
+    //constrainSize();
     // We've already set in in our constructor, but apparently it isn't enough (Qt 4.8.0 on X11).
     // Let's do it again here, it works.
-    Qt::ScrollBarPolicy policy = isWindow() ? Qt::ScrollBarAsNeeded : Qt::ScrollBarAlwaysOff;
-    page()->mainFrame()->setScrollBarPolicy(Qt::Horizontal, policy);
-    page()->mainFrame()->setScrollBarPolicy(Qt::Vertical, policy);
-    page()->setLinkDelegationPolicy(QWebPage::DelegateAllLinks);
+//    Qt::ScrollBarPolicy policy = isWindow() ? Qt::ScrollBarAsNeeded : Qt::ScrollBarAlwaysOff;
+    //page()->setLinkDelegationPolicy(QWebPage::DelegateAllLinks);
 }
+void EmbeddedWebView::handleReplyFinished(QNetworkReply *reply)
+{
 
+
+
+    //constrainSize();
+    // We've already set in in our constructor, but apparently it isn't enough (Qt 4.8.0 on X11).
+    // Let's do it again here, it works.
+//    Qt::ScrollBarPolicy policy = isWindow() ? Qt::ScrollBarAsNeeded : Qt::ScrollBarAlwaysOff;
+    //page()->setLifalsenkDelegationPolicy(QWebPage::DelegateAllLinks);
+}
+/*
 void EmbeddedWebView::changeEvent(QEvent *e)
 {
     QWebView::changeEvent(e);
@@ -394,6 +450,9 @@ void EmbeddedWebView::addCustomStylesheet(const QString &css)
     const QString urlPrefix(QStringLiteral("data:text/css;charset=utf-8;base64,"));
     const QString myColors(QStringLiteral("body { background-color: %1; color: %2; }\n").arg(bgName, fgName));
     s->setUserStyleSheetUrl(QString::fromUtf8(urlPrefix.toUtf8() + (myColors + m_customCss).toUtf8().toBase64()));
-}
+}*/
+
+
+
 
 }
diff --git a/src/Gui/EmbeddedWebView.h b/src/Gui/EmbeddedWebView.h
index 9ac83d15..7a47da8e 100644
--- a/src/Gui/EmbeddedWebView.h
+++ b/src/Gui/EmbeddedWebView.h
@@ -21,10 +21,17 @@
 */
 #ifndef EMBEDDEDWEBVIEW_H
 #define EMBEDDEDWEBVIEW_H
-
+#include "../Imap/Network/MsgPartNetworkReply.h"
+#include "../Imap/Network/MsgPartNetAccessManager.h"
 #include <QWebPluginFactory>
-#include <QWebView>
-
+#include <QtWebKitWidgets/QtWebKitWidgets>
+#include <QtWebEngineWidgets/QWebEngineView>
+class MyMuaPage:public QWebEnginePage {
+    Q_OBJECT
+public:
+    MyMuaPage(QWidget *parent=nullptr);
+    bool acceptNavigationRequest(const QUrl &url, NavigationType type, bool isMainFrame);
+};
 namespace Gui
 {
 
@@ -43,7 +50,9 @@ namespace Gui
   @see Gui::MessageView
 
   */
-class EmbeddedWebView: public QWebView
+
+
+class EmbeddedWebView: public QWebEngineView
 {
     Q_OBJECT
 public:
@@ -56,14 +65,17 @@ class EmbeddedWebView: public QWebView
         BlackOnWhite,
     };
 
-    EmbeddedWebView(QWidget *parent, QNetworkAccessManager *networkManager);
-    QSize sizeHint() const;
+    EmbeddedWebView(QWidget *parent);
+   /* QSize sizeHint() const;
     QWidget *scrollParent() const;
     void setStaticWidth(int staticWidth);
     int staticWidth() const;
-    std::map<ColorScheme, QString> supportedColorSchemes() const;
-public slots:
-    void setColorScheme(const ColorScheme colorScheme);
+    std::map<ColorScheme, QString> supportedColorSchemes() const;*/
+    Imap::Network::MsgPartNetAccessManager* getManager();
+    void setManager(Imap::Network::MsgPartNetAccessManager *netAccess);
+//public slots:
+//    void setColorScheme(const ColorScheme colorScheme);
+/*
 protected:
     void changeEvent(QEvent *e);
     bool eventFilter(QObject *o, QEvent *e);
@@ -71,13 +83,16 @@ public slots:
     void mouseReleaseEvent(QMouseEvent *e);
     void showEvent(QShowEvent *se);
     void addCustomStylesheet(const QString &css);
-    void constrainSize();
+    void constrainSize();*/
 private:
-    void findScrollParent();
+    //void findScrollParent();
+    Imap::Network::MsgPartNetAccessManager *m_netAccess;
 private slots:
-    void autoScroll();
-    void slotLinkClicked(const QUrl &url);
+  //  void autoScroll();
+    //void slotLinkClicked(const QUrl &url);
+    void handleReplyFinished(QNetworkReply *reply);
     void handlePageLoadFinished();
+/*
 private:
     QWidget *m_scrollParent;
     int m_scrollParentPadding;
@@ -100,7 +115,9 @@ class ErrorCheckingPage: public QWebPage
     virtual bool extension(Extension extension, const ExtensionOption *option, ExtensionReturn *output);
     virtual bool supportsExtension(Extension extension) const;
 };
+*/
 
+};
 }
-
 #endif // EMBEDDEDWEBVIEW_H
+
diff --git a/src/Gui/FindBar.cpp b/src/Gui/FindBar.cpp
index a7c65d3f..1fc12435 100644
--- a/src/Gui/FindBar.cpp
+++ b/src/Gui/FindBar.cpp
@@ -203,17 +203,17 @@ void FindBar::find(FindBar::FindDirection dir)
     Q_ASSERT(m_associatedWebView);
 
     if (isHidden()) {
-        QPoint previous_position = m_associatedWebView->page()->currentFrame()->scrollPosition();
-        m_associatedWebView->page()->focusNextPrevChild(true);
-        m_associatedWebView->page()->currentFrame()->setScrollPosition(previous_position);
+       // QPoint previous_position = m_associatedWebView->page()->currentFrame()->scrollPosition();
+       // m_associatedWebView->page()->focusNextPrevChild(true);
+        //m_associatedWebView->page()->currentFrame()->setScrollPosition(previous_position);
         return;
     }
 
-    QWebPage::FindFlags options = QWebPage::FindWrapsAroundDocument;
+    QWebEnginePage::FindFlags options = QWebEnginePage::FindBackward;
     if (dir == Backward)
-        options |= QWebPage::FindBackward;
+        options |= QWebEnginePage::FindBackward;
     if (matchCase())
-        options |= QWebPage::FindCaseSensitively;
+        options |= QWebEnginePage::FindCaseSensitively;
 
     // HACK Because we're using the QWebView inside a QScrollArea container, the attempts
     // to scroll the QWebView itself have no direct effect.
@@ -224,49 +224,51 @@ void FindBar::find(FindBar::FindDirection dir)
 
     auto emb = qobject_cast<EmbeddedWebView *>(m_associatedWebView);
 
-    QAbstractScrollArea *container = emb ? static_cast<QAbstractScrollArea*>(emb->scrollParent()) : nullptr;
-    const QSize oldVpS = m_associatedWebView->page()->viewportSize();
+    QAbstractScrollArea *container = nullptr;
+   // const QSize oldVpS = m_associatedWebView->page()->viewportSize();
     const bool useResizeTrick = container ? !!container->verticalScrollBar() : false;
     // first shrink the page viewport
     if (useResizeTrick) {
         m_associatedWebView->setUpdatesEnabled(false); // don't let the user see the flicker we might produce
-        QSize newVpS = oldVpS.boundedTo(container->size());
-        m_associatedWebView->page()->setViewportSize(newVpS);
+        //QSize newVpS = oldVpS.boundedTo(container->size());
+        //m_associatedWebView->page()->setViewportSize(newVpS);
     }
 
     // now perform the search (pot. in the shrinked viewport)
-    bool found = m_associatedWebView->page()->findText(_lastStringSearched, options);
-    notifyMatch(found);
+    m_associatedWebView->page()->findText(_lastStringSearched, options);
+    notifyMatch(true);
 
     // scroll and reset the page viewport if necessary
     if (useResizeTrick) {
         Q_ASSERT(container->verticalScrollBar());
         // the page has now a usable scroll position ...
-        int scrollPosition = m_associatedWebView->page()->currentFrame()->scrollPosition().y();
+        //int scrollPosition = m_associatedWebView->page()->currentFrame()->scrollPosition().y();
         // ... which needs to be extended by the pages offset (usually the header widget)
         // NOTICE: QWidget::mapTo() fails as the viewport child position can be negative, so we run ourself
         QWidget *runner = m_associatedWebView;
-        while (runner->parentWidget() != container->viewport()) {
+        /*while (runner->parentWidget() != container->viewport()) {
             scrollPosition += runner->y();
             runner = runner->parentWidget();
-        }
+        }*/
         // reset viewport to original size ...
-        m_associatedWebView->page()->setViewportSize(oldVpS);
+       // m_associatedWebView->page()->setViewportSize(oldVpS);
         // ... let the user see the change ...
         m_associatedWebView->setUpdatesEnabled(true);
 
         // ... and finally scroll to the desired position
-        if (found)
-            container->verticalScrollBar()->setValue(scrollPosition);
-    }
+     //   if (found)
+        //    container->verticalScrollBar()->setValue(scrollPosition);
+    //}
 
-    if (!found) {
+    /*if (!found) {
         QPoint previous_position = m_associatedWebView->page()->currentFrame()->scrollPosition();
         m_associatedWebView->page()->focusNextPrevChild(true);
         m_associatedWebView->page()->currentFrame()->setScrollPosition(previous_position);
+        */
     }
 }
 
+
 void FindBar::findNext()
 {
     find(FindBar::Forward);
@@ -282,7 +284,7 @@ void FindBar::matchCaseUpdate()
 {
     Q_ASSERT(m_associatedWebView);
 
-    m_associatedWebView->page()->findText(_lastStringSearched, QWebPage::FindBackward);
+    m_associatedWebView->page()->findText(_lastStringSearched, QWebEnginePage::FindBackward);
     findNext();
     updateHighlight();
 }
@@ -292,19 +294,20 @@ void FindBar::updateHighlight()
 {
     Q_ASSERT(m_associatedWebView);
 
-    QWebPage::FindFlags options = QWebPage::HighlightAllOccurrences;
 
-    m_associatedWebView->page()->findText(QString(), options); //Clear an existing highlight
+
+    m_associatedWebView->page()->findText(QString(), QWebEnginePage::FindCaseSensitively); //Clear an existing highlight
 
     if (!isHidden() && highlightAllState())
     {
+        QWebEnginePage::FindFlags options;
         if (matchCase())
-            options |= QWebPage::FindCaseSensitively;
+            options  |= QWebEnginePage::FindCaseSensitively;
         m_associatedWebView->page()->findText(_lastStringSearched, options);
     }
 }
 
-void FindBar::setAssociatedWebView(QWebView *webView)
+void FindBar::setAssociatedWebView(QWebEngineView *webView)
 {
     if (m_associatedWebView)
         disconnect(m_associatedWebView, nullptr, this, nullptr);
@@ -314,7 +317,7 @@ void FindBar::setAssociatedWebView(QWebView *webView)
     if (m_associatedWebView) {
         // highlighting is fancy, but terribly expensive - disable by default for fat messages
         if (auto emb = qobject_cast<EmbeddedWebView*>(m_associatedWebView)) {
-            m_highlightAll->setChecked(!emb->staticWidth());
+         //   m_highlightAll->setChecked(!emb->staticWidth());
         }
         // Automatically hide this FindBar widget when the underlying webview goes away
         connect(m_associatedWebView.data(), &QObject::destroyed,
diff --git a/src/Gui/FindBar.h b/src/Gui/FindBar.h
index e138c8a7..8f7755c7 100644
--- a/src/Gui/FindBar.h
+++ b/src/Gui/FindBar.h
@@ -30,7 +30,7 @@
 
 #include <QPointer>
 #include <QWidget>
-
+#include <QtWebEngineWidgets/QWebEngineView>
 class QCheckBox;
 class QLineEdit;
 class QString;
@@ -51,7 +51,7 @@ class FindBar : public QWidget
     bool highlightAllState() const;
 
     void setVisible(bool visible);
-    void setAssociatedWebView(QWebView *webView);
+    void setAssociatedWebView(QWebEngineView *webView);
 
 protected:
     void keyPressEvent(QKeyEvent *event);
@@ -76,7 +76,7 @@ private slots:
     QCheckBox *m_highlightAll;
 
     QString _lastStringSearched;
-    QPointer<QWebView> m_associatedWebView;
+    QPointer<QWebEngineView> m_associatedWebView;
 };
 
 }
diff --git a/src/Gui/FindBarMixin.cpp b/src/Gui/FindBarMixin.cpp
index 136c2b24..fe5b99ee 100644
--- a/src/Gui/FindBarMixin.cpp
+++ b/src/Gui/FindBarMixin.cpp
@@ -30,7 +30,7 @@ FindBarMixin::FindBarMixin(QWidget *parent)
 {
 }
 
-void FindBarMixin::searchRequestedBy(QWebView *webView)
+void FindBarMixin::searchRequestedBy(QWebEngineView *webView)
 {
     if (m_findBar->isVisible() || !webView) {
         // NOTICE: hide must go before resetting the AssociatedWebView
diff --git a/src/Gui/FindBarMixin.h b/src/Gui/FindBarMixin.h
index 87556397..bf0eaf5c 100644
--- a/src/Gui/FindBarMixin.h
+++ b/src/Gui/FindBarMixin.h
@@ -24,7 +24,7 @@
 
 #include <QWidget>
 
-class QWebView;
+class QWebEngineView;
 
 namespace Gui {
 
@@ -37,7 +37,7 @@ class FindBarMixin
     FindBarMixin(QWidget *parent);
 
 protected:
-    void searchRequestedBy(QWebView *webView);
+    void searchRequestedBy(QWebEngineView *webView);
 
     FindBar *m_findBar;
 };
diff --git a/src/Gui/MessageHeadersWidget.cpp b/src/Gui/MessageHeadersWidget.cpp
index ddb0e411..d5c5db5b 100644
--- a/src/Gui/MessageHeadersWidget.cpp
+++ b/src/Gui/MessageHeadersWidget.cpp
@@ -31,12 +31,13 @@
 #include "Imap/Network/MsgPartNetAccessManager.h"
 #include "UiUtils/IconLoader.h"
 
+
 namespace Gui {
 
 MessageHeadersWidget::MessageHeadersWidget(QWidget *parent, const QModelIndex &messageIndex)
     : QWidget(parent)
     , FindBarMixin(this)
-    , m_widget(new QWebView(this))
+    , m_widget(new EmbeddedWebView(this))
 
 {
     setWindowIcon(UiUtils::loadIcon(QStringLiteral("text-x-hex")));
@@ -49,7 +50,7 @@ MessageHeadersWidget::MessageHeadersWidget(QWidget *parent, const QModelIndex &m
 
     auto netAccess = new Imap::Network::MsgPartNetAccessManager(this);
     netAccess->setModelMessage(messageIndex);
-    m_widget->page()->setNetworkAccessManager(netAccess);
+
     m_widget->setUrl(QUrl(QStringLiteral("trojita-imap://msg/HEADER")));
 
     auto find = new QAction(UiUtils::loadIcon(QStringLiteral("edit-find")), tr("Search..."), this);
diff --git a/src/Gui/MessageHeadersWidget.h b/src/Gui/MessageHeadersWidget.h
index aef37d69..a5659d97 100644
--- a/src/Gui/MessageHeadersWidget.h
+++ b/src/Gui/MessageHeadersWidget.h
@@ -25,10 +25,9 @@
 
 #include <QWidget>
 #include "Gui/FindBarMixin.h"
-
+#include "EmbeddedWebView.h"
 class QModelIndex;
-class QWebView;
-
+class QWebEngineView;
 namespace Gui {
 
 class SimplePartWidget;
@@ -40,7 +39,7 @@ class MessageHeadersWidget : public QWidget, private FindBarMixin
     MessageHeadersWidget(QWidget *parent, const QModelIndex& messageIndex);
 
 private:
-    QWebView *m_widget;
+    EmbeddedWebView *m_widget;
 };
 
 }
diff --git a/src/Gui/MessageSourceWidget.cpp b/src/Gui/MessageSourceWidget.cpp
index 23295e84..02a045d9 100644
--- a/src/Gui/MessageSourceWidget.cpp
+++ b/src/Gui/MessageSourceWidget.cpp
@@ -39,11 +39,11 @@ MessageSourceWidget::MessageSourceWidget(QWidget *parent, const QModelIndex &mes
     , FindBarMixin(this)
     , m_combiner(nullptr)
     , m_loadingSpinner(nullptr)
-    , m_widget(new QWebView(this))
+    , m_widget(new QWebEngineView(this))
 {
     setWindowIcon(UiUtils::loadIcon(QStringLiteral("text-x-hex")));
     Q_ASSERT(messageIndex.isValid());
-    m_widget->page()->setNetworkAccessManager(0);
+    //m_widget->page()->setNetworkAccessManager(0);
 
     m_loadingSpinner = new Spinner(this);
     m_loadingSpinner->setText(tr("Fetching\nMessage"));
diff --git a/src/Gui/MessageSourceWidget.h b/src/Gui/MessageSourceWidget.h
index b1639c49..4b4f1360 100644
--- a/src/Gui/MessageSourceWidget.h
+++ b/src/Gui/MessageSourceWidget.h
@@ -28,7 +28,7 @@
 #include "Gui/FindBarMixin.h"
 
 class QModelIndex;
-class QWebView;
+class QWebEngineView;
 
 namespace Imap
 {
@@ -56,7 +56,7 @@ private slots:
 private:
     Imap::Mailbox::FullMessageCombiner *m_combiner;
     Spinner *m_loadingSpinner;
-    QWebView *m_widget;
+    QWebEngineView *m_widget;
 };
 
 }
diff --git a/src/Gui/MessageView.cpp b/src/Gui/MessageView.cpp
index d9929403..314acfee 100644
--- a/src/Gui/MessageView.cpp
+++ b/src/Gui/MessageView.cpp
@@ -88,8 +88,8 @@ MessageView::MessageView(QWidget *parent, QSettings *settings, Plugins::PluginMa
 
 
     // The homepage widget -- our poor man's splashscreen
-    m_homePage = new EmbeddedWebView(this, new QNetworkAccessManager(this));
-    m_homePage->setFixedSize(450,300);
+    m_homePage = new EmbeddedWebView(this);
+    m_homePage->setFixedSize(850,600);
     CALL_LATER_NOARG(m_homePage, handlePageLoadFinished);
     m_homePage->setPage(new UserAgentWebPage(m_homePage));
     m_homePage->installEventFilter(this);
@@ -471,10 +471,9 @@ void MessageView::partContextMenuRequested(const QPoint &point)
     }
 }
 
-void MessageView::partLinkHovered(const QString &link, const QString &title, const QString &textContent)
+void MessageView::partLinkHovered(const QString &link)
 {
-    Q_UNUSED(title);
-    Q_UNUSED(textContent);
+
     emit linkHovered(link);
 }
 
@@ -490,7 +489,7 @@ QModelIndex MessageView::currentMessage() const
 
 void MessageView::onWebViewLoadStarted()
 {
-    QWebView *wv = qobject_cast<QWebView*>(sender());
+    QWebEngineView *wv = qobject_cast<QWebEngineView*>(sender());
     Q_ASSERT(wv);
 
     if (m_netWatcher && m_netWatcher->effectiveNetworkPolicy() != Imap::Mailbox::NETWORK_OFFLINE) {
@@ -501,7 +500,7 @@ void MessageView::onWebViewLoadStarted()
 
 void MessageView::onWebViewLoadFinished()
 {
-    QWebView *wv = qobject_cast<QWebView*>(sender());
+    QWebEngineView *wv = qobject_cast<QWebEngineView*>(sender());
     Q_ASSERT(wv);
     m_loadingItems.remove(wv);
     if (m_loadingItems.isEmpty())
diff --git a/src/Gui/MessageView.h b/src/Gui/MessageView.h
index 2cc20282..86d91d9b 100644
--- a/src/Gui/MessageView.h
+++ b/src/Gui/MessageView.h
@@ -37,7 +37,7 @@ class QSettings;
 class QStackedLayout;
 class QTimer;
 class QUrl;
-class QWebView;
+class QWebEngineView;
 
 namespace Cryptography {
 class MessageModel;
@@ -104,7 +104,7 @@ private slots:
     void newLabelAction(const QString &tag);
     void deleteLabelAction(const QString &tag);
     void partContextMenuRequested(const QPoint &point);
-    void partLinkHovered(const QString &link, const QString &title, const QString &textContent);
+    void partLinkHovered(const QString &link);
     void triggerSearchDialog();
     void onWebViewLoadStarted();
     void onWebViewLoadFinished();
@@ -124,7 +124,7 @@ private slots:
     void clearWaitingConns();
 
     QStackedLayout *m_stack;
-    QWebView *m_homePage;
+    QWebEngineView *m_homePage;
 
     QWidget *m_messageWidget;
     QBoxLayout *m_msgLayout;
@@ -143,7 +143,7 @@ private slots:
     Spinner *m_loadingSpinner;
     QSettings *m_settings;
     Plugins::PluginManager *m_pluginManager;
-    QSet<QWebView*> m_loadingItems;
+    QSet<QWebEngineView*> m_loadingItems;
 
     std::vector<QMetaObject::Connection> m_waitingMessageConns;
 
diff --git a/src/Gui/SimplePartWidget.cpp b/src/Gui/SimplePartWidget.cpp
index e9f85921..42b59788 100644
--- a/src/Gui/SimplePartWidget.cpp
+++ b/src/Gui/SimplePartWidget.cpp
@@ -46,31 +46,38 @@ namespace Gui
 
 SimplePartWidget::SimplePartWidget(QWidget *parent, Imap::Network::MsgPartNetAccessManager *manager,
                                    const QModelIndex &partIndex, MessageView *messageView):
-    EmbeddedWebView(parent, manager), m_partIndex(partIndex), m_messageView(messageView), m_netAccessManager(manager)
+    EmbeddedWebView(parent), m_partIndex(partIndex), m_messageView(messageView), m_netAccessManager(manager)
 {
     Q_ASSERT(partIndex.isValid());
 
     if (m_messageView) {
-        connect(this, &QWebView::loadStarted, m_messageView, &MessageView::onWebViewLoadStarted);
-        connect(this, &QWebView::loadFinished, m_messageView, &MessageView::onWebViewLoadFinished);
+        connect(this, &QWebEngineView::loadStarted, m_messageView, &MessageView::onWebViewLoadStarted);
+        connect(this, &QWebEngineView::loadFinished, m_messageView, &MessageView::onWebViewLoadFinished);
     }
 
     QUrl url;
     url.setScheme(QStringLiteral("trojita-imap"));
     url.setHost(QStringLiteral("msg"));
     url.setPath(partIndex.data(Imap::Mailbox::RolePartPathToPart).toString());
+
+
     if (partIndex.data(Imap::Mailbox::RolePartMimeType).toString() == QLatin1String("text/plain")) {
-        if (partIndex.data(Imap::Mailbox::RolePartOctets).toULongLong() < 100 * 1024) {
-            connect(this, &QWebView::loadFinished, this, &SimplePartWidget::slotMarkupPlainText);
+           if (partIndex.data(Imap::Mailbox::RolePartOctets).toULongLong() < 100 * 1024) {
+
+            connect(manager, &QNetworkAccessManager::finished, this, &SimplePartWidget::slotMarkupPlainText);
         } else {
-            QFont font(QFontDatabase::systemFont(QFontDatabase::FixedFont));
-            setStaticWidth(QFontMetrics(font).maxWidth()*90);
-            addCustomStylesheet(QStringLiteral("pre{word-wrap:normal !important;white-space:pre !important;}"));
-            QWebSettings *s = settings();
-            s->setFontFamily(QWebSettings::StandardFont, font.family());
+
         }
+    } else if (partIndex.data(Imap::Mailbox::RolePartMimeType).toString() == QLatin1String("text/html")) {
+        connect(manager, &QNetworkAccessManager::finished, this, [=] { page()->setHtml(partIndex.data(Imap::Mailbox::RolePartData).toString()); } );
+                   QFont font(QFontDatabase::systemFont(QFontDatabase::FixedFont));
+        //setStaticWidth(QFontMetrics(font).maxWidth()*90);
+        //addCustomStylesheet(QStringLiteral("pre{word-wrap:normal !important;white-space:pre !important;}"));
+        QWebEngineSettings *s = settings();
+        s->setFontFamily(QWebEngineSettings::StandardFont, font.family());
+
     }
-    load(url);
+    manager->get(*(new QNetworkRequest(url)));
 
     m_savePart = new QAction(UiUtils::loadIcon(QStringLiteral("document-save")), tr("Save this message part..."), this);
     connect(m_savePart, &QAction::triggered, this, &SimplePartWidget::slotDownloadPart);
@@ -94,9 +101,9 @@ SimplePartWidget::SimplePartWidget(QWidget *parent, Imap::Network::MsgPartNetAcc
         connect(this, &SimplePartWidget::searchDialogRequested, m_messageView, &MessageView::triggerSearchDialog);
         // The targets expect the sender() of the signal to be a SimplePartWidget, not a QWebPage,
         // which means we have to do this indirection
-        connect(page(), &QWebPage::linkHovered, this, &SimplePartWidget::linkHovered);
+        connect(page(), &QWebEnginePage::linkHovered, this, &SimplePartWidget::linkHovered);
         connect(this, &SimplePartWidget::linkHovered, m_messageView, &MessageView::partLinkHovered);
-        connect(page(), &QWebPage::downloadRequested, this, &SimplePartWidget::slotDownloadImage);
+        //connect(page(), &QWebEnginePage::downloadRequested, this, &SimplePartWidget::slotDownloadImage);
 
         installEventFilter(m_messageView);
     }
@@ -105,7 +112,7 @@ SimplePartWidget::SimplePartWidget(QWidget *parent, Imap::Network::MsgPartNetAcc
 void SimplePartWidget::slotMarkupPlainText()
 {
     // NOTICE "single shot", we get a recursion otherwise!
-    disconnect(this, &QWebView::loadFinished, this, &SimplePartWidget::slotMarkupPlainText);
+    disconnect(this, &QWebEngineView::loadFinished, this, &SimplePartWidget::slotMarkupPlainText);
 
     // If there's no data, don't try to "fix it up"
     if (!m_partIndex.isValid() || !m_partIndex.data(Imap::Mailbox::RoleIsFetched).toBool())
@@ -114,7 +121,7 @@ void SimplePartWidget::slotMarkupPlainText()
     QPalette palette = QApplication::palette();
 
     // and finally set the marked up page.
-    page()->mainFrame()->setHtml(UiUtils::htmlizedTextPart(m_partIndex, QFontDatabase::systemFont(QFontDatabase::FixedFont),
+    page()->setHtml(UiUtils::htmlizedTextPart(m_partIndex, QFontDatabase::systemFont(QFontDatabase::FixedFont),
                                                            palette.base().color(), palette.text().color(),
                                                            palette.link().color(), palette.linkVisited().color()));
 }
@@ -130,8 +137,12 @@ void SimplePartWidget::slotFileNameRequested(QString *fileName)
 QString SimplePartWidget::quoteMe() const
 {
     QString selection = selectedText();
-    if (selection.isEmpty())
-        return page()->mainFrame()->toPlainText();
+    if (selection.isEmpty()) {
+        page()->toPlainText([&selection](QString sel) {
+            selection=sel;}
+        );
+        return selection;
+    }
     else
         return selection;
 }
@@ -146,58 +157,58 @@ const auto zoomConstant = 1.1;
 void SimplePartWidget::zoomIn()
 {
     setZoomFactor(zoomFactor() * zoomConstant);
-    constrainSize();
+    //constrainSize();
 }
 
 void SimplePartWidget::zoomOut()
 {
     setZoomFactor(zoomFactor() / zoomConstant);
-    constrainSize();
+    //constrainSize();
 }
 
 void SimplePartWidget::zoomOriginal()
 {
     setZoomFactor(1);
-    constrainSize();
+    //constrainSize();
 }
 
 void SimplePartWidget::buildContextMenu(const QPoint &point, QMenu &menu) const
 {
     menu.addAction(m_findAction);
-    auto a = pageAction(QWebPage::Copy);
+    auto a = pageAction(QWebEnginePage::Copy);
     a->setIcon(UiUtils::loadIcon(QStringLiteral("edit-copy")));
     menu.addAction(a);
-    a = pageAction(QWebPage::SelectAll);
+    a = pageAction(QWebEnginePage::SelectAll);
     a->setIcon(UiUtils::loadIcon(QStringLiteral("edit-select-all")));
     menu.addAction(a);
-    if (!page()->mainFrame()->hitTestContent(point).linkUrl().isEmpty()) {
+    /*if (!page()->hitTestContent(point).linkUrl().isEmpty()) {
         menu.addSeparator();
-        a = pageAction(QWebPage::CopyLinkToClipboard);
+        a = pageAction(QWebEnginePage::CopyLinkToClipboard);
         a->setIcon(UiUtils::loadIcon(QStringLiteral("edit-copy")));
         menu.addAction(a);
-    }
+    }*/
     menu.addSeparator();
     menu.addAction(m_savePart);
     menu.addAction(m_saveMessage);
-    if (!page()->mainFrame()->hitTestContent(point).imageUrl().isEmpty()) {
-        a = pageAction(QWebPage::DownloadImageToDisk);
+    /*if (!page()->hitTestContent(point).imageUrl().isEmpty()) {
+        a = pageAction(QWebEnginePage::DownloadImageToDisk);
         a->setIcon(UiUtils::loadIcon(QStringLiteral("download")));
         menu.addAction(a);
-    }
+    }*/
     menu.addSeparator();
     QMenu *colorSchemeMenu = menu.addMenu(UiUtils::loadIcon(QStringLiteral("colorneg")), tr("Color scheme"));
     QActionGroup *ag = new QActionGroup(colorSchemeMenu);
-    for (auto item: supportedColorSchemes()) {
+    /*for (auto item: supportedColorSchemes()) {
         QAction *a = colorSchemeMenu->addAction(item.second);
         connect(a, &QAction::triggered, this, [this, item](){
-           const_cast<SimplePartWidget*>(this)->setColorScheme(item.first);
+      //     const_cast<SimplePartWidget*>(this)->setColorScheme(item.first);
         });
         a->setCheckable(true);
         if (item.first == m_colorScheme) {
             a->setChecked(true);
         }
         a->setActionGroup(ag);
-    }
+    }*/
 
     auto zoomMenu = menu.addMenu(UiUtils::loadIcon(QStringLiteral("zoom")), tr("Zoom"));
     if (m_messageView) {
diff --git a/src/Gui/SimplePartWidget.h b/src/Gui/SimplePartWidget.h
index d04370c6..244f7efd 100644
--- a/src/Gui/SimplePartWidget.h
+++ b/src/Gui/SimplePartWidget.h
@@ -28,7 +28,8 @@
 #include <QPersistentModelIndex>
 #include "EmbeddedWebView.h"
 #include "UiUtils/PlainTextFormatter.h"
-
+#include <QtWebEngineWidgets/QWebEngineView>
+#include <QtWebEngineWidgets/QWebEngineSettings>
 class QModelIndex;
 class QNetworkReply;
 
@@ -71,7 +72,7 @@ private slots:
     void slotDownloadImage(const QNetworkRequest &req);
 protected:
 signals:
-    void linkHovered(const QString &link, const QString &title, const QString &textContent);
+    void linkHovered(const QString &link);
     void searchDialogRequested();
 private:
     QPersistentModelIndex m_partIndex;
diff --git a/src/Gui/UserAgentWebPage.cpp b/src/Gui/UserAgentWebPage.cpp
index 38a361a2..67655a7c 100644
--- a/src/Gui/UserAgentWebPage.cpp
+++ b/src/Gui/UserAgentWebPage.cpp
@@ -26,7 +26,7 @@
 namespace Gui
 {
 
-UserAgentWebPage::UserAgentWebPage(QWidget *parent): QWebPage(parent)
+UserAgentWebPage::UserAgentWebPage(QWidget *parent): QWebEnginePage(parent)
 {
 }
 
diff --git a/src/Gui/UserAgentWebPage.h b/src/Gui/UserAgentWebPage.h
index 169f02b7..93523dd0 100644
--- a/src/Gui/UserAgentWebPage.h
+++ b/src/Gui/UserAgentWebPage.h
@@ -22,14 +22,13 @@
 #ifndef GUI_USERAGENT_WEBPAGE_H
 #define GUI_USERAGENT_WEBPAGE_H
 
-#include <QWebPage>
-
+#include <QtWebEngineWidgets/QWebEngineView>
 namespace Gui
 {
 
 
 /** @short QWebPage which sends proper User-Agent headers */
-class UserAgentWebPage: public QWebPage
+class UserAgentWebPage: public QWebEnginePage
 {
     Q_OBJECT
 public:
diff --git a/src/Imap/Network/MsgPartNetAccessManager.h b/src/Imap/Network/MsgPartNetAccessManager.h
index f4140198..508836dd 100644
--- a/src/Imap/Network/MsgPartNetAccessManager.h
+++ b/src/Imap/Network/MsgPartNetAccessManager.h
@@ -45,15 +45,16 @@ class MsgPartNetAccessManager : public QNetworkAccessManager
     QString translateToSupportedMimeType(const QString &originalMimeType) const;
     void registerMimeTypeTranslation(const QString &originalMimeType, const QString &translatedMimeType);
     Q_INVOKABLE void wrapQmlWebViewRequest(QObject *request, QObject *reply);
+    QPersistentModelIndex message;
 protected:
     virtual QNetworkReply *createRequest(Operation op, const QNetworkRequest &req, QIODevice *outgoingData=0);
 signals:
     void requestingExternal(const QUrl &url);
 public slots:
     void setExternalsEnabled(bool enabled);
-private:
-    QPersistentModelIndex message;
 
+
+private:
     bool externalsEnabled;
     QMap<QString, QString> m_mimeTypeFixups;
 
