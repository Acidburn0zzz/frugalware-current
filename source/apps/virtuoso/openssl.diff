--- virtuoso/libsrc/Wi/http.c	2010/03/03 22:55:07	1.71.2.32
+++ virtuoso/libsrc/Wi/http.c	2010/03/22 13:45:37	1.71.2.33
@@ -8027,13 +8027,13 @@
       SSL_CTX_set_client_CA_list (ssl_ctx, skCAList);
       skCAList = SSL_CTX_get_client_CA_list(ssl_ctx);
 
-      if (sk_num((STACK *) skCAList) == 0)
+      if (sk_X509_ALGOR_num(skCAList) == 0)
 	log_warning ("HTTPS Client authentication requested but no CA known for verification");
 
-      for (i = 0; i < sk_num((STACK *) skCAList); i++)
+      for (i = 0; i < sk_X509_ALGOR_num(skCAList); i++)
 	{
 	  char ca_buf[1024];
-	  X509_NAME *ca_name = (X509_NAME *) sk_value ((STACK *) skCAList, i);
+	  X509_NAME *ca_name = (X509_NAME *) sk_X509_ALGOR_value (skCAList, i);
 	  if (X509_NAME_oneline (ca_name, ca_buf, sizeof (ca_buf)))
 	    log_debug ("HTTPS Using X509 Client CA %s", ca_buf);
 	}
@@ -10149,13 +10149,13 @@
 
 	  SSL_CTX_set_client_CA_list (ssl_ctx, skCAList);
 	  skCAList = SSL_CTX_get_client_CA_list (ssl_ctx);
-	  if (sk_num((STACK *) skCAList) == 0)
+	  if (sk_X509_ALGOR_num(skCAList) == 0)
 	    log_warning ("HTTPS Client authentication requested but no CA known for verification");
 
-	  for (i = 0; i < sk_num((STACK *) skCAList); i++)
+	  for (i = 0; i < sk_X509_ALGOR_num(skCAList); i++)
 	    {
 	      char ca_buf[1024];
-	      X509_NAME *ca_name = (X509_NAME *) sk_value ((STACK *) skCAList, i);
+	      X509_NAME *ca_name = (X509_NAME *) sk_X509_ALGOR_value (skCAList, i);
               if (X509_NAME_oneline (ca_name, ca_buf, sizeof (ca_buf)))
 		log_debug ("HTTPS Using X509 Client CA %s", ca_buf);
 	    }
--- virtuoso/libsrc/Dk/Dkernel.c	2010/03/22 12:36:48	1.25.2.7
+++ virtuoso/libsrc/Dk/Dkernel.c	2010/03/22 13:45:37	1.25.2.8
@@ -4910,12 +4910,12 @@
       SSL_CTX_set_session_id_context (ssl_server_ctx, (unsigned char *) &session_id_context, sizeof session_id_context);
 
       skCAList = SSL_CTX_get_client_CA_list (ssl_server_ctx);
-      if (sk_num ((STACK *) skCAList) == 0)
+      if (sk_X509_ALGOR_num (skCAList) == 0)
 	log_warning ("ODBC X509 Client authentication requested but no CA known for verification");
-      for (i = 0; i < sk_num ((STACK *) skCAList); i++)
+      for (i = 0; i < sk_X509_ALGOR_num (skCAList); i++)
 	{
 	  char ca_buf[1024];
-	  X509_NAME *ca_name = (X509_NAME *) sk_value ((STACK *) skCAList, i);
+	  X509_NAME *ca_name = (X509_NAME *) sk_X509_ALGOR_value (skCAList, i);
 	  if (X509_NAME_oneline (ca_name, ca_buf, sizeof (ca_buf)))
 	    log_debug ("ODBC Server Using X509 Client CA %s", ca_buf);
 	}
@@ -5080,7 +5080,7 @@
 
   if (ca && ca[0] != 0)
     {
-      sk_pop_free ((STACK *) ca_list, (void (*)(void *)) X509_free);
+      sk_X509_ALGOR_pop_free (ca_list, (void (*)(void *)) X509_free);
       ca_list = NULL;
       ca_list = PEM_load_certs (ca, passwd);
     }
@@ -5089,30 +5089,30 @@
     {
       X509_free (cert);
       EVP_PKEY_free (pkey);
-      sk_pop_free ((STACK *) ca_list, (void (*)(void *)) X509_free);
+      sk_X509_ALGOR_pop_free (ca_list, (void (*)(void *)) X509_free);
       return 0;
     }
   EVP_PKEY_free (pkey);
   if (!SSL_use_certificate (ssl, cert))
     {
       X509_free (cert);
-      sk_pop_free ((STACK *) ca_list, (void (*)(void *)) X509_free);
+      sk_X509_ALGOR_pop_free (ca_list, (void (*)(void *)) X509_free);
       return 0;
     }
   X509_free (cert);
 
   if (!SSL_check_private_key (ssl))
     {
-      sk_pop_free ((STACK *) ca_list, (void (*)(void *)) X509_free);
+      sk_X509_ALGOR_pop_free (ca_list, (void (*)(void *)) X509_free);
       return 0;
     }
-  for (i = 0; i < sk_num ((STACK *) ca_list); i++)
+  for (i = 0; i < sk_X509_ALGOR_num (ca_list); i++)
     {
-      X509 *ca = (X509 *) sk_value ((STACK *) ca_list, i);
+      X509 *ca = (X509 *) sk_X509_ALGOR_value (ca_list, i);
       SSL_add_client_CA (ssl, ca);
       X509_STORE_add_cert (SSL_CTX_get_cert_store (ssl_ctx), ca);
     }
-  sk_pop_free ((STACK *) ca_list, (void (*)(void *)) X509_free);
+  sk_X509_ALGOR_pop_free (ca_list, (void (*)(void *)) X509_free);
   return 1;
 }
 
