diff -Naur speech_tools.orig/include/EST_Chunk.h speech_tools/include/EST_Chunk.h
--- speech_tools.orig/include/EST_Chunk.h	2005-09-23 02:17:46.000000000 +0200
+++ speech_tools/include/EST_Chunk.h	2005-09-23 02:18:31.000000000 +0200
@@ -103,6 +103,8 @@
  /*                                                                      */
  /************************************************************************/
 
+class EST_ChunkPtr;
+
 class EST_Chunk  {
   public:
     typedef  unsigned short use_counter;
diff -Naur speech_tools.orig/include/EST_simplestats.h speech_tools/include/EST_simplestats.h
--- speech_tools.orig/include/EST_simplestats.h	2005-09-23 02:17:46.000000000 +0200
+++ speech_tools/include/EST_simplestats.h	2005-09-23 02:18:19.000000000 +0200
@@ -260,17 +260,17 @@
     /// 
     double frequency(const int i) const; 
     /// Used for iterating through members of the distribution
-    int item_start() const;
+    size_t item_start() const;
     /// Used for iterating through members of the distribution
-    int item_next(int idx) const;
+    size_t item_next(size_t idx) const;
     /// Used for iterating through members of the distribution
-    int item_end(int idx) const;
+    size_t item_end(size_t idx) const;
     /// During iteration ruturns name given index 
-    const EST_String &item_name(int idx) const;
+    const EST_String &item_name(size_t idx) const;
     /// During iteration ruturns name and frequency given index  
-    void item_freq(int idx,EST_String &s,double &freq) const;
+    void item_freq(size_t idx,EST_String &s,double &freq) const;
     /// During iteration ruturns name and probability given index
-    void item_prob(int idx,EST_String &s,double &prob) const;
+    void item_prob(size_t idx,EST_String &s,double &prob) const;
 
     /// Returns discrete vocabilary of distribution
     inline const EST_Discrete *const get_discrete() const { return discrete; };
diff -Naur speech_tools.orig/ling_class/item_feats.cc speech_tools/ling_class/item_feats.cc
--- speech_tools.orig/ling_class/item_feats.cc	2005-09-23 02:17:46.000000000 +0200
+++ speech_tools/ling_class/item_feats.cc	2005-09-23 02:18:19.000000000 +0200
@@ -78,7 +78,7 @@
    EST_String name = EST_FeatureFunctionContext::global->get_featfunc_name(func, found);
 
    if (!found)
-	EST_error("featfunc 0x%x has no name", (int)func);
+	EST_error("featfunc 0x%x has no name", func);
 
     return name;
 }
diff -Naur speech_tools.orig/siod/siod_est.cc speech_tools/siod/siod_est.cc
--- speech_tools.orig/siod/siod_est.cc	2005-09-23 02:17:46.000000000 +0200
+++ speech_tools/siod/siod_est.cc	2005-09-23 02:18:19.000000000 +0200
@@ -52,7 +52,7 @@
 #include "EST_Track.h"
 #include "EST_track_aux.h"
 
-Declare_TStringHash_Base(LISP,NIL,NIL)
+Declare_TStringHash_Base(LISP,(LISP)0,NIL)
 
 #if defined(INSTANTIATE_TEMPLATES)
 #include "../base_class/EST_THash.cc"
diff -Naur speech_tools.orig/stats/EST_DProbDist.cc speech_tools/stats/EST_DProbDist.cc
--- speech_tools.orig/stats/EST_DProbDist.cc	2005-09-23 02:17:46.000000000 +0200
+++ speech_tools/stats/EST_DProbDist.cc	2005-09-23 02:18:19.000000000 +0200
@@ -305,15 +305,15 @@
 }
 
 //  For iterating through members of a probability distribution
-int EST_DiscreteProbDistribution::item_start(void) const
+size_t EST_DiscreteProbDistribution::item_start(void) const
 {
     if (type == tprob_discrete)
 	return 0;
     else
-	return (int)scounts.list.head();
+	return (size_t)scounts.list.head();
 }
 
-int EST_DiscreteProbDistribution::item_end(int idx) const
+size_t EST_DiscreteProbDistribution::item_end(size_t idx) const
 {
     if (type == tprob_discrete)
 	return (idx >= icounts.length());
@@ -321,15 +321,15 @@
 	return ((EST_Litem *)idx == 0);
 }
 
-int EST_DiscreteProbDistribution::item_next(int idx) const
+size_t EST_DiscreteProbDistribution::item_next(size_t idx) const
 {
     if (type == tprob_discrete)
 	return ++idx;
     else
-	return (int)next((EST_Litem *)idx);
+	return (size_t)next((EST_Litem *)idx);
 }
 
-const EST_String &EST_DiscreteProbDistribution::item_name(int idx) const
+const EST_String &EST_DiscreteProbDistribution::item_name(size_t idx) const
 {
     if (type == tprob_discrete)
 	return discrete->name(idx);
@@ -337,7 +337,7 @@
 	return scounts.list((EST_Litem *)idx).k;
 }
 
-void EST_DiscreteProbDistribution::item_freq(int idx,EST_String &s,double &freq) const
+void EST_DiscreteProbDistribution::item_freq(size_t idx,EST_String &s,double &freq) const
 {
     if (type == tprob_discrete)
     {
@@ -351,7 +351,7 @@
     }
 }
 
-void EST_DiscreteProbDistribution::item_prob(int idx,EST_String &s,double &prob) const
+void EST_DiscreteProbDistribution::item_prob(size_t idx,EST_String &s,double &prob) const
 {
     if (type == tprob_discrete)
     {
@@ -368,7 +368,7 @@
 ostream & operator<<(ostream &s, const EST_DiscreteProbDistribution &pd)
 {
     // Output best with probabilities
-    int i;
+    size_t i;
     double prob;
     double sum=0;
     EST_String name;
