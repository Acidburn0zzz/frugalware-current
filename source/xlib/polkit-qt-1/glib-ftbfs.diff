Index: polkit-qt-1-0.95.1/CMakeLists.txt
===================================================================
--- polkit-qt-1-0.95.1.orig/CMakeLists.txt	2010-07-02 09:59:07.735794971 -0400
+++ polkit-qt-1-0.95.1/CMakeLists.txt	2010-07-02 10:00:48.545794971 -0400
@@ -17,6 +17,8 @@
 pkg_check_modules (POLKIT-1 REQUIRED polkit-gobject-1>=0.95)
 pkg_check_modules (POLKIT-1_AGENT REQUIRED polkit-agent-1>=0.95)
 
+add_definitions(-DQT_NO_KEYWORDS)
+
 message(STATUS " ${POLKIT-1_INCLUDE_DIRS} ===========")
 
 include_directories(
Index: polkit-qt-1-0.95.1/agent/listeneradapter.cpp
===================================================================
--- polkit-qt-1-0.95.1.orig/agent/listeneradapter.cpp	2010-07-02 09:59:04.765794971 -0400
+++ polkit-qt-1-0.95.1/agent/listeneradapter.cpp	2010-07-02 09:59:21.325794971 -0400
@@ -61,7 +61,7 @@
 {
     Listener *listItem;
 
-    foreach(listItem, m_listeners) {
+    Q_FOREACH(listItem, m_listeners) {
         Q_ASSERT(listItem);
 
         if (listItem->listener() == listener)
Index: polkit-qt-1-0.95.1/agent/polkitqt1-agent-session.cpp
===================================================================
--- polkit-qt-1-0.95.1.orig/agent/polkitqt1-agent-session.cpp	2010-07-02 09:58:56.375794971 -0400
+++ polkit-qt-1-0.95.1/agent/polkitqt1-agent-session.cpp	2010-07-02 09:59:21.325794971 -0400
@@ -101,25 +101,25 @@
 {
     qDebug() << "COMPLETED";
     Session *session = (Session *)user_data;
-    emit((Session *)user_data)->completed(gained_authorization);
+    Q_EMIT((Session *)user_data)->completed(gained_authorization);
 }
 
 void Session::Private::request(PolkitAgentSession *s, gchar *request, gboolean echo_on, gpointer user_data)
 {
     qDebug() << "REQUEST";
-    emit((Session *)user_data)->request(QString::fromUtf8(request), echo_on);
+    Q_EMIT((Session *)user_data)->request(QString::fromUtf8(request), echo_on);
 }
 
 void Session::Private::showError(PolkitAgentSession *s, gchar *text, gpointer user_data)
 {
     qDebug() << "showError";
-    emit((Session *)user_data)->showError(QString::fromUtf8(text));
+    Q_EMIT((Session *)user_data)->showError(QString::fromUtf8(text));
 }
 
 void Session::Private::showInfo(PolkitAgentSession *s, gchar *text, gpointer user_data)
 {
     qDebug() << "showInfo";
-    emit((Session *)user_data)->showInfo(QString::fromUtf8(text));
+    Q_EMIT((Session *)user_data)->showInfo(QString::fromUtf8(text));
 }
 
 //
Index: polkit-qt-1-0.95.1/core/polkitqt1-authority.cpp
===================================================================
--- polkit-qt-1-0.95.1.orig/core/polkitqt1-authority.cpp	2010-07-02 09:58:38.075794970 -0400
+++ polkit-qt-1-0.95.1/core/polkitqt1-authority.cpp	2010-07-02 09:59:21.325794971 -0400
@@ -208,7 +208,7 @@
     QList<QString> seats;
     qVariantValue<QDBusArgument> (msg.arguments()[0]) >> seats;
     // it can be multiple seats present so connect all their signals
-    foreach(const QString &seat, seats) {
+    Q_FOREACH(const QString &seat, seats) {
         seatSignalsConnect(seat);
     }
 }
@@ -244,7 +244,7 @@
 void Authority::Private::dbusFilter(const QDBusMessage &message)
 {
     if (message.type() == QDBusMessage::SignalMessage) {
-        emit q->consoleKitDBChanged();
+        Q_EMIT q->consoleKitDBChanged();
 
         // TODO: Test this with the multiseat support
         if (message.member() == "SeatAdded")
@@ -278,7 +278,7 @@
 
 void Authority::Private::pk_config_changed()
 {
-    emit Authority::instance()->configChanged();
+    Q_EMIT Authority::instance()->configChanged();
 }
 
 PolkitAuthority *Authority::polkitAuthority() const
@@ -361,7 +361,7 @@
         return;
     }
     if (pkResult != NULL) {
-        emit authority->checkAuthorizationFinished(polkitResultToResult(pkResult));
+        Q_EMIT authority->checkAuthorizationFinished(polkitResultToResult(pkResult));
         g_object_unref(pkResult);
     } else {
         authority->d->setError(E_UnknownResult);
@@ -421,7 +421,7 @@
         return;
     }
 
-    emit authority->enumerateActionsFinished(actionsToListAndFree(list));
+    Q_EMIT authority->enumerateActionsFinished(actionsToListAndFree(list));
 }
 
 void Authority::enumerateActionsCancel()
@@ -491,7 +491,7 @@
         return;
     }
 
-    emit authority->registerAuthenticationAgentFinished(res);
+    Q_EMIT authority->registerAuthenticationAgentFinished(res);
 }
 
 void Authority::registerAuthenticationAgentCancel()
@@ -559,7 +559,7 @@
         return;
     }
 
-    emit authority->unregisterAuthenticationAgentFinished(res);
+    Q_EMIT authority->unregisterAuthenticationAgentFinished(res);
 }
 
 void Authority::unregisterAuthenticationAgentCancel()
@@ -626,7 +626,7 @@
         return;
     }
 
-    emit authority->authenticationAgentResponseFinished(res);
+    Q_EMIT authority->authenticationAgentResponseFinished(res);
 }
 
 void Authority::authenticationAgentResponseCancel()
@@ -685,7 +685,7 @@
 
     g_list_free(glist);
 
-    emit authority->enumerateTemporaryAuthorizationsFinished(res);
+    Q_EMIT authority->enumerateTemporaryAuthorizationsFinished(res);
 }
 
 void Authority::enumerateTemporaryAuthorizationsCancel()
@@ -741,7 +741,7 @@
         return;
     }
 
-    emit authority->revokeTemporaryAuthorizationsFinished(res);
+    Q_EMIT authority->revokeTemporaryAuthorizationsFinished(res);
 }
 
 void Authority::revokeTemporaryAuthorizationsCancel()
@@ -797,7 +797,7 @@
         return;
     }
 
-    emit authority->revokeTemporaryAuthorizationFinished(res);
+    Q_EMIT authority->revokeTemporaryAuthorizationFinished(res);
 }
 
 void Authority::revokeTemporaryAuthorizationCancel()
Index: polkit-qt-1-0.95.1/gui/polkitqt1-gui-action.cpp
===================================================================
--- polkit-qt-1-0.95.1.orig/gui/polkitqt1-gui-action.cpp	2010-07-02 09:58:00.195794972 -0400
+++ polkit-qt-1-0.95.1/gui/polkitqt1-gui-action.cpp	2010-07-02 09:59:21.325794971 -0400
@@ -127,8 +127,8 @@
     switch (d->pkResult) {
     case Authority::Yes:
     case Authority::Challenge:
-        // just emit the 'activated' signal
-        emit authorized();
+        // just Q_EMIT the 'activated' signal
+        Q_EMIT authorized();
         return true;
         break;
     default:
@@ -141,7 +141,7 @@
              * Hence, they probably have a good reason for doing
              * this so do let the 'activate' signal propagate..
              */
-            emit authorized();
+            Q_EMIT authorized();
             return true;
         }
         break;
@@ -207,7 +207,7 @@
         }
         break;
     }
-    emit parent->dataChanged();
+    Q_EMIT parent->dataChanged();
 }
 
 void Action::Private::configChanged()
Index: polkit-qt-1-0.95.1/gui/polkitqt1-gui-actionbutton.cpp
===================================================================
--- polkit-qt-1-0.95.1.orig/gui/polkitqt1-gui-actionbutton.cpp	2010-07-02 09:57:22.455794970 -0400
+++ polkit-qt-1-0.95.1/gui/polkitqt1-gui-actionbutton.cpp	2010-07-02 09:59:21.315794971 -0400
@@ -57,7 +57,7 @@
 {
     Q_Q(ActionButton);
 
-    foreach(QAbstractButton *ent, buttons) {
+    Q_FOREACH(QAbstractButton *ent, buttons) {
         ent->setVisible(q->isVisible());
         ent->setEnabled(q->isEnabled());
         ent->setText(q->text());
@@ -81,7 +81,7 @@
     Q_D(ActionButton);
 
     bool tg = false;
-    foreach(QAbstractButton *ent, d->buttons) {
+    Q_FOREACH(QAbstractButton *ent, d->buttons) {
         if (ent->isCheckable()) {
             // we set the the current Action state
             ent->setChecked(isChecked());
@@ -102,7 +102,7 @@
     Q_D(ActionButton);
 
     // First, let's clear the list
-    foreach(QAbstractButton *ent, d->buttons) {
+    Q_FOREACH(QAbstractButton *ent, d->buttons) {
         d->removeButton(ent);
     }
 
@@ -124,7 +124,7 @@
         // if we are not checkable BUT the button
         // is (eg a QCheckBox) we should set all buttons to
         // checkable.
-        foreach(QAbstractButton *ent, buttons) {
+        Q_FOREACH(QAbstractButton *ent, buttons) {
             ent->setCheckable(true);
         }
         // set the checkable state of Action to store the initial state
@@ -156,7 +156,7 @@
 {
     Q_Q(ActionButton);
 
-    emit q->clicked(qobject_cast<QAbstractButton *>(q->sender()), c);
+    Q_EMIT q->clicked(qobject_cast<QAbstractButton *>(q->sender()), c);
 }
 
 }
Index: polkit-qt-1-0.95.1/gui/polkitqt1-gui-actionbuttons.cpp
===================================================================
--- polkit-qt-1-0.95.1.orig/gui/polkitqt1-gui-actionbuttons.cpp	2010-07-02 09:57:55.885794970 -0400
+++ polkit-qt-1-0.95.1/gui/polkitqt1-gui-actionbuttons.cpp	2010-07-02 09:59:21.315794971 -0400
@@ -40,7 +40,7 @@
 
 void ActionButtons::setButtons(const QList<QAbstractButton *> &buttons)
 {
-    foreach(QAbstractButton *ent, buttons) {
+    Q_FOREACH(QAbstractButton *ent, buttons) {
         addButton(ent);
     }
 }
