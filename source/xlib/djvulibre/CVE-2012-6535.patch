diff -Naur djvulibre-3.5.23/libdjvu/GString.cpp djvulibre-3.5.23.new/libdjvu/GString.cpp
--- djvulibre-3.5.23/libdjvu/GString.cpp	2014-01-15 11:36:40.581803800 +0100
+++ djvulibre-3.5.23.new/libdjvu/GString.cpp	2014-01-15 11:37:01.813018200 +0100
@@ -1864,23 +1864,32 @@
     mbstate_t ps;
     memset(&ps,0,sizeof(mbstate_t));
     for(const unsigned char *s=(const unsigned char *)data;(s<eptr)&& *s;)
-    {
-      const uint32_t w0=UTF8toUCS4(s,eptr);
-      const unsigned char * const r0=r;
-      r=UCS4toNative(w0,r,&ps);
-      if(r == r0)
       {
-        if(escape == IS_ESCAPED)
-        {
-          sprintf((char *)r,"&#%lu;",(unsigned long)w0);
-          r+=strlen((char *)r);
-        }
+        const unsigned char * const s0 = s;
+        const uint32_t w0=UTF8toUCS4(s,eptr);
+        if (s == s0)
+          {
+            s += 1;
+            *r++ = '?';
+          }
         else
-        {
-          *r++ = '?';
-        }
+          {
+            const unsigned char * const r0 = r;
+            r=UCS4toNative(w0,r,&ps);
+            if(r == r0)
+              {
+                if (escape == IS_ESCAPED)
+                  {
+                    sprintf((char *)r,"&#%lu;",(unsigned long)w0);
+                    r += strlen((char *)r);
+                  }
+                else
+                  {
+                    *r++ = '?';
+                  }
+              }
+          }
       }
-    }
     r[0]=0;
     retval = NATIVE_CREATE( (const char *)buf );
   } else
