diff -Naur mongodb-src-r3.4.9/SConstruct mongodb-src-r3.4.9.new/SConstruct
--- mongodb-src-r3.4.9/SConstruct	2017-09-07 21:28:48.000000000 +0200
+++ mongodb-src-r3.4.9.new/SConstruct	2017-09-24 20:13:37.000000000 +0200
@@ -30,7 +30,7 @@
 def print_build_failures():
     from SCons.Script import GetBuildFailures
     for bf in GetBuildFailures():
-        print "%s failed: %s" % (bf.node, bf.errstr)
+        print("%s failed: %s" % (bf.node, bf.errstr))
 atexit.register(print_build_failures)
 
 def versiontuple(v):
@@ -511,7 +511,7 @@
         version_data = json.load(version_fp)
 
     if 'version' not in version_data:
-        print "version.json does not contain a version string"
+        print("version.json does not contain a version string")
         Exit(1)
     if 'githash' not in version_data:
         version_data['githash'] = utils.getGitVersion()
@@ -519,7 +519,7 @@
 except IOError as e:
     # If the file error wasn't because the file is missing, error out
     if e.errno != errno.ENOENT:
-        print "Error opening version.json: {0}".format(e.strerror)
+        print("Error opening version.json: {0}".format(e.strerror))
         Exit(1)
 
     version_data = {
@@ -528,7 +528,7 @@
     }
 
 except ValueError as e:
-    print "Error decoding version.json: {0}".format(e)
+    print("Error decoding version.json: {0}".format(e))
     Exit(1)
 
 # Setup the command-line variables
@@ -598,7 +598,7 @@
 
 variables_files = variable_shlex_converter(get_option('variables-files'))
 for file in variables_files:
-    print "Using variable customization file %s" % file
+    print("Using variable customization file %s" % file)
 
 env_vars = Variables(
     files=variables_files,
@@ -901,12 +901,12 @@
 env.AddMethod(env_get_os_name_wrapper, 'GetTargetOSName')
 
 def fatal_error(env, msg, *args):
-    print msg.format(*args)
+    print(msg.format(*args))
     Exit(1)
 
 def conf_error(env, msg, *args):
-    print msg.format(*args)
-    print "See {0} for details".format(env['CONFIGURELOG'].abspath)
+    print(msg.format(*args))
+    print("See {0} for details".format(env['CONFIGURELOG'].abspath))
 
     Exit(1)
 
@@ -926,7 +926,7 @@
 env.AddMethod(lambda env: env['VERBOSE'], 'Verbose')
 
 if has_option('variables-help'):
-    print env_vars.GenerateHelpText(env)
+    print(env_vars.GenerateHelpText(env))
     Exit(0)
 
 unknown_vars = env_vars.UnknownVariables()
@@ -1124,7 +1124,7 @@
     env['TARGET_ARCH'] = detected_processor
 
 if env['TARGET_OS'] not in os_macros:
-    print "No special config for [{0}] which probably means it won't work".format(env['TARGET_OS'])
+    print("No special config for [{0}] which probably means it won't work".format(env['TARGET_OS']))
 elif not detectConf.CheckForOS(env['TARGET_OS']):
     env.ConfError("TARGET_OS ({0}) is not supported by compiler", env['TARGET_OS'])
 
diff -Naur mongodb-src-r3.4.9/src/mongo/installer/msi/SConscript mongodb-src-r3.4.9.new/src/mongo/installer/msi/SConscript
--- mongodb-src-r3.4.9/src/mongo/installer/msi/SConscript	2017-09-07 21:28:48.000000000 +0200
+++ mongodb-src-r3.4.9.new/src/mongo/installer/msi/SConscript	2017-09-24 20:18:20.000000000 +0200
@@ -69,8 +69,8 @@
       upgrade_code = '9295A251-1B1F-45FB-96FF-35B57E490613'
 
 if 'msi' in BUILD_TARGETS and msi_edition == 'SSL' and msi_flavor != '2008R2Plus':
-  print "Building the MongoDB SSL MSI is only supported on Windows 2008 R2+ or Windows 7+ platforms."
-  print "You must add --win-version-min=ws08r2 to your scons flags"
+  print("Building the MongoDB SSL MSI is only supported on Windows 2008 R2+ or Windows 7+ platforms.")
+  print("You must add --win-version-min=ws08r2 to your scons flags")
   exit(1)
 
 if msi_platform == 'x64':
diff -Naur mongodb-src-r3.4.9/src/third_party/wiredtiger/SConscript mongodb-src-r3.4.9.new/src/third_party/wiredtiger/SConscript
--- mongodb-src-r3.4.9/src/third_party/wiredtiger/SConscript	2017-09-07 21:28:48.000000000 +0200
+++ mongodb-src-r3.4.9.new/src/third_party/wiredtiger/SConscript	2017-09-24 20:15:50.000000000 +0200
@@ -93,7 +93,7 @@
     VERSION_MINOR == None or
     VERSION_PATCH == None or
     VERSION_STRING == None):
-    print "Failed to find version variables in " + version_file
+    print("Failed to find version variables in " + version_file)
     Exit(1)
 
 wiredtiger_includes = """
diff -Naur mongodb-src-r3.4.9/src/third_party/wiredtiger/SConstruct mongodb-src-r3.4.9.new/src/third_party/wiredtiger/SConstruct
--- mongodb-src-r3.4.9/src/third_party/wiredtiger/SConstruct	2017-09-07 21:28:48.000000000 +0200
+++ mongodb-src-r3.4.9.new/src/third_party/wiredtiger/SConstruct	2017-09-24 20:13:08.000000000 +0200
@@ -121,7 +121,7 @@
 
 conf = Configure(env)
 if not conf.CheckCHeader('stdlib.h'):
-    print 'stdlib.h must be installed!'
+    print('stdlib.h must be installed!')
     Exit(1)
 
 if useZlib:
@@ -131,7 +131,7 @@
         conf.env.Append(CPPDEFINES=["HAVE_BUILTIN_EXTENSION_ZLIB"])
         wtlibs.append("zlib")
     else:
-        print 'zlib.h must be installed!'
+        print('zlib.h must be installed!')
         Exit(1)
 
 if useSnappy:
@@ -141,7 +141,7 @@
         conf.env.Append(CPPDEFINES=['HAVE_BUILTIN_EXTENSION_SNAPPY'])
         wtlibs.append("snappy")
     else:
-        print 'snappy-c.h must be installed!'
+        print('snappy-c.h must be installed!')
         Exit(1)
 
 if useLz4:
@@ -151,14 +151,14 @@
         conf.env.Append(CPPDEFINES=['HAVE_BUILTIN_EXTENSION_LZ4'])
         wtlibs.append("lz4")
     else:
-        print 'lz4.h must be installed!'
+        print('lz4.h must be installed!')
         Exit(1)
 
 if useBdb:
     conf.env.Append(CPPPATH=[useBdb+ "/include"])
     conf.env.Append(LIBPATH=[useBdb+ "/lib"])
     if not conf.CheckCHeader('db.h'):
-        print 'db.h must be installed!'
+        print('db.h must be installed!')
         Exit(1)
 
 if useTcmalloc:
@@ -169,7 +169,7 @@
         conf.env.Append(CPPDEFINES=['HAVE_LIBTCMALLOC'])
         conf.env.Append(CPPDEFINES=['HAVE_POSIX_MEMALIGN'])
     else:
-        print 'tcmalloc.h must be installed!'
+        print('tcmalloc.h must be installed!')
         Exit(1)
 
 env = conf.Finish()
@@ -208,7 +208,7 @@
     VERSION_MINOR == None or
     VERSION_PATCH == None or
     VERSION_STRING == None):
-    print "Failed to find version variables in " + version_file
+    print("Failed to find version variables in " + version_file)
     Exit(1)
 
 wiredtiger_includes = """
@@ -327,7 +327,7 @@
     # Check that this version of python is 64-bit
     #
     if sys.maxsize < 2**32:
-        print "The Python Interpreter must be 64-bit in order to build the python bindings"
+        print("The Python Interpreter must be 64-bit in order to build the python bindings")
         Exit(1)
 
     pythonEnv = env.Clone()
@@ -383,7 +383,7 @@
 # WiredTiger Smoke Test support
 # Runs each test in a custom temporary directory
 def run_smoke_test(x):
-    print "Running Smoke Test: " + x
+    print("Running Smoke Test: " + x)
 
     # Make temp dir
     temp_dir = tempfile.mkdtemp(prefix="wt_home")
