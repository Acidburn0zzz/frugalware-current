--- encfs-1.4.2/encfs/FileUtils.cpp	2008-04-14 01:13:23.000000000 +0200
+++ encfs-read-only/encfs/FileUtils.cpp	2008-05-19 20:25:21.000000000 +0200
@@ -46,11 +46,11 @@
 #include <sys/wait.h>
 #include <fcntl.h>
 #include <unistd.h>
-#include <ctype.h>
-#include <stdio.h>
-#include <stdlib.h>
-#include <errno.h>
-#include <string.h>
+#include <cctype>
+#include <cstdio>
+#include <cstdlib>
+#include <cerrno>
+#include <cstring>
 
 #include <iostream>
 #include <sstream>
@@ -61,12 +61,14 @@
 #include <boost/archive/xml_iarchive.hpp>
 #include <boost/archive/xml_oarchive.hpp>
 #include <boost/serialization/split_free.hpp>
+#include <boost/serialization/binary_object.hpp>
 
 using namespace rel;
 using namespace rlog;
 using namespace std;
 using namespace gnu;
 namespace fs = boost::filesystem;
+namespace serial = boost::serialization;
 
 static const int DefaultBlockSize = 1024;
 // The maximum length of text passwords.  If longer are needed,
@@ -137,7 +139,8 @@
             ar << make_nvp("encodedKeySize", keyLen);
             char key[keyLen];
             memcpy(key, cfg.keyData.data(), keyLen);
-            ar << make_nvp("encodedKeyData", make_binary_object(key, keyLen));
+            ar << make_nvp("encodedKeyData", 
+                    serial::make_binary_object(key, keyLen));
         }
 
         template<class Archive>
@@ -161,7 +164,7 @@
             ar >> make_nvp("encodedKeySize", encodedKeySize);
             char key[encodedKeySize];
             ar >> make_nvp("encodedKeyData", 
-                    make_binary_object(key, encodedKeySize));
+                    serial::make_binary_object(key, encodedKeySize));
             cfg.keyData.assign( (char*)key, encodedKeySize );
         }
         
@@ -318,7 +321,7 @@
 {
     (void)info;
 
-    fs::ifstream st(configFile);
+    fs::ifstream st( configFile );
     if(st.is_open())
     {
         try
