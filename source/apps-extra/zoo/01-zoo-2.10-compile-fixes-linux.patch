diff -Naur zoo-2.10.orig/ar.h zoo-2.10/ar.h
--- zoo-2.10.orig/ar.h	2005-05-25 12:19:53.945761744 +0200
+++ zoo-2.10/ar.h	2005-05-25 12:20:05.466010400 +0200
@@ -7,6 +7,7 @@
 ***********************************************************/
 
 #include <stdio.h>
+#include <sys/types.h>
 
 #ifdef ANSI_HDRS
 # include <limits.h>
@@ -15,9 +16,11 @@
 /* uchar should be 8 bits or more */
 /* typedef unsigned char  uchar;   -- already in zoo.h */
 
+#ifndef _SYS_TYPES_H
 typedef unsigned int   uint;    /* 16 bits or more */
 typedef unsigned short ushort;  /* 16 bits or more */
 typedef unsigned long  ulong;   /* 32 bits or more */
+#endif
 
 /* T_UINT16 must be #defined in options.h to be 
 a 16-bit unsigned integer type */
diff -Naur zoo-2.10.orig/basename.c zoo-2.10/basename.c
--- zoo-2.10.orig/basename.c	2005-05-25 12:19:53.945761744 +0200
+++ zoo-2.10/basename.c	2005-05-25 12:20:05.467010248 +0200
@@ -18,7 +18,7 @@
 
 /* This function strips device/directory information from
 a pathname and returns just the plain filename */
-void basename (pathname, fname)
+void zoo_basename (pathname, fname)
 char *pathname;
 char fname[];
 {
diff -Naur zoo-2.10.orig/linux.c zoo-2.10/linux.c
--- zoo-2.10.orig/linux.c	1970-01-01 01:00:00.000000000 +0100
+++ zoo-2.10/linux.c	2005-05-25 12:20:05.467010248 +0200
@@ -0,0 +1,74 @@
+/* machine.c for Linux. */
+
+/* Basically code stolen from bsd.c, and adjusted for Linux. */
+
+#include <sys/stat.h>
+#include <sys/time.h>
+#include <unistd.h>
+
+/* Function isadir() returns 1 if the supplied handle is a directory,
+ * else it returns 0. */
+
+int isadir (ZOOFILE f)
+{
+  struct stat buffer;           /* buffer to hold file information */
+
+  if (fstat (fileno (f), &buffer) == -1) 
+    return (0);                 /* inaccessible -- assume not dir */
+  else
+    {
+      if (buffer.st_mode & S_IFDIR)
+	return (1);
+      else
+	return (0);
+    }
+}
+
+
+/* Standard UNIX-compatible time routines */
+#include "nixtime.i"
+
+/* Standard UNIX-specific file attribute routines */
+#include "nixmode.i"
+
+/* Function gettz() returns the offset from GMT in seconds */
+long gettz()
+{
+#define SEC_IN_DAY      (24L * 60L * 60L)
+#define INV_VALUE       (SEC_IN_DAY + 1L)
+
+  static long retval = INV_VALUE;    /* cache, init to impossible value */
+  struct timeval tp;
+  struct timezone tzp;
+
+  if (retval != INV_VALUE)           /* if have cached value, return it */
+    return retval;
+  
+   gettimeofday (&tp, &tzp);            
+
+   retval = tzp.tz_minuteswest * 60 - tzp.tz_dsttime * 3600L;
+   return retval;
+}
+
+/* Function fixfname() converts the supplied filename to a syntax
+ * legal for the host system.  It is used during extraction.
+ * Undocumented */
+
+char *fixfname(char *fname)
+{
+  return fname; /* default is no-op */
+}
+
+/* Function zootrunc() truncates the file passed to it.
+ * Undocumented. */
+
+int zootrunc(FILE *f)
+{
+  extern long lseek();
+  long seekpos;
+  int fd = fileno(f);
+
+  seekpos = lseek(fd, 0L, SEEK_CUR);
+  if (seekpos >= 0)
+    return ftruncate(fd, seekpos);
+}
diff -Naur zoo-2.10.orig/machine.c zoo-2.10/machine.c
--- zoo-2.10.orig/machine.c	2005-05-25 12:19:53.946761592 +0200
+++ zoo-2.10/machine.c	2005-05-25 12:20:05.467010248 +0200
@@ -48,6 +48,10 @@
 /* PART 2.  FOR EACH SPECIFIC SYSTEM, INCLUDE A C FILE HERE.           */
 /***********************************************************************/
 
+#ifdef LINUX
+#include "linux.c"
+#endif
+
 #ifdef SYS_V
 #include "sysv.c"
 #endif
diff -Naur zoo-2.10.orig/makefile zoo-2.10/makefile
--- zoo-2.10.orig/makefile	2005-05-25 12:19:53.946761592 +0200
+++ zoo-2.10/makefile	2005-05-25 12:20:05.467010248 +0200
@@ -23,7 +23,7 @@
 MODEL =
 EXTRA = -DBIG_MEM -DNDEBUG
 LINTFLAGS = -DLINT
-OPTIM = -O
+OPTIM = -O -Wall
 DESTDIR = /usr/local/bin
 
 #List of all object files created for Zoo
@@ -53,6 +53,7 @@
 	@echo "ultrix:       ULTRIX 4.1"
 	@echo "convex:       Convex C200 series"
 	@echo "sysv:         System V Release 2 or 3; or SCO Xenix"
+	@echo "linux:        Linux"
 	@echo "scodos:       Cross-compiler under SCO Xenix/UNIX for MS-DOS"
 	@echo "xenix286:     Older Xenix/286 (not tested)"
 	@echo "xenix68k:     Xenix/68000 (not tested)"
@@ -94,6 +95,10 @@
 bsd:
 	$(MAKE) CFLAGS="-c $(OPTIM) -DBSD4_3" $(TARGETS)
 
+# Linux
+linux:
+	$(MAKE) CC="gcc" CFLAGS="-c $(OPTIM) $(LINTFLAGS) -DLINUX -DANSI_HDRS" $(TARGETS)
+
 # ULTRIX 4.1
 ultrix:
 	$(MAKE) CFLAGS="-c $(OPTIM) -DULTRIX" $(TARGETS)
@@ -235,7 +240,11 @@
 parse.o: zoofns.h zooio.h
 portable.o: /usr/include/stdio.h assert.h debug.h machine.h options.h
 portable.o: portable.h various.h zoo.h zoofns.h zooio.h
-prterror.o: /usr/include/stdio.h /usr/include/varargs.h options.h various.h
+
+# I deleted varags.h dependancy from prterror.o since that is a
+# dependancy covered by a #ifdef, and in Debian's case #undef'ed
+
+prterror.o: /usr/include/stdio.h options.h various.h
 prterror.o: zoofns.h zooio.h
 sysv.o: /usr/include/sys/stat.h /usr/include/sys/types.h /usr/include/time.h
 sysv.o: nixmode.i nixtime.i
diff -Naur zoo-2.10.orig/makelist.c zoo-2.10/makelist.c
--- zoo-2.10.orig/makelist.c	2005-05-25 12:19:53.946761592 +0200
+++ zoo-2.10/makelist.c	2005-05-25 12:20:05.467010248 +0200
@@ -21,6 +21,8 @@
 
 char *nameptr PARMS((char *));
 void modpath PARMS((char *));
+int isadir PARMS((ZOOFILE));
+int isfdir PARMS((char *));
 
 /*******************/
 /*
diff -Naur zoo-2.10.orig/misc.c zoo-2.10/misc.c
--- zoo-2.10.orig/misc.c	2005-05-25 12:19:53.946761592 +0200
+++ zoo-2.10/misc.c	2005-05-25 12:20:05.486007360 +0200
@@ -8,6 +8,7 @@
 Copyright (C) 1986, 1987 Rahul Dhesi -- All rights reserved
 (C) Copyright 1988 Rahul Dhesi -- All rights reserved
 */
+#include <signal.h>
 #include "options.h"
 /* Miscellaneous functions needed by Zoo but not by Ooz */
 
@@ -201,7 +202,7 @@
 ZOOFILE zoo_file;
 {
 #ifndef NOSIGNAL  
-   T_SIGNAL (*oldsignal)();
+   T_SIGNAL (*oldsignal)(int);
    oldsignal = signal (SIGINT, SIG_IGN);
 #endif
    if (fwr_dir (direntry, zoo_file) == -1)
diff -Naur zoo-2.10.orig/misc2.c zoo-2.10/misc2.c
--- zoo-2.10.orig/misc2.c	2005-05-25 12:19:53.946761592 +0200
+++ zoo-2.10/misc2.c	2005-05-25 12:20:05.486007360 +0200
@@ -7,6 +7,10 @@
 Copyright (C) 1986, 1987 Rahul Dhesi -- All rights reserved
 (C) Copyright 1988 Rahul Dhesi -- All rights reserved
 */
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <fcntl.h>
+#include <unistd.h>
 #include "options.h"
 /* Miscellaneous routines */
 #include "portable.h"
diff -Naur zoo-2.10.orig/nixtime.i zoo-2.10/nixtime.i
--- zoo-2.10.orig/nixtime.i	2005-05-25 12:19:53.947761440 +0200
+++ zoo-2.10/nixtime.i	2005-05-25 12:20:05.486007360 +0200
@@ -10,6 +10,9 @@
 
                                     -- Rahul Dhesi  1986/12/31
 */
+#include <sys/types.h>
+#include <time.h>
+#include <utime.h>
 
 struct tm *localtime();
 
@@ -51,9 +54,10 @@
 {
 	long mstonix();
 	long gettz();
-	long utimbuf[2];
-	utimbuf[0] = utimbuf[1] = gettz() + mstonix (date, time);
-	return (utime (path, utimbuf));
+        struct utimbuf utbf;
+
+	utbf.actime = utbf.modtime = gettz() + mstonix (date, time);
+	return (utime (path, &utbf));
 }
 
 /****************
diff -Naur zoo-2.10.orig/options.h zoo-2.10/options.h
--- zoo-2.10.orig/options.h	2005-05-25 12:19:53.947761440 +0200
+++ zoo-2.10/options.h	2005-05-25 12:20:05.486007360 +0200
@@ -13,6 +13,32 @@
 
 
 /***********************************************************************/
+/* Linux                                                               */
+/***********************************************************************/
+
+#ifdef LINUX
+#define FILTER
+#define IO_MACROS
+#define EXISTS(f)		(access(f, 00) == 0)
+#define FNLIMIT 1023
+#define CHEKDIR
+#define NIXTIME
+#define NIXFNAME
+#define NEEDCTYP
+#define NOENUM
+#define REN_STDC
+#define SETBUF
+#define GETTZ
+#define FATTR
+#define T_SIGNAL        void
+#define STDARG
+#define HAVE_ISATTY          /* undocumented #define option */
+#define ANSI_PROTO
+#define VOIDPTR  void * 
+#define NO_STDIO_FN          /* Do we need this? RUARI QUINN */
+#endif /* Linux */
+
+/***********************************************************************/
 /* SYSTEM V (should be compatible with most releases)                  */
 /***********************************************************************/
 
diff -Naur zoo-2.10.orig/portable.h zoo-2.10/portable.h
--- zoo-2.10.orig/portable.h	2005-05-25 12:19:53.947761440 +0200
+++ zoo-2.10/portable.h	2005-05-25 12:20:05.492006448 +0200
@@ -90,6 +90,12 @@
 #define  MKDIR(x)       mkdir(x, 0777)
 #endif
 
+/* Linux */
+#ifdef LINUX
+#define NIX_IO       /* standard **IX I/O */
+#define  MKDIR(x)       mkdir(x, 0777)
+#endif
+
 /* Amiga */
 #ifdef MCH_AMIGA
 # include "MCH_AMIGA NEEDS REVISION"
diff -Naur zoo-2.10.orig/zoo.c zoo-2.10/zoo.c
--- zoo-2.10.orig/zoo.c	2005-05-25 12:19:53.948761288 +0200
+++ zoo-2.10/zoo.c	2005-05-25 12:20:05.493006296 +0200
@@ -15,6 +15,7 @@
 (C) Copyright 1988 Rahul Dhesi -- All rights reserved
 (C) Copyright 1991 Rahul Dhesi -- All rights reserved
 */
+#include <unistd.h>
 #include "options.h"
 #include "zooio.h"
 #include "various.h"
diff -Naur zoo-2.10.orig/zoo.h zoo-2.10/zoo.h
--- zoo-2.10.orig/zoo.h	2005-05-25 12:19:53.948761288 +0200
+++ zoo-2.10/zoo.h	2005-05-25 12:20:05.493006296 +0200
@@ -1,5 +1,6 @@
 /* derived from: zoo.h 2.16 88/01/27 23:21:36 */
-
+#ifndef ZOO_H
+#define ZOO_H
 /*
 The contents of this file are hereby released to the public domain.
 
@@ -240,3 +241,4 @@
 #define	MAXGEN				0x0f
 /* version mask to prune down to correct size on large-word machines */
 #define VER_MASK				0xffff
+#endif
diff -Naur zoo-2.10.orig/zooadd.c zoo-2.10/zooadd.c
--- zoo-2.10.orig/zooadd.c	2005-05-25 12:19:53.948761288 +0200
+++ zoo-2.10/zooadd.c	2005-05-25 12:20:05.493006296 +0200
@@ -9,11 +9,13 @@
 (C) Copyright 1988 Rahul Dhesi -- All rights reserved
 (C) Copyright 1991 Rahul Dhesi -- All rights reserved
 */
+#include <unistd.h>
 #include "options.h"
 /* Adds files specified in parameter-list to archive zoo_path. */
 
 #define LONGEST	20					/* assumed length of longest filename */
 #include "zoomem.h"             /* to define MAXADD */
+#undef PORTABLE
 #include "zoo.h"
 #include "zooio.h"
 #include "various.h"
@@ -37,6 +39,7 @@
 void copyfields PARMS ((struct direntry *, struct tiny_header *));
 void storefname PARMS ((struct direntry *, char *, int));
 char *choosefname PARMS ((struct direntry *));
+int isadir PARMS((ZOOFILE));
 
 extern struct zoo_header zoo_header;
 
@@ -132,7 +135,7 @@
 
 if (zoo_file == NOFILE)
    prterror ('f', could_not_open, zoo_path);
-basename(zoo_path, zoo_fname);      /* get basename of archive */
+zoo_basename(zoo_path, zoo_fname);  /* get basename of archive */
 rootname (zoo_path, zoo_bak);       /* name without extension */
 strcat (zoo_bak, BACKUP_EXT);       /* name of backup of this archive */
 
@@ -222,7 +225,7 @@
 		break;
 	}
 
-   basename (this_path, this_fname);   /* get just filename for later */
+   zoo_basename (this_path, this_fname);   /* get just filename for later */
 
    this_file = zooopen(this_path, Z_READ);
    if (this_file == NOFILE) {
diff -Naur zoo-2.10.orig/zooadd2.c zoo-2.10/zooadd2.c
--- zoo-2.10.orig/zooadd2.c	2005-05-25 12:19:53.948761288 +0200
+++ zoo-2.10/zooadd2.c	2005-05-25 12:20:05.498005536 +0200
@@ -7,7 +7,9 @@
 Copyright (C) 1986, 1987 Rahul Dhesi -- All rights reserved
 (C) Copyright 1988 Rahul Dhesi -- All rights reserved
 */
+#include <unistd.h>
 #include "options.h"
+#undef PORTABLE
 #include "zoo.h"
 #ifndef	OK_STDIO
 #include <stdio.h>
@@ -20,7 +22,7 @@
 #include "assert.h"
 #include "debug.h"
 #include "parse.h"
-
+int isfdir PARMS((char *));
 /*
 Miscellaneous routines to support zooadd().
 */
diff -Naur zoo-2.10.orig/zooext.c zoo-2.10/zooext.c
--- zoo-2.10.orig/zooext.c	2005-05-25 12:19:53.948761288 +0200
+++ zoo-2.10/zooext.c	2005-05-25 12:20:05.499005384 +0200
@@ -14,7 +14,8 @@
 /* Extract file from archive.  Extracts files specified in parameter-list
    from archive zoo_path.  If none specified, extracts all files from
    archive. */
-
+#include <unistd.h>
+#include <signal.h>
 #include "options.h"
 #include "zoo.h"
 #include "parse.h"      /* defines struct for parse() */
@@ -62,7 +63,7 @@
 char *whichname;                          /* which name to extract */
 char matchname[PATHSIZE];                 /* for pattern matching only */
 #ifndef NOSIGNAL
-T_SIGNAL (*oldsignal)();        /* to save previous SIGINT handler */
+T_SIGNAL (*oldsignal)(int);        /* to save previous SIGINT handler */
 #endif
 ZOOFILE zoo_file;                         /* open archive */
 long next_ptr;                            /* pointer to within archive */
@@ -626,7 +627,7 @@
 
 /* Ctrl_c() is called if ^C is hit while a file is being extracted.
    It closes the files, deletes it, and exits. */
-T_SIGNAL ctrl_c()
+T_SIGNAL ctrl_c(int dummy)
 {
 #ifndef NOSIGNAL
    signal (SIGINT, SIG_IGN);     /* ignore any more */
diff -Naur zoo-2.10.orig/zoofns.h zoo-2.10/zoofns.h
--- zoo-2.10.orig/zoofns.h	2005-05-25 12:19:53.949761136 +0200
+++ zoo-2.10/zoofns.h	2005-05-25 12:20:05.499005384 +0200
@@ -42,12 +42,12 @@
 int cfactor PARMS ((long, long));
 int chname PARMS ((char *, char *));
 int cmpnum PARMS ((unsigned int, unsigned int, unsigned int, unsigned int));
-T_SIGNAL ctrl_c PARMS ((void));
+T_SIGNAL ctrl_c PARMS ((int));
 int exists PARMS ((char *));
 int getfile PARMS ((ZOOFILE, ZOOFILE, long, int));
 int getutime PARMS ((char *, unsigned *, unsigned *));
 int gettime PARMS ((ZOOFILE, unsigned *, unsigned *));
-T_SIGNAL handle_break PARMS ((void));
+T_SIGNAL handle_break PARMS ((int));
 
 #ifdef USE_ASCII
 int isupper PARMS ((int));
@@ -85,7 +85,7 @@
 void addfname PARMS ((char *, long, unsigned int, unsigned int, 
 							unsigned, unsigned));
 void add_version PARMS ((char *, struct direntry *));
-void basename PARMS ((char *, char []));
+void zoo_basename PARMS ((char *, char []));
 void break_off PARMS ((void));
 void close_file PARMS ((ZOOFILE));
 void comment PARMS ((char *, char *));
diff -Naur zoo-2.10.orig/zooio.h zoo-2.10/zooio.h
--- zoo-2.10.orig/zooio.h	2005-05-25 12:19:53.949761136 +0200
+++ zoo-2.10/zooio.h	2005-05-25 12:20:05.499005384 +0200
@@ -7,6 +7,7 @@
 
 											-- Rahul Dhesi 1988/01/24
 */
+#include "zoo.h"
 #ifndef	OK_STDIO
 #include <stdio.h>
 #define	OK_STDIO
diff -Naur zoo-2.10.orig/zoolist.c zoo-2.10/zoolist.c
--- zoo-2.10.orig/zoolist.c	2005-05-25 12:19:53.949761136 +0200
+++ zoo-2.10/zoolist.c	2005-05-25 12:20:05.500005232 +0200
@@ -47,6 +47,7 @@
 int ver_too_high PARMS((struct zoo_header *));
 int needed PARMS((char *, struct direntry *, struct zoo_header *));
 void printtz PARMS((int));
+int fputchar PARMS ((int));
 
 void zoolist (argv, option, argc)
 char **argv, *option;
@@ -414,7 +415,7 @@
 					if (direntry.fattr == 0)
 						printf ("--- ");
 					else if ((direntry.fattr >> 22) == 1)
-						printf ("%03o ", direntry.fattr & 0x1ff);
+						printf ("%03lo ", direntry.fattr & 0x1ff);
 					else
 						printf ("??? ");
 				}
diff -Naur zoo-2.10.orig/zoopack.c zoo-2.10/zoopack.c
--- zoo-2.10.orig/zoopack.c	2005-05-25 12:19:53.949761136 +0200
+++ zoo-2.10/zoopack.c	2005-05-25 12:20:05.505004472 +0200
@@ -10,6 +10,7 @@
 Copyright (C) 1986, 1987 Rahul Dhesi -- All rights reserved
 (C) Copyright 1988 Rahul Dhesi -- All rights reserved
 */
+#include <unistd.h>
 #include "options.h"
 /* Packs an archive.  The sequence is:
    1. Copy all files from current archive to new one.
@@ -171,8 +172,19 @@
 } else {
    strcpy (temp_file, xes);
 }
-mktemp (temp_file);                    /* ... and make unique */
-new_file = zoocreate (temp_file);
+
+/* make unique name */
+/* my god, this coding style sucks */
+new_file = NOFILE;
+{
+  int fd;
+
+  if ((fd = mkstemp(temp_file)) >= 0) {
+    new_file = zoocreate (temp_file);
+    close(fd);
+  }
+}
+
 if (new_file == NOFILE)
    prterror ('f', "Could not create temporary file %s.\n", temp_file);
 
@@ -388,7 +400,7 @@
 
 /* handle_break() */
 /* Sets break_hit to 1 when called */
-T_SIGNAL handle_break()
+T_SIGNAL handle_break(int dummy)
 {
 #ifndef NOSIGNAL
    signal (SIGINT, SIG_IGN);     /* ignore future control ^Cs for now */
diff -Naur zoo-2.10.orig/zoopack.c.orig zoo-2.10/zoopack.c.orig
--- zoo-2.10.orig/zoopack.c.orig	1970-01-01 01:00:00.000000000 +0100
+++ zoo-2.10/zoopack.c.orig	2005-05-25 12:20:05.506004320 +0200
@@ -0,0 +1,398 @@
+#ifndef LINT
+/* derived from: @(#) zoopack.c 2.16 88/08/22 15:51:20 */
+/*$Source: /usr/home/dhesi/zoo/RCS/zoopack.c,v $*/
+/*$Id: zoopack.c,v 1.5 91/07/09 01:54:17 dhesi Exp $*/
+static char sccsid[]="$Source: /usr/home/dhesi/zoo/RCS/zoopack.c,v $\n\
+$Id: zoopack.c,v 1.5 91/07/09 01:54:17 dhesi Exp $";
+#endif /* LINT */
+
+/*
+Copyright (C) 1986, 1987 Rahul Dhesi -- All rights reserved
+(C) Copyright 1988 Rahul Dhesi -- All rights reserved
+*/
+#include <unistd.h>
+#include "options.h"
+/* Packs an archive.  The sequence is:
+   1. Copy all files from current archive to new one.
+   2. If the user didn't want a backup, delete the old archive
+      else rename it to same name with extension of .BAK.
+   3. Rename temporary archive to old name.
+*/
+
+/* define this to make packing noisless */
+#define QUIETPACK 1
+
+
+#include "portable.h"
+#include "zooio.h"
+#include "various.h"
+#include "zoo.h"
+#include "zoofns.h"
+#include "errors.i"
+#ifndef NOSIGNAL
+#include <signal.h>
+#endif
+
+char *mktemp PARMS((char *));
+
+struct zoo_header zoo_header = {
+   TEXT,
+   ZOO_TAG,
+   (long) SIZ_ZOOH,
+   (long) (-SIZ_ZOOH),
+   MAJOR_VER,
+   MINOR_VER,
+	H_TYPE,
+	0L,						/* comment position */
+	0,							/* comment length */
+	GEN_DEFAULT				/* generations */
+};
+char file_leader[] = FILE_LEADER;
+extern int quiet;
+int break_hit;
+
+int ver_too_high PARMS((struct zoo_header *));
+
+void zoopack(zoo_path, option)
+char *zoo_path, *option;
+{
+char temp_file[PATHSIZE];
+static char xes[]="XXXXXX";               /* template for temp file */
+
+#ifndef NOSIGNAL
+T_SIGNAL (*oldsignal)();
+#endif
+register ZOOFILE zoo_file;                /* archive */
+ZOOFILE new_file;                         /* destination archive */
+long next_ptr;                            /* pointer to within archive */
+long new_dir_pos;                         /* ditto */
+struct direntry direntry;                 /* directory entry */
+struct zoo_header old_zoo_header;         /* just for reading old header */
+int status;                               /* error status */
+int nobackup = 0;                         /* keep backup */
+int force = 0;                            /* force overwrite of old backup */
+int extcount = 0;                         /* how many files moved */
+char backup_name[PATHSIZE];               /* name of backup */
+int bad_header = 0;                       /* if archive has bad header */
+int latest_date = 0;                      /* latest date on any file moved */
+int latest_time = 0;                      /*  ...likewise */
+int curr_dir = 0;									/* create backup in curr dir */
+static char partial_msg[] =
+   "Partially packed archive left in %s.\n";
+
+#ifdef FATTR
+unsigned long zoofattr;							/* zoo archive protection */
+int setfattr PARMS ((char *, unsigned long));
+unsigned long getfattr							/* params below */
+# ifdef FATTR_FNAME
+  PARMS ((char *));
+# else
+  PARMS ((ZOOFILE));
+# endif /* FATTR_FNAME */
+#endif /* FATTR */
+
+while (*option) {
+   switch (*option) {
+      case 'P': force++; break;
+      case 'E': nobackup++; break;
+      case 'q': quiet++; break;
+		case '.': curr_dir++; break;
+      default:
+         prterror ('f', inv_option, *option);
+   }
+   option++;
+}
+if (force == 1)         /* force only if P was doubled */
+   force--;
+
+zoo_path = addext (zoo_path, EXT_DFLT);      /* add default extension */
+
+/* Create a backup name by replacing any extension by backup extension. */
+strcpy (backup_name, zoo_path);
+{
+   char *temp;
+   if ((temp = strrchr (backup_name,EXT_CH)) != 0)  /* if dot found */
+      strcpy (temp, BACKUP_EXT);                /* replace old extension */
+   else
+      strcat (backup_name, BACKUP_EXT);         /* else just append */
+}
+
+/*
+Open original archive for read-write access.  Although we will only
+read from it and never write to it, we want to avoid packing an
+archive that is read-only, since presumably the user didn't want
+to risk changing it in any way.
+*/
+zoo_file = zooopen(zoo_path, Z_RDWR);
+
+if (zoo_file == NOFILE)
+   prterror ('f', could_not_open, zoo_path);
+
+/* If possible, save protection code of old archive for propagation to new */
+#ifdef FATTR
+# ifdef FATTR_FNAME
+   zoofattr = getfattr (zoo_path);
+# else
+   zoofattr = getfattr (zoo_file);
+# endif /* FATTR_FNAME */
+#endif /* FATTR */
+
+/* Read the header of the old archive. */
+frd_zooh(&old_zoo_header, zoo_file);
+
+if ((old_zoo_header.zoo_start + old_zoo_header.zoo_minus) != 0L) {
+   prterror ('w', failed_consistency);
+   ++bad_header;                    /* remember for future error message */
+}
+
+/* Refuse to pack it if its version number is higher than we can accept */
+if (ver_too_high (&old_zoo_header))
+   prterror ('f', wrong_version, old_zoo_header.major_ver,
+                                    old_zoo_header.minor_ver);
+
+/* Now see if the archive already exists with the backup extension.  If so,
+   give an error message and abort.  However, we skip this test if the user
+   specified overwriting the backup */
+
+if (!force) {
+   if (exists (backup_name))
+      prterror ('f', "File %s already exists.  Delete it or use PP option.\n",
+                      backup_name);
+}
+
+/*
+Open the new archive by a temporary name.  If not otherwise specified,
+we open the new archive in the same directory as the original.  But if
+the curr_dir switch was given, we just put XXXXXX into temp_file.
+*/
+if (!curr_dir) {
+	strcpy (temp_file, zoo_path);          /* original archive name */
+	*nameptr (temp_file) = '\0';           /* ... minus original filename */
+	strcat (temp_file, xes);               /* ... plus XXXXXX */
+} else {
+   strcpy (temp_file, xes);
+}
+mktemp (temp_file);                    /* ... and make unique */
+new_file = zoocreate (temp_file);
+if (new_file == NOFILE)
+   prterror ('f', "Could not create temporary file %s.\n", temp_file);
+
+/*
+If old_zoo_header greater than type 0, we update zoo_header as follows:  
+new archive comment will be just after archive header;  zoo_start will 
+point to just beyond archive comment.  But if old_zoo_header is of 
+type 0, we leave zoo_header unchanged.  However, we always 
+unconditionally update the header type to be type H_TYPE.  
+(Note:  zoo_header.type is initialized to H_TYPE in the
+global declaration of zoo_header.)
+*/
+if (old_zoo_header.type > 0) {
+	zoo_header.zoo_start = SIZ_ZOOH + old_zoo_header.acmt_len;
+	zoo_header.zoo_minus = -zoo_header.zoo_start;
+	zoo_header.acmt_pos = SIZ_ZOOH;	/* new comment just after header */
+	zoo_header.acmt_len = old_zoo_header.acmt_len;
+	zoo_header.vdata	  = old_zoo_header.vdata;
+} else /* keep generations off if using old format archive */
+	zoo_header.vdata &=  (~VFL_ON);
+
+/* Write the header of the new archive, updated with our own data */
+fwr_zooh (&zoo_header, new_file);
+
+/* copy archive comment */
+if (old_zoo_header.acmt_len != 0) {
+	zooseek (zoo_file, old_zoo_header.acmt_pos, 0);	/* find archive comment */
+	getfile (zoo_file, new_file, (long) zoo_header.acmt_len, 0); /* copy it */
+}
+
+/* WARNING: CHECK FOR SEEK BEYOND END OF FILE */
+zooseek (new_file, zoo_header.zoo_start, 0);       /* position to add files */
+
+zooseek (zoo_file, old_zoo_header.zoo_start, 0); /* seek to where data begins */
+
+/* Now we loop through the old archive's files and add each to the new
+archive.  The only changes needed are to update the .next and .offset
+fields of the directory entry. */
+
+while (1) {
+   frd_dir(&direntry, zoo_file);
+   if (direntry.zoo_tag != ZOO_TAG) {
+      long currpos, zoolength;
+      prterror ('F', bad_directory);
+      if (bad_header) {    /* bad headers means don't save temp file */
+         zooclose (new_file);
+         unlink (temp_file);
+      } else {
+         writenull (new_file, MAXDIRSIZE);    /* write final null entry */
+         printf (partial_msg, temp_file);
+         if ((currpos = ftell (zoo_file)) != -1L)
+            if (zooseek (zoo_file, 0L, 2) == 0)
+               if ((zoolength = ftell (zoo_file)) != -1L)
+                  printf (cant_process, zoolength - currpos);
+      }
+      zooexit (1);
+   }
+   if (direntry.next == 0L) {                /* END OF CHAIN */
+      break;                                 /* EXIT on end of chain */
+   }
+   next_ptr = direntry.next;                 /* ptr to next dir entry */
+
+   if (!direntry.deleted) {
+#ifdef QUIETPACK
+/* nothing */
+#else
+      prterror ('m', "%-14s -- ",
+         direntry.namlen > 0 ? direntry.lfname : direntry.fname);
+#endif
+
+      if (zooseek (zoo_file, direntry.offset, 0) == -1L) {
+         prterror ('f', "Could not seek to file data.\n");
+      } else {
+         extcount++;          /* update count of files extracted */
+
+         /* write a directory entry for this file */
+         new_dir_pos = zootell (new_file); /* new direntry pos in new archive */
+
+         /*
+         Write a null directory entry to preserve integrity in case of
+         program being interrupted.  Note:  I don't think it is
+         necessary to save direntry.next but I haven't checked.
+         */
+         {
+            long oldnext;
+            oldnext = direntry.next;
+            direntry.next = 0L;
+            fwr_dir(&direntry, new_file);
+            direntry.next = oldnext;
+         }
+
+         zooseek (zoo_file, direntry.offset, 0);  /* where to start copying */
+         /* Write file leader and remember position of new file data */
+         (void) zoowrite (new_file, file_leader, SIZ_FLDR);
+         direntry.offset = zootell (new_file);
+         status = getfile (zoo_file, new_file, direntry.size_now, 0);
+         /* if no error copy any comment attached to file */
+         if (status == 0 && direntry.cmt_size != 0) {
+            zooseek (zoo_file, direntry.comment, 0);  /* seek to old comment  */
+            direntry.comment = zootell (new_file); /* location of new comment */
+            status = getfile (zoo_file, new_file,
+                                 (long) direntry.cmt_size, 0);
+         }
+
+         if (status != 0) {
+            if (status == 1) {
+               memerr(0);
+            } else
+               if (status == 2 || status == 3) {
+                  prterror ('F', disk_full);
+                  printf (partial_msg, temp_file);
+                  zooexit (1);
+               } else
+                  prterror ('f', internal_error);
+         } else {
+            if (latest_date < direntry.date ||
+                     (latest_date == direntry.date &&
+                           latest_time < direntry.time))  {
+               latest_date = direntry.date;
+               latest_time = direntry.time;
+            }
+         }
+         direntry.next = zootell (new_file);
+         zooseek (new_file, new_dir_pos, 0);  /* position to write direntry */
+
+         break_hit = 0;
+#ifndef NOSIGNAL
+         oldsignal = signal (SIGINT, SIG_IGN);
+         if (oldsignal != SIG_IGN)
+            signal (SIGINT, handle_break);
+#endif
+
+			/* Bug fix thanks to Mark Alexander */
+         if (fwr_dir (&direntry, new_file) != -1 &&
+            zoowrite (new_file, file_leader, SIZ_FLDR) == SIZ_FLDR) {
+#ifdef QUIETPACK
+            /* prterror ('M', "."); */ ;
+#else
+            prterror ('M', "moved\n");
+#endif
+         } else
+            prterror ('f', "Write to temporary packed archive %s failed.\n", temp_file);
+#ifndef NOSIGNAL
+         signal (SIGINT, oldsignal);
+#endif
+         if (break_hit)
+            zooexit (1);
+         zooseek (new_file, direntry.next, 0);  /* back to end of new archive */
+      }  /* end if (lseek ... */
+   } /* end if (!direntry.deleted) */
+
+zooseek (zoo_file, next_ptr, 0);   /* ..seek to next dir entry */
+} /* end while */
+
+zooclose (zoo_file);
+
+/* write a final null entry */
+writenull (new_file, MAXDIRSIZE);
+
+#ifdef NIXTIME
+zooclose (new_file);
+setutime (temp_file, latest_date, latest_time);
+#else
+settime (new_file, latest_date, latest_time);    /* adjust its time */
+zooclose (new_file);
+#endif
+
+/* Important note:  At this point, it is assumed that the archive was
+   packed and written to a new file without error.  If control reaches
+   here without the new archive having been written properly, then
+   loss of data due to deletion of the original file could occur.  In
+   other words, if something went wrong, execution MUST NOT reach here. */
+
+if (extcount == 0) {
+   unlink (temp_file);
+   prterror ('m', "No files moved.\n");
+} else {
+   /* (a) if user requested, delete original, else rename it to
+   *.bak.  (b) rename temp file to same base name as zoo_file. */
+
+#ifdef QUIETPACK
+   /* prterror('M', "\n"); */
+#endif
+
+   unlink (backup_name);    /* remove any previous backup in any case */
+   if (nobackup)
+      unlink (zoo_path);
+   else
+      chname (backup_name, zoo_path);
+
+	/* if we are packing into current directory, we will rename temp file
+		to same basename but without the preceding pathname */
+	if (curr_dir)
+		zoo_path = nameptr (zoo_path);		/* strip pathname */
+
+
+   if (chname (zoo_path, temp_file)) {
+      prterror ('w', "Renaming error.  Packed archive is now in %s.\n", temp_file);
+      zooexit (1);
+   }
+
+/*
+Set protection on packed archive -- after renaming, since some
+OSs might not allow renaming of read-only files
+*/
+#ifdef FATTR
+	setfattr (zoo_path, zoofattr);
+#endif /* FATTR */
+
+} /* end if */
+
+} /* end zoopack() */
+
+/* handle_break() */
+/* Sets break_hit to 1 when called */
+T_SIGNAL handle_break(int dummy)
+{
+#ifndef NOSIGNAL
+   signal (SIGINT, SIG_IGN);     /* ignore future control ^Cs for now */
+   break_hit = 1;
+#endif
+}
