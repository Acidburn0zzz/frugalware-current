diff -Naur qt-everywhere-opensource-src-4.6.2/src/gui/painting/qpainter.cpp qt-everywhere-opensource-src-4.6.2-p/src/gui/painting/qpainter.cpp
--- qt-everywhere-opensource-src-4.6.2/src/gui/painting/qpainter.cpp	2010-02-11 16:55:22.000000000 +0100
+++ qt-everywhere-opensource-src-4.6.2-p/src/gui/painting/qpainter.cpp	2010-02-24 00:49:45.000000000 +0100
@@ -150,7 +150,7 @@
             break;
     default:
         if (!extraCondition && QThread::currentThread() != qApp->thread()) {
-            qWarning("QPainter: It is not safe to use %s outside the GUI thread", what);
+            qDebug("QPainter: It is not safe to use %s outside the GUI thread", what);
             return false;
         }
         break;
@@ -246,7 +246,7 @@
         && !widget->testAttribute(Qt::WA_PaintOutsidePaintEvent)
         && !widget->testAttribute(Qt::WA_WState_InPaintEvent)) {
 
-        qWarning("QPainter::begin: Widget painting can only begin as a result of a paintEvent");
+        qDebug("QPainter::begin: Widget painting can only begin as a result of a paintEvent");
         return false;
     }
 
@@ -1543,7 +1543,7 @@
     Q_ASSERT_X(widget, "QPainter::initFrom(const QWidget *widget)", "Widget cannot be 0");
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::initFrom: Painter not active, aborted");
+        qDebug("QPainter::initFrom: Painter not active, aborted");
         return;
     }
 
@@ -1579,7 +1579,7 @@
 #endif
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::save: Painter not active");
+        qDebug("QPainter::save: Painter not active");
         return;
     }
 
@@ -1609,10 +1609,10 @@
 #endif
     Q_D(QPainter);
     if (d->states.size()<=1) {
-        qWarning("QPainter::restore: Unbalanced save/restore");
+        qDebug("QPainter::restore: Unbalanced save/restore");
         return;
     } else if (!d->engine) {
-        qWarning("QPainter::restore: Painter not active");
+        qDebug("QPainter::restore: Painter not active");
         return;
     }
 
@@ -1709,12 +1709,12 @@
     Q_ASSERT(pd);
 
     if (pd->painters > 0) {
-        qWarning("QPainter::begin: A paint device can only be painted by one painter at a time.");
+        qDebug("QPainter::begin: A paint device can only be painted by one painter at a time.");
         return false;
     }
 
     if (d_ptr->engine) {
-        qWarning("QPainter::begin: Painter already active");
+        qDebug("QPainter::begin: Painter already active");
         return false;
     }
 
@@ -1757,7 +1757,7 @@
     d->engine = pd->paintEngine();
 
     if (!d->engine) {
-        qWarning("QPainter::begin: Paint device returned engine == 0, type: %d", pd->devType());
+        qDebug("QPainter::begin: Paint device returned engine == 0, type: %d", pd->devType());
         return false;
     }
 
@@ -1792,7 +1792,7 @@
             const bool inPaintEvent = widget->testAttribute(Qt::WA_WState_InPaintEvent);
             if(!d->engine->hasFeature(QPaintEngine::PaintOutsidePaintEvent)
                 && !paintOutsidePaintEvent && !inPaintEvent) {
-                qWarning("QPainter::begin: Widget painting can only begin as a "
+                qDebug("QPainter::begin: Widget painting can only begin as a "
                          "result of a paintEvent");
                 qt_cleanup_painter_state(d);
                 return false;
@@ -1811,7 +1811,7 @@
             QPixmap *pm = static_cast<QPixmap *>(pd);
             Q_ASSERT(pm);
             if (pm->isNull()) {
-                qWarning("QPainter::begin: Cannot paint on a null pixmap");
+                qDebug("QPainter::begin: Cannot paint on a null pixmap");
                 qt_cleanup_painter_state(d);
                 return false;
             }
@@ -1827,12 +1827,12 @@
             QImage *img = static_cast<QImage *>(pd);
             Q_ASSERT(img);
             if (img->isNull()) {
-                qWarning("QPainter::begin: Cannot paint on a null image");
+                qDebug("QPainter::begin: Cannot paint on a null image");
                 qt_cleanup_painter_state(d);
                 return false;
             } else if (img->format() == QImage::Format_Indexed8) {
                 // Painting on indexed8 images is not supported.
-                qWarning("QPainter::begin: Cannot paint on an image with the QImage::Format_Indexed8 format");
+                qDebug("QPainter::begin: Cannot paint on an image with the QImage::Format_Indexed8 format");
                 qt_cleanup_painter_state(d);
                 return false;
             }
@@ -1852,7 +1852,7 @@
 
     bool begun = d->engine->begin(pd);
     if (!begun) {
-        qWarning("QPainter::begin(): Returned false");
+        qDebug("QPainter::begin(): Returned false");
         if (d->engine->isActive()) {
             end();
         } else {
@@ -1919,7 +1919,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::end: Painter not active, aborted");
+        qDebug("QPainter::end: Painter not active, aborted");
         qt_cleanup_painter_state(d);
         return false;
     }
@@ -1943,7 +1943,7 @@
     }
 
     if (d->states.size() > 1) {
-        qWarning("QPainter::end: Painter ended with %d saved states",
+        qDebug("QPainter::end: Painter ended with %d saved states",
                  d->states.size());
     }
 
@@ -2001,7 +2001,7 @@
 {
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::beginNativePainting: Painter not active");
+        qDebug("QPainter::beginNativePainting: Painter not active");
         return;
     }
 
@@ -2022,7 +2022,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::beginNativePainting: Painter not active");
+        qDebug("QPainter::beginNativePainting: Painter not active");
         return;
     }
 
@@ -2043,7 +2043,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::fontMetrics: Painter not active");
+        qDebug("QPainter::fontMetrics: Painter not active");
         return QFontMetrics(QFont());
     }
     return QFontMetrics(d->state->font);
@@ -2061,7 +2061,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::fontInfo: Painter not active");
+        qDebug("QPainter::fontInfo: Painter not active");
         return QFontInfo(QFont());
     }
     return QFontInfo(d->state->font);
@@ -2078,7 +2078,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::opacity: Painter not active");
+        qDebug("QPainter::opacity: Painter not active");
         return 1.0;
     }
     return d->state->opacity;
@@ -2100,7 +2100,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::setOpacity: Painter not active");
+        qDebug("QPainter::setOpacity: Painter not active");
         return;
     }
 
@@ -2128,7 +2128,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::brushOrigin: Painter not active");
+        qDebug("QPainter::brushOrigin: Painter not active");
         return QPoint();
     }
     return QPointF(d->state->brushOrigin).toPoint();
@@ -2161,7 +2161,7 @@
 #endif
 
     if (!d->engine) {
-        qWarning("QPainter::setBrushOrigin: Painter not active");
+        qDebug("QPainter::setBrushOrigin: Painter not active");
         return;
     }
 
@@ -2371,7 +2371,7 @@
 {
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::setCompositionMode: Painter not active");
+        qDebug("QPainter::setCompositionMode: Painter not active");
         return;
     }
     if (d->extended) {
@@ -2382,19 +2382,19 @@
 
     if (mode >= QPainter::RasterOp_SourceOrDestination) {
         if (!d->engine->hasFeature(QPaintEngine::RasterOpModes)) {
-            qWarning("QPainter::setCompositionMode: "
+            qDebug("QPainter::setCompositionMode: "
                      "Raster operation modes not supported on device");
             return;
         }
     } else if (mode >= QPainter::CompositionMode_Plus) {
         if (!d->engine->hasFeature(QPaintEngine::BlendModes)) {
-            qWarning("QPainter::setCompositionMode: "
+            qDebug("QPainter::setCompositionMode: "
                      "Blend modes not supported on device");
             return;
         }
     } else if (!d->engine->hasFeature(QPaintEngine::PorterDuff)) {
         if (mode != CompositionMode_Source && mode != CompositionMode_SourceOver) {
-            qWarning("QPainter::setCompositionMode: "
+            qDebug("QPainter::setCompositionMode: "
                      "PorterDuff modes not supported on device");
             return;
         }
@@ -2413,7 +2413,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::compositionMode: Painter not active");
+        qDebug("QPainter::compositionMode: Painter not active");
         return QPainter::CompositionMode_SourceOver;
     }
     return d->state->composition_mode;
@@ -2429,7 +2429,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::background: Painter not active");
+        qDebug("QPainter::background: Painter not active");
         return d->fakeState()->brush;
     }
     return d->state->bgBrush;
@@ -2446,7 +2446,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::hasClipping: Painter not active");
+        qDebug("QPainter::hasClipping: Painter not active");
         return false;
     }
     return d->state->clipEnabled && d->state->clipOperation != Qt::NoClip;
@@ -2470,7 +2470,7 @@
                hasClipping() ? "on" : "off");
 #endif
     if (!d->engine) {
-        qWarning("QPainter::setClipping: Painter not active, state will be reset by begin");
+        qDebug("QPainter::setClipping: Painter not active, state will be reset by begin");
         return;
     }
 
@@ -2509,7 +2509,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::clipRegion: Painter not active");
+        qDebug("QPainter::clipRegion: Painter not active");
         return QRegion();
     }
 
@@ -2640,7 +2640,7 @@
     // ### Since we do not support path intersections and path unions yet,
     // we just use clipRegion() here...
     if (!d->engine) {
-        qWarning("QPainter::clipPath: Painter not active");
+        qDebug("QPainter::clipPath: Painter not active");
         return QPainterPath();
     }
 
@@ -2693,7 +2693,7 @@
             op = Qt::ReplaceClip;
 
         if (!d->engine) {
-            qWarning("QPainter::setClipRect: Painter not active");
+            qDebug("QPainter::setClipRect: Painter not active");
             return;
         }
         qreal right = rect.x() + rect.width();
@@ -2743,7 +2743,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::setClipRect: Painter not active");
+        qDebug("QPainter::setClipRect: Painter not active");
         return;
     }
 
@@ -2798,7 +2798,7 @@
            r.rects().size(), rect.x(), rect.y(), rect.width(), rect.height());
 #endif
     if (!d->engine) {
-        qWarning("QPainter::setClipRegion: Painter not active");
+        qDebug("QPainter::setClipRegion: Painter not active");
         return;
     }
 
@@ -2891,7 +2891,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::worldMatrix: Painter not active");
+        qDebug("QPainter::worldMatrix: Painter not active");
         return d->fakeState()->transform.toAffine();
     }
     return d->state->worldMatrix.toAffine();
@@ -2965,7 +2965,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::deviceMatrix: Painter not active");
+        qDebug("QPainter::deviceMatrix: Painter not active");
         return d->fakeState()->transform.toAffine();
     }
     return d->state->matrix.toAffine();
@@ -3011,7 +3011,7 @@
 #endif
 
     if (!d->engine) {
-        qWarning("QPainter::setMatrixEnabled: Painter not active");
+        qDebug("QPainter::setMatrixEnabled: Painter not active");
         return;
     }
     if (enable == d->state->WxF)
@@ -3034,7 +3034,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::worldMatrixEnabled: Painter not active");
+        qDebug("QPainter::worldMatrixEnabled: Painter not active");
         return false;
     }
     return d->state->WxF;
@@ -3081,7 +3081,7 @@
 #endif
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::scale: Painter not active");
+        qDebug("QPainter::scale: Painter not active");
         return;
     }
 
@@ -3105,7 +3105,7 @@
 #endif
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::shear: Painter not active");
+        qDebug("QPainter::shear: Painter not active");
         return;
     }
 
@@ -3131,7 +3131,7 @@
 #endif
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::rotate: Painter not active");
+        qDebug("QPainter::rotate: Painter not active");
         return;
     }
 
@@ -3157,7 +3157,7 @@
 #endif
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::translate: Painter not active");
+        qDebug("QPainter::translate: Painter not active");
         return;
     }
 
@@ -3204,7 +3204,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::setClipPath: Painter not active");
+        qDebug("QPainter::setClipPath: Painter not active");
         return;
     }
 
@@ -3242,7 +3242,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::strokePath: Painter not active");
+        qDebug("QPainter::strokePath: Painter not active");
         return;
     }
 
@@ -3285,7 +3285,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::fillPath: Painter not active");
+        qDebug("QPainter::fillPath: Painter not active");
         return;
     }
 
@@ -3340,7 +3340,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::drawPath: Painter not active");
+        qDebug("QPainter::drawPath: Painter not active");
         return;
     }
 
@@ -3453,7 +3453,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::drawRects: Painter not active");
+        qDebug("QPainter::drawRects: Painter not active");
         return;
     }
 
@@ -3513,7 +3513,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::drawRects: Painter not active");
+        qDebug("QPainter::drawRects: Painter not active");
         return;
     }
 
@@ -3613,7 +3613,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::drawPoints: Painter not active");
+        qDebug("QPainter::drawPoints: Painter not active");
         return;
     }
 
@@ -3675,7 +3675,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::drawPoints: Painter not active");
+        qDebug("QPainter::drawPoints: Painter not active");
         return;
     }
 
@@ -3783,7 +3783,7 @@
 
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::setBackgroundMode: Painter not active");
+        qDebug("QPainter::setBackgroundMode: Painter not active");
         return;
     }
     if (d->state->bgMode == mode)
@@ -3806,7 +3806,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::backgroundMode: Painter not active");
+        qDebug("QPainter::backgroundMode: Painter not active");
         return Qt::TransparentMode;
     }
     return d->state->bgMode;
@@ -3828,7 +3828,7 @@
 #endif
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::setPen: Painter not active");
+        qDebug("QPainter::setPen: Painter not active");
         return;
     }
 
@@ -3866,7 +3866,7 @@
 #endif
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::setPen: Painter not active");
+        qDebug("QPainter::setPen: Painter not active");
         return;
     }
 
@@ -3895,7 +3895,7 @@
 {
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::setPen: Painter not active");
+        qDebug("QPainter::setPen: Painter not active");
         return;
     }
 
@@ -3926,7 +3926,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::pen: Painter not active");
+        qDebug("QPainter::pen: Painter not active");
         return d->fakeState()->pen;
     }
     return d->state->pen;
@@ -3949,7 +3949,7 @@
 #endif
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::setBrush: Painter not active");
+        qDebug("QPainter::setBrush: Painter not active");
         return;
     }
 
@@ -3979,7 +3979,7 @@
 {
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::setBrush: Painter not active");
+        qDebug("QPainter::setBrush: Painter not active");
         return;
     }
     if (d->state->brush.style() == style &&
@@ -4003,7 +4003,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::brush: Painter not active");
+        qDebug("QPainter::brush: Painter not active");
         return d->fakeState()->brush;
     }
     return d->state->brush;
@@ -4031,7 +4031,7 @@
 
     Q_D(QPainter);
     if (!d->engine) {
-        qWarning("QPainter::setBackground: Painter not active");
+        qDebug("QPainter::setBackground: Painter not active");
         return;
     }
     d->state->bgBrush = bg;
@@ -4062,7 +4062,7 @@
 #endif
 
     if (!d->engine) {
-        qWarning("QPainter::setFont: Painter not active");
+        qDebug("QPainter::setFont: Painter not active");
         return;
     }
 
@@ -4080,7 +4080,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::font: Painter not active");
+        qDebug("QPainter::font: Painter not active");
         return d->fakeState()->font;
     }
     return d->state->font;
@@ -6819,7 +6819,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::setRenderHint: Painter must be active to set rendering hints");
+        qDebug("QPainter::setRenderHint: Painter must be active to set rendering hints");
         return;
     }
 
@@ -6870,7 +6870,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::viewTransformEnabled: Painter not active");
+        qDebug("QPainter::viewTransformEnabled: Painter not active");
         return false;
     }
     return d->state->VxF;
@@ -6911,7 +6911,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::setWindow: Painter not active");
+        qDebug("QPainter::setWindow: Painter not active");
         return;
     }
 
@@ -6934,7 +6934,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::window: Painter not active");
+        qDebug("QPainter::window: Painter not active");
         return QRect();
     }
     return QRect(d->state->wx, d->state->wy, d->state->ww, d->state->wh);
@@ -6975,7 +6975,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::setViewport: Painter not active");
+        qDebug("QPainter::setViewport: Painter not active");
         return;
     }
 
@@ -6998,7 +6998,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::viewport: Painter not active");
+        qDebug("QPainter::viewport: Painter not active");
         return QRect();
     }
     return QRect(d->state->vx, d->state->vy, d->state->vw, d->state->vh);
@@ -7051,7 +7051,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::setViewTransformEnabled: Painter not active");
+        qDebug("QPainter::setViewTransformEnabled: Painter not active");
         return;
     }
 
@@ -7081,7 +7081,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::translationX: Painter not active");
+        qDebug("QPainter::translationX: Painter not active");
         return 0.0;
     }
     return d->state->worldMatrix.dx();
@@ -7104,7 +7104,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::translationY: Painter not active");
+        qDebug("QPainter::translationY: Painter not active");
         return 0.0;
     }
     return d->state->worldMatrix.dy();
@@ -7136,7 +7136,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::xForm: Painter not active");
+        qDebug("QPainter::xForm: Painter not active");
         return QPoint();
     }
     if (d->state->matrix.type() == QTransform::TxNone)
@@ -7157,7 +7157,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::xForm: Painter not active");
+        qDebug("QPainter::xForm: Painter not active");
         return QRect();
     }
     if (d->state->matrix.type() == QTransform::TxNone)
@@ -7176,7 +7176,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::xForm: Painter not active");
+        qDebug("QPainter::xForm: Painter not active");
         return QPolygon();
     }
     if (d->state->matrix.type() == QTransform::TxNone)
@@ -7227,7 +7227,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::xFormDev: Painter not active");
+        qDebug("QPainter::xFormDev: Painter not active");
         return QPoint();
     }
     if(d->state->matrix.type() == QTransform::TxNone)
@@ -7256,7 +7256,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::xFormDev: Painter not active");
+        qDebug("QPainter::xFormDev: Painter not active");
         return QRect();
     }
     if (d->state->matrix.type() == QTransform::TxNone)
@@ -7285,7 +7285,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::xFormDev: Painter not active");
+        qDebug("QPainter::xFormDev: Painter not active");
         return QPolygon();
     }
     if (d->state->matrix.type() == QTransform::TxNone)
@@ -7352,7 +7352,7 @@
         return;
 
     if ((int)a.size() - index < 4) {
-        qWarning("QPainter::drawCubicBezier: Cubic Bezier needs 4 control "
+        qDebug("QPainter::drawCubicBezier: Cubic Bezier needs 4 control "
                   "points");
         return;
     }
@@ -7901,7 +7901,7 @@
         pt.drawPixmap(dp, *pixmap, sr);
 
     } else {
-        qWarning("QPainter: bitBlt only works when source is of type pixmap");
+        qDebug("QPainter: bitBlt only works when source is of type pixmap");
     }
 }
 
@@ -8599,7 +8599,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::deviceTransform: Painter not active");
+        qDebug("QPainter::deviceTransform: Painter not active");
         return d->fakeState()->transform;
     }
     return d->state->matrix;
@@ -8622,7 +8622,7 @@
         printf("QPainter::resetMatrix()\n");
 #endif
     if (!d->engine) {
-        qWarning("QPainter::resetMatrix: Painter not active");
+        qDebug("QPainter::resetMatrix: Painter not active");
         return;
     }
 
@@ -8651,7 +8651,7 @@
     Q_D(QPainter);
 
     if (!d->engine) {
-        qWarning("QPainter::setWorldTransform: Painter not active");
+        qDebug("QPainter::setWorldTransform: Painter not active");
         return;
     }
 
@@ -8672,7 +8672,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::worldTransform: Painter not active");
+        qDebug("QPainter::worldTransform: Painter not active");
         return d->fakeState()->transform;
     }
     return d->state->worldMatrix;
@@ -8689,7 +8689,7 @@
 {
     Q_D(const QPainter);
     if (!d->engine) {
-        qWarning("QPainter::combinedTransform: Painter not active");
+        qDebug("QPainter::combinedTransform: Painter not active");
         return QTransform();
     }
     return d->state->worldMatrix * d->viewTransform();
