--- trunk/GG/Control.h	2008/05/11 02:49:22	647
+++ trunk/GG/Control.h	2008/11/15 17:08:16	658
@@ -31,8 +31,6 @@
 
 #include <GG/Wnd.h>
 
-#include <boost/serialization/is_abstract.hpp>
-
 
 namespace GG {
 
@@ -83,8 +81,6 @@
 
 } // namespace GG
 
-BOOST_IS_ABSTRACT(GG::Control);
-
 // template implementations
 template <class Archive>
 void GG::Control::serialize(Archive& ar, const unsigned int version)

--- trunk/GG/BrowseInfoWnd.h	2008/05/11 02:49:22	647
+++ trunk/GG/BrowseInfoWnd.h	2008/11/15 17:08:16	658
@@ -33,7 +33,6 @@
 #include <GG/Wnd.h>
 #include <GG/Font.h>
 
-#include <boost/serialization/is_abstract.hpp>
 #include <boost/serialization/version.hpp>
 
 
@@ -150,7 +149,6 @@
 
 } // namespace GG
 
-BOOST_IS_ABSTRACT(GG::BrowseInfoWnd);
 BOOST_CLASS_VERSION(GG::BrowseInfoWnd, 1);
 BOOST_CLASS_VERSION(GG::TextBoxBrowseInfoWnd, 1);
 

--- GG-0.7.0/src/dialogs/FileDlg.cpp	2009-09-11 21:46:04.000000000 +0200
+++ GG-0.7.0/src/dialogs/FileDlg.cpp	2009-09-11 21:57:46.000000000 +0200
@@ -42,10 +42,10 @@
 
 #include <boost/algorithm/string/predicate.hpp>
 #include <boost/filesystem/operations.hpp>
-#include <boost/filesystem/cerrno.hpp>
 #include <boost/format.hpp>
 #include <boost/spirit.hpp>
 #include <boost/spirit/dynamic.hpp>
+#include <boost/system/system_error.hpp>
 
 
 using namespace GG;
@@ -704,7 +704,7 @@
         }
         for (fs::directory_iterator it(s_working_dir); it != end_it; ++it) {
             try {
-                if (fs::exists(*it) && fs::is_directory(*it) && it->leaf()[0] != '.') {
+                if (fs::exists(*it) && fs::is_directory(*it) && it->filename()[0] != '.') {
                     ListBox::Row* row = new ListBox::Row();
                     row->push_back("[" + it->leaf() + "]", m_font, m_text_color);
                     m_files_list->Insert(row);
@@ -718,12 +718,12 @@
                     if (fs::exists(*it) && !fs::is_directory(*it) && it->leaf()[0] != '.') {
                         bool meets_filters = file_filters.empty();
                         for (unsigned int i = 0; i < file_filters.size() && !meets_filters; ++i) {
-                            if (parse(it->leaf().c_str(), file_filters[i]).full)
+                            if (parse(it->filename().c_str(), file_filters[i]).full)
                                 meets_filters = true;
                         }
                         if (meets_filters) {
                             ListBox::Row* row = new ListBox::Row();
-                            row->push_back(it->leaf(), m_font, m_text_color);
+                            row->push_back(it->filename(), m_font, m_text_color);
                             m_files_list->Insert(row);
                         }
                     }
@@ -796,7 +796,7 @@
                 try {
                     SetWorkingDirectory(fs::path(directory + "\\"));
                 } catch (const fs::filesystem_error& e) {
-                    if (e.system_error() == EIO) {
+                     if (e.code() == boost::system::posix_error::io_error) {
                         m_in_win32_drive_selection = true;
                         m_files_edit->Clear();
                         m_curr_dir_text->SetText("");
