One of the errors:
make[2]: Entering directory `/var/tmp/fst/src/efltk/src/core'
Compiling Fl.cpp...
/var/tmp/fst/src/efltk/efltk/Fl_Flags.h: In constructor 'Fl_Flags::Fl_Flags(void*)':
/var/tmp/fst/src/efltk/efltk/Fl_Flags.h:92: error: cast from 'void*' to 'int' loses precision
/var/tmp/fst/src/efltk/efltk/Fl_Int_List.h: In member function 'int Fl_Int_List::item(uint) const':
/var/tmp/fst/src/efltk/efltk/Fl_Int_List.h:46: error: cast from 'void*' to 'int' loses precision
/var/tmp/fst/src/efltk/efltk/Fl_Widget.h: In static member function 'static void Fl_Widget::cb_i_slot_active(void*, void*, i
nt, void*, void*)':
/var/tmp/fst/src/efltk/efltk/Fl_Widget.h:366: error: cast from 'void*' to 'int' loses precision
/var/tmp/fst/src/efltk/efltk/Fl_Widget.h: In static member function 'static void Fl_Widget::cb_i_slot_visibility(void*, void
*, int, void*, void*)':
/var/tmp/fst/src/efltk/efltk/Fl_Widget.h:367: error: cast from 'void*' to 'int' loses precision
make[2]: *** [Fl.shared.o] Error 1
make[2]: Leaving directory `/var/tmp/fst/src/efltk/src/core'
make[1]: *** [shared] Error 2
make[1]: Leaving directory `/var/tmp/fst/src/efltk/src'
make: *** [all] Error 2
Casting void* to int is not a good idea, let's use long instead.
--- ./src/widgets/Fl_Calendar.cpp.orig	2006-11-18 03:15:00.000000000 +0100
+++ ./src/widgets/Fl_Calendar.cpp	2006-11-18 03:15:20.000000000 +0100
@@ -43,13 +43,13 @@
 // Callback function for day buttons
 void Fl_Calendar::cbDayButtonClicked(Fl_Widget *button, void *param) {
     Fl_Calendar *c = (Fl_Calendar *)button->parent()->parent();
-    c->dayButtonClicked((unsigned)param);
+    c->dayButtonClicked((unsigned long)param);
 }
 
 // Callback function for switch buttons
 void Fl_Calendar::cbSwitchButtonClicked(Fl_Widget *button, void *param) {
     Fl_Calendar *c = (Fl_Calendar *)button->parent();
-    c->switchButtonClicked((int)param);
+    c->switchButtonClicked((long)param);
 }
 
 void Fl_Calendar::dayButtonClicked(unsigned day) {
--- ./src/widgets/Fl_Input.cpp.orig	2006-11-18 03:15:44.000000000 +0100
+++ ./src/widgets/Fl_Input.cpp	2006-11-18 03:15:52.000000000 +0100
@@ -59,7 +59,7 @@
 static void cb_menu(Fl_Widget *w, void *d)
 {
     if(!menu_widget) return;
-    switch((int)d) {
+    switch((long)d) {
         case CUT:
             menu_widget->copy(true);
             menu_widget->cut();
--- ./src/widgets/Fl_Text_Editor.cpp.orig	2006-11-18 03:16:26.000000000 +0100
+++ ./src/widgets/Fl_Text_Editor.cpp	2006-11-18 03:16:35.000000000 +0100
@@ -45,7 +45,7 @@
 {
     if(!menu_widget) return;
     char *selection = 0;
-    switch((int)d) {
+    switch((long)d) {
         case COPY:
             selection = (char *)menu_widget->buffer()->selection_text();
             if(*selection) {
--- ./efltk/db/Fl_Params.h.orig	2006-11-18 03:13:58.000000000 +0100
+++ ./efltk/db/Fl_Params.h	2006-11-18 03:14:25.000000000 +0100
@@ -45,7 +45,7 @@
     void       bind_clear() { m_bindParamIndexes.clear(); }
     void       bind_add(unsigned bindIndex);
     unsigned   bind_count() { return m_bindParamIndexes.count(); }
-    unsigned   bind_index(unsigned ind) { return (unsigned)m_bindParamIndexes[ind]; }
+    unsigned   bind_index(unsigned ind) { return (unsigned long)m_bindParamIndexes[ind]; }
 
     // ASSIGNMENT OPERATORS
     Fl_Variant& operator =(const Fl_Variant &C) {
--- ./efltk/Fl_Flags.h.orig	2006-11-18 03:10:46.000000000 +0100
+++ ./efltk/Fl_Flags.h	2006-11-18 03:11:22.000000000 +0100
@@ -89,7 +89,7 @@
     Fl_Flags(long flags) : m_flags(flags) { }
     Fl_Flags(unsigned flags) : m_flags(flags) { }
     Fl_Flags(int flags) : m_flags(flags) { }
-    Fl_Flags(void* flags) : m_flags((int)flags) { }
+    Fl_Flags(void* flags) : m_flags((long)flags) { }
     Fl_Flags() : m_flags(0) { }
 
     bool is_set(int flags) const { return (m_flags&flags)!=0; }
--- ./efltk/Fl_Int_List.h.orig	2006-11-18 03:11:34.000000000 +0100
+++ ./efltk/Fl_Int_List.h	2006-11-18 03:11:45.000000000 +0100
@@ -43,7 +43,7 @@
     char *to_string(const char *separator=",");
     void from_string(const char * s, const char * separator=",");
 
-    int item(uint index) const { return (int)Fl_Ptr_List::item(index); }
+    int item(uint index) const { return (long)Fl_Ptr_List::item(index); }
     int &operator [](uint ind) const { return (int&)items[ind]; }
 };
 
--- ./efltk/Fl_Widget.h.orig	2006-11-18 03:12:03.000000000 +0100
+++ ./efltk/Fl_Widget.h	2006-11-18 03:12:16.000000000 +0100
@@ -363,8 +363,8 @@
 public:
     /* Define default slots */
     DEFSLOT_O(Fl_Widget, Fl_Widget, slot_label, const char *);
-    DEFSLOT_O(Fl_Widget, Fl_Widget, slot_active, int);
-    DEFSLOT_O(Fl_Widget, Fl_Widget, slot_visibility, int);
+    DEFSLOT_O(Fl_Widget, Fl_Widget, slot_active, long);
+    DEFSLOT_O(Fl_Widget, Fl_Widget, slot_visibility, long);
 
 	/**
 	 * Change label of widget. This function redraws label also.
--- ./tools/efluid/Fl_Widget_Type.cpp.orig	2006-11-18 03:17:49.000000000 +0100
+++ ./tools/efluid/Fl_Widget_Type.cpp	2006-11-18 03:18:33.000000000 +0100
@@ -608,7 +608,7 @@
         i->value(e ? e-whenmenu : 0);
     } else {
         int m = i->value();
-        int n = int(whenmenu[m].compiled);
+        int n = long(whenmenu[m].compiled);
         for_all_selected_widgets() {
             modflag = 1;
             Fl_Widget_Type* q = (Fl_Widget_Type*)o;
@@ -1209,7 +1209,7 @@
         int fval = 0, val = current_widget->o->layout_align();
         const Enumeration *e;
         for(e = layoutalignmenu; e->menu_entry; e++, fval++){
-            if (val == (int)e->compiled) break;
+            if (val == (long)e->compiled) break;
         }
         if (e->menu_entry == 0) fval = 0;
         i->value(fval);
@@ -1218,7 +1218,7 @@
 
         for_all_selected_widgets() {
             Fl_Widget_Type* q = (Fl_Widget_Type*)o;
-            int al = (int)layoutalignmenu[i->value()].compiled;
+            int al = (long)layoutalignmenu[i->value()].compiled;
             int oal = q->o->layout_align();
             if (al != oal) {
                 q->o->layout_align((Fl_AlignEnum)al);
@@ -1515,7 +1515,7 @@
         i->redraw();
     } else {
         const Enumeration* table = current_widget->subtypes();
-        int n = int(table[i->value()].compiled);
+        int n = long(table[i->value()].compiled);
         for_all_selected_widgets() {
             modflag = 1;
             Fl_Widget_Type* q = (Fl_Widget_Type*)o;
--- ./tools/efluid/Fl_Type.cpp.orig	2006-11-18 03:18:45.000000000 +0100
+++ ./tools/efluid/Fl_Type.cpp	2006-11-18 03:19:01.000000000 +0100
@@ -67,7 +67,7 @@
 const Enumeration* from_value(int data, const Enumeration* table)
 {
   for (;table->menu_entry; table++)
-    if (int(table->compiled) == data) return table;
+    if (long(table->compiled) == data) return table;
   return 0;
 }
 
@@ -99,7 +99,7 @@
 {
   if (table) {
     const Enumeration* t = from_text(text, table);
-    if (t) return int(t->compiled);
+    if (t) return long(t->compiled);
   }
   return strtol(text, 0, 0);
 }
