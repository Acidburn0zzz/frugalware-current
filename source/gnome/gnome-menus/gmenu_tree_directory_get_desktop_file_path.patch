diff -urN gnome-menus-2.14.0.old/libmenu/desktop-entries.c gnome-menus-2.14.0/libmenu/desktop-entries.c
--- gnome-menus-2.14.0.old/libmenu/desktop-entries.c	2006-04-21 14:18:57.000000000 -0500
+++ gnome-menus-2.14.0/libmenu/desktop-entries.c	2006-04-21 14:19:10.000000000 -0500
@@ -47,6 +47,7 @@
   char *comment;
   char *icon;
   char *exec;
+  gboolean terminal;
 
   guint type : 2;
   guint flags : 4;
@@ -278,7 +279,10 @@
   retval->categories = get_categories_from_key_file (retval, key_file, desktop_entry_group);
 
   if (entry->type == DESKTOP_ENTRY_DESKTOP)
-    retval->exec = g_key_file_get_string (key_file, desktop_entry_group, "Exec", NULL);
+    {
+      retval->exec = g_key_file_get_string (key_file, desktop_entry_group, "Exec", NULL);
+      retval->terminal = g_key_file_get_boolean (key_file, desktop_entry_group, "Terminal", NULL);
+    }
   
 #undef GET_LOCALE_STRING
 
@@ -356,6 +360,7 @@
   g_free (entry->exec);
   entry->exec = NULL;
 
+  entry->terminal = 0;
   entry->flags = 0;
 
   return desktop_entry_load (entry);
@@ -391,6 +396,7 @@
   retval->comment  = g_strdup (entry->comment);
   retval->icon     = g_strdup (entry->icon);
   retval->exec     = g_strdup (entry->exec);
+  retval->terminal = entry->terminal;
   retval->flags    = entry->flags;
 
   i = 0;
@@ -488,6 +494,12 @@
 }
 
 gboolean
+desktop_entry_get_launch_in_terminal (DesktopEntry *entry)
+{
+  return entry->terminal;
+}
+
+gboolean
 desktop_entry_get_hidden (DesktopEntry *entry)
 {
   return (entry->flags & DESKTOP_ENTRY_HIDDEN) != 0;
diff -urN gnome-menus-2.14.0.old/libmenu/desktop-entries.h gnome-menus-2.14.0/libmenu/desktop-entries.h
--- gnome-menus-2.14.0.old/libmenu/desktop-entries.h	2006-04-21 14:18:57.000000000 -0500
+++ gnome-menus-2.14.0/libmenu/desktop-entries.h	2006-04-21 14:19:10.000000000 -0500
@@ -44,10 +44,11 @@
 const char       *desktop_entry_get_path     (DesktopEntry *entry);
 const char       *desktop_entry_get_basename (DesktopEntry *entry);
 
-const char *desktop_entry_get_name    (DesktopEntry *entry);
-const char *desktop_entry_get_comment (DesktopEntry *entry);
-const char *desktop_entry_get_icon    (DesktopEntry *entry);
-const char *desktop_entry_get_exec    (DesktopEntry *entry);
+const char *desktop_entry_get_name               (DesktopEntry *entry);
+const char *desktop_entry_get_comment            (DesktopEntry *entry);
+const char *desktop_entry_get_icon               (DesktopEntry *entry);
+const char *desktop_entry_get_exec               (DesktopEntry *entry);
+gboolean    desktop_entry_get_launch_in_terminal (DesktopEntry *entry);
 
 gboolean desktop_entry_get_hidden         (DesktopEntry *entry);
 gboolean desktop_entry_get_no_display     (DesktopEntry *entry);
diff -urN gnome-menus-2.14.0.old/libmenu/gmenu-tree.c gnome-menus-2.14.0/libmenu/gmenu-tree.c
--- gnome-menus-2.14.0.old/libmenu/gmenu-tree.c	2006-04-21 14:18:57.000000000 -0500
+++ gnome-menus-2.14.0/libmenu/gmenu-tree.c	2006-04-21 14:19:22.000000000 -0500
@@ -975,6 +975,17 @@
 }
 
 const char *
+gmenu_tree_directory_get_desktop_file_path (GMenuTreeDirectory *directory)
+{
+  g_return_val_if_fail (directory != NULL, NULL);
+
+  if (!directory->directory_entry)
+    return NULL;
+
+  return desktop_entry_get_path (directory->directory_entry);
+}
+
+const char *
 gmenu_tree_directory_get_menu_id (GMenuTreeDirectory *directory)
 {
   g_return_val_if_fail (directory != NULL, NULL);
@@ -1090,6 +1101,14 @@
   return desktop_entry_get_exec (entry->desktop_entry);
 }
 
+gboolean
+gmenu_tree_entry_get_launch_in_terminal (GMenuTreeEntry *entry)
+{
+  g_return_val_if_fail (entry != NULL, NULL);
+
+  return desktop_entry_get_launch_in_terminal (entry->desktop_entry);
+}
+
 const char *
 gmenu_tree_entry_get_desktop_file_path (GMenuTreeEntry *entry)
 {
diff -urN gnome-menus-2.14.0.old/libmenu/gmenu-tree.h gnome-menus-2.14.0/libmenu/gmenu-tree.h
--- gnome-menus-2.14.0.old/libmenu/gmenu-tree.h	2006-04-21 14:18:57.000000000 -0500
+++ gnome-menus-2.14.0/libmenu/gmenu-tree.h	2006-04-21 14:19:22.000000000 -0500
@@ -99,6 +99,7 @@
 const char *gmenu_tree_directory_get_name     (GMenuTreeDirectory *directory);
 const char *gmenu_tree_directory_get_comment  (GMenuTreeDirectory *directory);
 const char *gmenu_tree_directory_get_icon     (GMenuTreeDirectory *directory);
+const char *gmenu_tree_directory_get_desktop_file_path (GMenuTreeDirectory *directory);
 const char *gmenu_tree_directory_get_menu_id  (GMenuTreeDirectory *directory);
 GMenuTree  *gmenu_tree_directory_get_tree     (GMenuTreeDirectory *directory);
 
@@ -108,10 +109,11 @@
 				      GMenuTreeEntry     *entry);
 
 
-const char *gmenu_tree_entry_get_name    (GMenuTreeEntry *entry);
-const char *gmenu_tree_entry_get_comment (GMenuTreeEntry *entry);
-const char *gmenu_tree_entry_get_icon    (GMenuTreeEntry *entry);
-const char *gmenu_tree_entry_get_exec    (GMenuTreeEntry *entry);
+const char *gmenu_tree_entry_get_name               (GMenuTreeEntry *entry);
+const char *gmenu_tree_entry_get_comment            (GMenuTreeEntry *entry);
+const char *gmenu_tree_entry_get_icon               (GMenuTreeEntry *entry);
+const char *gmenu_tree_entry_get_exec               (GMenuTreeEntry *entry);
+gboolean    gmenu_tree_entry_get_launch_in_terminal (GMenuTreeEntry *entry);
 
 const char *gmenu_tree_entry_get_desktop_file_path (GMenuTreeEntry *entry);
 const char *gmenu_tree_entry_get_desktop_file_id   (GMenuTreeEntry *entry);
diff -urN gnome-menus-2.14.0.old/python/gmenu.c gnome-menus-2.14.0/python/gmenu.c
--- gnome-menus-2.14.0.old/python/gmenu.c	2006-04-21 14:18:57.000000000 -0500
+++ gnome-menus-2.14.0/python/gmenu.c	2006-04-21 14:19:22.000000000 -0500
@@ -351,6 +351,31 @@
 }
 
 static PyObject *
+pygmenu_tree_directory_get_desktop_file_path (PyObject *self,
+				    PyObject *args)
+{
+  PyGMenuTreeDirectory *directory;
+  const char           *path;
+
+  if (args != NULL)
+    {
+      if (!PyArg_ParseTuple (args, ":gmenu.Directory.get_desktop_file_path"))
+	return NULL;
+    }
+
+  directory = (PyGMenuTreeDirectory *) self;
+
+  path = gmenu_tree_directory_get_desktop_file_path (GMENU_TREE_DIRECTORY (directory->item));
+  if (path == NULL)
+    {
+      Py_INCREF (Py_None);
+      return Py_None;
+    }
+
+  return PyString_FromString (path);
+}
+
+static PyObject *
 pygmenu_tree_directory_get_menu_id (PyObject *self,
 				    PyObject *args)
 {
@@ -446,13 +471,14 @@
 
       if (!strcmp (attr, "__members__"))
 	{
-	  return Py_BuildValue ("[ssssssss]",
+	  return Py_BuildValue ("[sssssssss]",
 				"type",
 				"parent",
 				"contents",
 				"name",
 				"comment",
 				"icon",
+				"desktop_file_path",
 				"menu_id",
 				"tree");
 	}
@@ -480,6 +506,10 @@
 	{
 	  return pygmenu_tree_directory_get_icon ((PyObject *) self, NULL);
 	}
+      else if (!strcmp (attr, "desktop_file_path"))
+	{
+	  return pygmenu_tree_directory_get_desktop_file_path ((PyObject *) self, NULL);
+	}
       else if (!strcmp (attr, "menu_id"))
 	{
 	  return pygmenu_tree_directory_get_menu_id ((PyObject *) self, NULL);
@@ -499,6 +529,7 @@
   { "get_name",     pygmenu_tree_directory_get_name,     METH_VARARGS },
   { "get_comment",  pygmenu_tree_directory_get_comment,  METH_VARARGS },
   { "get_icon",     pygmenu_tree_directory_get_icon,     METH_VARARGS },
+  { "get_desktop_file_path",  pygmenu_tree_directory_get_desktop_file_path,  METH_VARARGS },
   { "get_menu_id",  pygmenu_tree_directory_get_menu_id,  METH_VARARGS },
   { "get_tree",     pygmenu_tree_directory_get_tree,     METH_VARARGS },
   { "make_path",    pygmenu_tree_directory_make_path,    METH_VARARGS },
@@ -674,6 +705,27 @@
 }
 
 static PyObject *
+pygmenu_tree_entry_get_launch_in_terminal (PyObject *self,
+				    PyObject *args)
+{
+  PyGMenuTreeEntry *entry;
+  PyObject         *retval;
+
+  if (args != NULL)
+    {
+      if (!PyArg_ParseTuple (args, ":gmenu.Entry.get_launch_in_terminal"))
+	return NULL;
+    }
+
+  entry = (PyGMenuTreeEntry *) self;
+
+  retval = gmenu_tree_entry_get_launch_in_terminal (GMENU_TREE_ENTRY (entry->item)) ? Py_True : Py_False;
+  Py_INCREF (retval);
+
+  return retval;
+}
+
+static PyObject *
 pygmenu_tree_entry_get_desktop_file_path (PyObject *self,
 					  PyObject *args)
 {
@@ -745,6 +797,27 @@
 }
 
 static PyObject *
+pygmenu_tree_entry_get_is_nodisplay (PyObject *self,
+				    PyObject *args)
+{
+  PyGMenuTreeEntry *entry;
+  PyObject         *retval;
+
+  if (args != NULL)
+    {
+      if (!PyArg_ParseTuple (args, ":gmenu.Entry.get_is_nodisplay"))
+	return NULL;
+    }
+
+  entry = (PyGMenuTreeEntry *) self;
+
+  retval = gmenu_tree_entry_get_is_nodisplay (GMENU_TREE_ENTRY (entry->item)) ? Py_True : Py_False;
+  Py_INCREF (retval);
+
+  return retval;
+}
+
+static PyObject *
 pygmenu_tree_entry_getattro (PyGMenuTreeEntry *self,
 			     PyObject         *py_attr)
 {
@@ -756,16 +829,18 @@
 
       if (!strcmp (attr, "__members__"))
 	{
-	  return Py_BuildValue ("[sssssssss]",
+	  return Py_BuildValue ("[sssssssssss]",
 				"type",
 				"parent",
 				"name",
 				"comment",
 				"icon",
 				"exec_info",
+				"launch_in_terminal",
 				"desktop_file_path",
 				"desktop_file_id",
-				"is_excluded");
+				"is_excluded",
+				"is_nodisplay");
 	}
       else if (!strcmp (attr, "type"))
 	{
@@ -791,6 +866,10 @@
 	{
 	  return pygmenu_tree_entry_get_exec ((PyObject *) self, NULL);
 	}
+      else if (!strcmp (attr, "launch_in_terminal"))
+	{
+	  return pygmenu_tree_entry_get_launch_in_terminal ((PyObject *) self, NULL);
+	}
       else if (!strcmp (attr, "desktop_file_path"))
 	{
 	  return pygmenu_tree_entry_get_desktop_file_path ((PyObject *) self, NULL);
@@ -803,6 +882,10 @@
 	{
 	  return pygmenu_tree_entry_get_is_excluded ((PyObject *) self, NULL);
 	}
+      else if (!strcmp (attr, "is_nodisplay"))
+	{
+	  return pygmenu_tree_entry_get_is_nodisplay ((PyObject *) self, NULL);
+	}
     }
 
   return PyObject_GenericGetAttr ((PyObject *) self, py_attr);
@@ -810,14 +893,16 @@
 
 static struct PyMethodDef pygmenu_tree_entry_methods[] =
 {
-  { "get_name",              pygmenu_tree_entry_get_name,              METH_VARARGS },
-  { "get_comment",           pygmenu_tree_entry_get_comment,           METH_VARARGS },
-  { "get_icon",              pygmenu_tree_entry_get_icon,              METH_VARARGS },
-  { "get_exec",              pygmenu_tree_entry_get_exec,              METH_VARARGS },
-  { "get_desktop_file_path", pygmenu_tree_entry_get_desktop_file_path, METH_VARARGS },
-  { "get_desktop_file_id",   pygmenu_tree_entry_get_desktop_file_id,   METH_VARARGS },
-  { "get_is_excluded",       pygmenu_tree_entry_get_is_excluded,       METH_VARARGS },
-  { NULL,                    NULL,                                     0            }
+  { "get_name",               pygmenu_tree_entry_get_name,               METH_VARARGS },
+  { "get_comment",            pygmenu_tree_entry_get_comment,            METH_VARARGS },
+  { "get_icon",               pygmenu_tree_entry_get_icon,               METH_VARARGS },
+  { "get_exec",               pygmenu_tree_entry_get_exec,               METH_VARARGS },
+  { "get_launch_in_terminal", pygmenu_tree_entry_get_launch_in_terminal, METH_VARARGS },
+  { "get_desktop_file_path",  pygmenu_tree_entry_get_desktop_file_path,  METH_VARARGS },
+  { "get_desktop_file_id",    pygmenu_tree_entry_get_desktop_file_id,    METH_VARARGS },
+  { "get_is_excluded",        pygmenu_tree_entry_get_is_excluded,        METH_VARARGS },
+  { "get_is_nodisplay",       pygmenu_tree_entry_get_is_nodisplay,       METH_VARARGS },
+  { NULL,                     NULL,                                      0            }
 };
 
 static PyTypeObject PyGMenuTreeEntry_Type = 
@@ -1684,7 +1769,8 @@
   PyModule_AddIntConstant (mod, "TYPE_HEADER",    GMENU_TREE_ITEM_HEADER);
   PyModule_AddIntConstant (mod, "TYPE_ALIAS",     GMENU_TREE_ITEM_ALIAS);
 
-  PyModule_AddIntConstant (mod, "FLAGS_NONE",             GMENU_TREE_FLAGS_NONE);
-  PyModule_AddIntConstant (mod, "FLAGS_INCLUDE_EXCLUDED", GMENU_TREE_FLAGS_INCLUDE_EXCLUDED);
-  PyModule_AddIntConstant (mod, "FLAGS_SHOW_EMPTY",       GMENU_TREE_FLAGS_SHOW_EMPTY);
+  PyModule_AddIntConstant (mod, "FLAGS_NONE",              GMENU_TREE_FLAGS_NONE);
+  PyModule_AddIntConstant (mod, "FLAGS_INCLUDE_EXCLUDED",  GMENU_TREE_FLAGS_INCLUDE_EXCLUDED);
+  PyModule_AddIntConstant (mod, "FLAGS_SHOW_EMPTY",        GMENU_TREE_FLAGS_SHOW_EMPTY);
+  PyModule_AddIntConstant (mod, "FLAGS_INCLUDE_NODISPLAY", GMENU_TREE_FLAGS_INCLUDE_NODISPLAY);
 }
