--- /dev/null	2006-09-11 12:55:45.000000000 +0000
+++ Parser.java	2007-04-12 07:49:31.000000000 +0000
@@ -0,0 +1,1173 @@
+//### This file created by BYACC 1.8(/Java extension  1.14)
+//### Java capabilities added 7 Jan 97, Bob Jamison
+//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
+//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
+//###           01 Jun 99  -- Bob Jamison -- added Runnable support
+//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
+//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
+//###           16 May 01  -- Bob Jamison -- added custom stack sizing
+//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
+//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
+//### Please send bug reports to tom@hukatronic.cz
+//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";
+
+
+
+package com.thoughtworks.qdox.parser.impl;
+
+
+
+//#line 2 "../src/grammar/parser.y"
+import com.thoughtworks.qdox.parser.*;
+import com.thoughtworks.qdox.parser.structs.*;
+import java.io.IOException;
+//#line 21 "Parser.java"
+
+
+
+
+public class Parser
+{
+
+boolean yydebug;        //do I want debug output?
+int yynerrs;            //number of errors so far
+int yyerrflag;          //was there an error?
+int yychar;             //the current working character
+
+//########## MESSAGES ##########
+//###############################################################
+// method: debug
+//###############################################################
+void debug(String msg)
+{
+  if (yydebug)
+    System.out.println(msg);
+}
+
+//########## STATE STACK ##########
+final static int YYSTACKSIZE = 500;  //maximum stack size
+int statestk[] = new int[YYSTACKSIZE]; //state stack
+int stateptr;
+int stateptrmax;                     //highest index of stackptr
+int statemax;                        //state when highest index reached
+//###############################################################
+// methods: state stack push,pop,drop,peek
+//###############################################################
+final void state_push(int state)
+{
+  try {
+		stateptr++;
+		statestk[stateptr]=state;
+	 }
+	 catch (ArrayIndexOutOfBoundsException e) {
+     int oldsize = statestk.length;
+     int newsize = oldsize * 2;
+     int[] newstack = new int[newsize];
+     System.arraycopy(statestk,0,newstack,0,oldsize);
+     statestk = newstack;
+     statestk[stateptr]=state;
+  }
+}
+final int state_pop()
+{
+  return statestk[stateptr--];
+}
+final void state_drop(int cnt)
+{
+  stateptr -= cnt; 
+}
+final int state_peek(int relative)
+{
+  return statestk[stateptr-relative];
+}
+//###############################################################
+// method: init_stacks : allocate and prepare stacks
+//###############################################################
+final boolean init_stacks()
+{
+  stateptr = -1;
+  val_init();
+  return true;
+}
+//###############################################################
+// method: dump_stacks : show n levels of the stacks
+//###############################################################
+void dump_stacks(int count)
+{
+int i;
+  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
+  for (i=0;i<count;i++)
+    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
+  System.out.println("======================");
+}
+
+
+//########## SEMANTIC VALUES ##########
+//## **user defined:Value
+String   yytext;//user variable to return contextual strings
+Value yyval; //used to return semantic vals from action routines
+Value yylval;//the 'lval' (result) I got from yylex()
+Value valstk[] = new Value[YYSTACKSIZE];
+int valptr;
+//###############################################################
+// methods: value stack push,pop,drop,peek.
+//###############################################################
+final void val_init()
+{
+  yyval=new Value();
+  yylval=new Value();
+  valptr=-1;
+}
+final void val_push(Value val)
+{
+  try {
+    valptr++;
+    valstk[valptr]=val;
+  }
+  catch (ArrayIndexOutOfBoundsException e) {
+    int oldsize = valstk.length;
+    int newsize = oldsize*2;
+    Value[] newstack = new Value[newsize];
+    System.arraycopy(valstk,0,newstack,0,oldsize);
+    valstk = newstack;
+    valstk[valptr]=val;
+  }
+}
+final Value val_pop()
+{
+  return valstk[valptr--];
+}
+final void val_drop(int cnt)
+{
+  valptr -= cnt;
+}
+final Value val_peek(int relative)
+{
+  return valstk[valptr-relative];
+}
+//#### end semantic value section ####
+public final static short SEMI=257;
+public final static short DOT=258;
+public final static short DOTDOTDOT=259;
+public final static short COMMA=260;
+public final static short STAR=261;
+public final static short EQUALS=262;
+public final static short PACKAGE=263;
+public final static short IMPORT=264;
+public final static short PUBLIC=265;
+public final static short PROTECTED=266;
+public final static short PRIVATE=267;
+public final static short STATIC=268;
+public final static short FINAL=269;
+public final static short ABSTRACT=270;
+public final static short NATIVE=271;
+public final static short STRICTFP=272;
+public final static short SYNCHRONIZED=273;
+public final static short TRANSIENT=274;
+public final static short VOLATILE=275;
+public final static short CLASS=276;
+public final static short INTERFACE=277;
+public final static short ENUM=278;
+public final static short THROWS=279;
+public final static short EXTENDS=280;
+public final static short IMPLEMENTS=281;
+public final static short SUPER=282;
+public final static short DEFAULT=283;
+public final static short BRACEOPEN=284;
+public final static short BRACECLOSE=285;
+public final static short SQUAREOPEN=286;
+public final static short SQUARECLOSE=287;
+public final static short PARENOPEN=288;
+public final static short PARENCLOSE=289;
+public final static short LESSTHAN=290;
+public final static short GREATERTHAN=291;
+public final static short AMPERSAND=292;
+public final static short QUERY=293;
+public final static short AT=294;
+public final static short JAVADOCSTART=295;
+public final static short JAVADOCEND=296;
+public final static short JAVADOCEOL=297;
+public final static short CODEBLOCK=298;
+public final static short PARENBLOCK=299;
+public final static short INTEGER_LITERAL=300;
+public final static short FLOAT_LITERAL=301;
+public final static short IDENTIFIER=302;
+public final static short JAVADOCTAG=303;
+public final static short JAVADOCTOKEN=304;
+public final static short YYERRCODE=256;
+final static short yylhs[] = {                           -1,
+    0,   10,    0,    9,    9,    9,    9,    9,    9,   11,
+   12,   12,   13,   16,   18,   18,   19,   19,   17,   17,
+   21,   20,    1,    1,    1,    8,    5,    5,    2,    2,
+    2,    2,    2,    2,    2,    2,    2,    2,    2,   22,
+   22,   22,   23,   23,   24,   24,   24,   24,   24,   24,
+    7,    3,   25,   25,   26,   26,   27,   27,   27,   27,
+   28,   28,   29,   30,   30,   31,   31,   32,   32,   15,
+   33,   34,   34,   36,   36,   36,   38,   38,   39,   39,
+   39,   39,   14,   41,   42,   42,   42,   43,   43,   44,
+   44,   35,   35,   45,   45,   37,   47,   37,   46,   46,
+   46,   46,   46,   46,   46,   46,    4,    4,   51,   53,
+   48,   52,   54,   52,   49,   49,   50,   55,   56,   56,
+   58,   58,   57,   57,   59,   59,   60,    6,    6,   40,
+   40,   61,   61,
+};
+final static short yylen[] = {                            2,
+    0,    0,    3,    1,    1,    1,    1,    1,    1,    3,
+    3,    4,    4,    1,    0,    2,    1,    1,    0,    2,
+    0,    3,    1,    3,    3,    2,    0,    3,    1,    1,
+    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
+    2,    0,    2,    5,    0,    2,    2,    4,    4,    2,
+    3,    2,    0,    3,    1,    3,    1,    1,    3,    3,
+    0,    1,    3,    1,    3,    1,    3,    1,    3,    4,
+    4,    1,    3,    0,    1,    3,    2,    2,    1,    2,
+    2,    3,    4,    6,    1,    1,    2,    0,    2,    1,
+    3,    0,    2,    1,    3,    0,    0,    3,    1,    1,
+    1,    1,    1,    1,    1,    1,    1,    1,    2,    0,
+    6,    0,    0,    4,    8,    7,    5,    3,    0,    2,
+    1,    3,    0,    1,    1,    3,    5,    0,    1,    0,
+    2,    0,    2,
+};
+final static short yydefred[] = {                         1,
+    2,    0,    9,    0,    0,   15,    3,    4,    5,    6,
+    7,    8,    0,    0,    0,   23,    0,    0,    0,   19,
+    0,   29,   30,   31,   32,   33,   34,   35,   39,   36,
+   38,   37,   85,   86,    0,    0,   40,   41,    0,    0,
+   96,   10,    0,    0,   11,    0,   18,   17,   16,    0,
+   87,    0,    0,    0,    0,    0,    0,    0,    0,   25,
+   24,   12,   13,   21,   20,    0,   71,   45,    0,    0,
+   62,    0,   77,   70,   96,    0,    0,  131,   78,   83,
+    0,   15,    0,   94,    0,    0,    0,    0,   64,    0,
+    0,   80,    0,    0,   76,  106,   99,  104,  105,    0,
+   98,  100,  101,  102,  103,    0,    0,   52,    0,   46,
+   45,   44,    0,   50,    0,    0,   63,   90,    0,   84,
+   82,  109,    0,    0,    0,    0,    0,   57,    0,   55,
+   95,    0,    0,   68,    0,   65,    0,    0,    0,   27,
+    0,  110,    0,    0,    0,    0,   54,   49,   48,    0,
+   91,    0,    0,    0,  125,    0,    0,    0,    0,   27,
+  112,    0,   59,   60,   56,   69,    0,  118,  130,    0,
+    0,  107,  108,  117,    0,    0,    0,   27,  133,    0,
+  126,    0,   28,    0,  113,  111,    0,  129,    0,    0,
+  116,    0,    0,   27,  127,  114,  115,
+};
+final static short yydgoto[] = {                          1,
+   83,   37,  124,  174,  159,  189,  128,  142,    7,    2,
+    8,    9,   54,   11,   12,   20,   46,   21,   49,   65,
+   82,   13,   38,   86,  108,  129,  130,   70,   71,   88,
+   89,  135,   14,   55,   67,   56,   59,   57,   73,   58,
+   15,   39,   91,  119,   85,  101,   81,  102,  103,  104,
+  105,  177,  161,  192,  139,  157,  153,  171,  154,  155,
+  167,
+};
+final static short yysindex[] = {                         0,
+    0,  -69,    0, -290, -208,    0,    0,    0,    0,    0,
+    0,    0,   76, -213, -211,    0,   -8, -290,   -3,    0,
+ -288,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0, -212, -146,    0,    0, -157, -228,
+    0,    0, -181,    4,    0, -217,    0,    0,    0, -196,
+    0,  -83,  -71,  -45,  -32,    6,   -2, -279,  -26,    0,
+    0,    0,    0,    0,    0, -290,    0,    0,  -37,   12,
+    0,  -74,    0,    0,    0, -228,   -9,    0,    0,    0,
+ -229,    0, -177,    0,   34,  -86,   16,  -85,    0, -290,
+ -196,    0,   -1,    0,    0,    0,    0,    0,    0,  -38,
+    0,    0,    0,    0,    0, -288, -161,    0, -290,    0,
+    0,    0,   40,    0, -290,  -37,    0,    0,   41,    0,
+    0,    0,   14,   10,    3, -290, -269,    0,  -68,    0,
+    0, -207, -143,    0,   18,    0, -290,    0,   27,    0,
+   14,    0,    5, -290, -290, -161,    0,    0,    0, -290,
+    0,   17,   19,   52,    0, -290, -115,   28,   28,    0,
+    0,   14,    0,    0,    0,    0,   53,    0,    0,   55,
+   56,    0,    0,    0,   69,  -79, -250,    0,    0,   81,
+    0, -290,    0, -115,    0,    0,  -79,    0,   13,   55,
+    0,   13, -115,    0,    0,    0,    0,
+};
+final static short yyrindex[] = {                         0,
+    0,  106,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+  -94,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0, -238,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,   73,
+    0, -105,  -33,    0,    0,   74, -134,    0, -168,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0, -131,
+    0,  -40,    0,    0,    0, -238,    0,    0,    0,    0,
+    1,    0, -167,    0,   77,    0,  -50,    0,    0,    0,
+   73,    0,  -39, -233,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0,    0,  -81,    0,    0,    0,    0,
+    0,    0, -103,    0,    0,    0,    0,    0,  -80,    0,
+    0,    0, -232, -148,    0,    0,  -49,    0,    0,    0,
+    0,    0,    0,    0,  -48,    0,    0,   15, -111,    0,
+ -235,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,   64,    0,   71,    0,    0,    0, -144, -169,    0,
+    0,    0,    0,    0,    0,    0,    0,    0,    0, -239,
+ -108,    0,    0,    0,    0, -111,    0,    0,    0,   60,
+    0,    0,    0,    0,    0,    0, -111,    0,    0, -121,
+    0,    0,    0,    0,    0,    0,    0,
+};
+final static short yygindex[] = {                         0,
+   -4,  191,  -63, -109,   36,    0,  -95,  -52,    0,    0,
+    0,    0,    2,  282,  283,    0,    0,  285,    0,    0,
+    0,  284,  -56,  257,  245,    0,  239,    0,  286,    0,
+  271,    0,    0,    0,  297,  313,  315,    0,  333,   75,
+    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+    0,    0,    0,    0, -133, -170,    0,    0,    0,  223,
+    0,
+};
+final static int YYTABLESIZE=400;
+static short yytable[];
+static { yytable();}
+static void yytable(){
+yytable = new short[]{                         17,
+   19,   78,   84,   10,  125,  184,  172,  160,   47,  185,
+  144,   16,  145,   44,   77,   48,  193,  121,   74,  134,
+  121,   27,   72,   97,   27,   23,  118,   96,  178,  114,
+  143,   97,   97,   97,   97,   97,   97,   97,   97,   97,
+   97,   97,   97,   97,   97,  131,   74,  173,  163,  164,
+   27,   73,  110,   23,  166,  130,   97,   23,  121,   18,
+   97,   97,   27,  130,   97,    6,    6,  186,   97,   23,
+   40,  180,   41,  151,  191,  114,  111,  148,   63,   60,
+   43,  113,   97,  197,   66,   64,   77,   26,   97,   50,
+   26,   53,   53,   16,   16,   78,   97,   97,   97,   97,
+   97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
+   53,   53,  107,   53,   51,   51,   53,   60,   53,   26,
+   61,   97,   75,   53,   53,   97,   97,  113,   26,   97,
+   51,  127,  149,   97,   53,  122,  195,   53,  122,  196,
+   16,  172,   53,   53,   53,  119,   51,   51,  120,   88,
+   75,  170,   88,   53,   43,   52,   47,   51,   61,   43,
+   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
+   43,   43,   43,  110,  116,  158,  122,  190,   43,   43,
+   47,   47,  173,   43,   43,   47,  119,    3,   43,  120,
+   47,  146,   43,    4,    5,  176,   43,  111,   47,  156,
+   89,   14,  112,   89,   68,  117,  175,   77,   14,   66,
+   58,   67,  152,  187,   22,   16,   79,   81,   69,   79,
+   81,   22,  147,   92,   93,    6,   22,   23,   24,   25,
+   26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
+   66,   58,   67,  152,   79,   81,   61,   61,   42,   43,
+   61,   69,   74,   45,   43,   36,   72,   76,   80,  122,
+   62,   43,   75,  123,   87,   42,   42,   42,   42,   42,
+   42,   42,   42,   42,   42,   42,   42,   42,   42,  130,
+  130,  130,  130,  130,  130,  130,  130,  130,  130,  130,
+   42,   90,   52,  109,   42,  115,  121,  133,   42,  107,
+  137,  138,   42,  123,  141,  156,  162,  168,  130,  150,
+   77,  169,   43,  175,  194,  182,  130,   22,   23,   24,
+   25,   26,   27,   28,   29,   30,   31,   32,  132,  132,
+  132,  132,  132,  132,  132,  132,  132,  132,  132,  188,
+   22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
+   32,   33,   34,   35,   16,  183,   92,  179,   72,  124,
+   93,  128,   98,   99,  100,  132,  106,  132,  140,   36,
+   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
+   42,   42,   42,   42,  165,  126,  136,  120,   95,   94,
+   79,  181,    0,    0,    0,    0,    0,    0,    0,   42,
+};
+}
+static short yycheck[];
+static { yycheck(); }
+static void yycheck() {
+yycheck = new short[] {                          4,
+    5,   58,   66,    2,  100,  176,  257,  141,  297,  260,
+  280,  302,  282,   18,  294,  304,  187,  257,  257,  115,
+  260,  257,  302,  257,  260,  258,   90,  257,  162,   86,
+  126,  265,  266,  267,  268,  269,  270,  271,  272,  273,
+  274,  275,  276,  277,  278,  109,  285,  298,  144,  145,
+  286,  285,  260,  286,  150,  294,  290,  290,  298,  268,
+  294,  295,  298,  302,  298,  295,  295,  177,  302,  302,
+  284,  167,  284,  137,  184,  132,  284,  285,  296,  261,
+  258,   86,   81,  193,  281,  303,  294,  257,  257,  302,
+  260,  259,  260,  302,  302,  152,  265,  266,  267,  268,
+  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
+  259,  260,  290,  281,  259,  260,  284,  261,  286,  289,
+  302,  290,  257,  291,  292,  294,  295,  132,  298,  298,
+  277,  293,  276,  302,  302,  257,  189,  286,  260,  192,
+  302,  257,  291,  292,  302,  257,  291,  292,  257,  281,
+  285,  156,  284,  302,  260,  302,  260,  302,  302,  265,
+  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
+  276,  277,  278,  260,  260,  140,  298,  182,  284,  285,
+  284,  285,  298,  289,  290,  289,  298,  257,  294,  298,
+  294,  260,  298,  263,  264,  160,  302,  284,  302,  279,
+  281,  296,  289,  284,  288,  291,  286,  294,  303,  260,
+  260,  260,  138,  178,  296,  302,  257,  257,  290,  260,
+  260,  303,  291,  298,  299,  295,  265,  266,  267,  268,
+  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,
+  291,  291,  291,  169,  285,  285,  280,  281,  257,  258,
+  284,  290,  285,  257,  258,  294,  302,  260,  285,  298,
+  257,  258,  257,  302,  302,  265,  266,  267,  268,  269,
+  270,  271,  272,  273,  274,  275,  276,  277,  278,  265,
+  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,
+  290,  280,  302,  260,  294,  280,  298,  258,  298,  290,
+  260,  288,  302,  289,  302,  279,  302,  289,  294,  292,
+  294,  260,  258,  286,  302,  260,  302,  265,  266,  267,
+  268,  269,  270,  271,  272,  273,  274,  275,  265,  266,
+  267,  268,  269,  270,  271,  272,  273,  274,  275,  259,
+  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
+  275,  276,  277,  278,  302,  287,  284,  167,  285,  289,
+  284,  302,   81,   81,   81,  302,   82,  111,  124,  294,
+  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
+  275,  276,  277,  278,  146,  100,  116,   91,   76,   75,
+   58,  169,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  294,
+};
+}
+final static short YYFINAL=1;
+final static short YYMAXTOKEN=304;
+final static String yyname[] = {
+"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
+null,null,null,"SEMI","DOT","DOTDOTDOT","COMMA","STAR","EQUALS","PACKAGE",
+"IMPORT","PUBLIC","PROTECTED","PRIVATE","STATIC","FINAL","ABSTRACT","NATIVE",
+"STRICTFP","SYNCHRONIZED","TRANSIENT","VOLATILE","CLASS","INTERFACE","ENUM",
+"THROWS","EXTENDS","IMPLEMENTS","SUPER","DEFAULT","BRACEOPEN","BRACECLOSE",
+"SQUAREOPEN","SQUARECLOSE","PARENOPEN","PARENCLOSE","LESSTHAN","GREATERTHAN",
+"AMPERSAND","QUERY","AT","JAVADOCSTART","JAVADOCEND","JAVADOCEOL","CODEBLOCK",
+"PARENBLOCK","INTEGER_LITERAL","FLOAT_LITERAL","IDENTIFIER","JAVADOCTAG",
+"JAVADOCTOKEN",
+};
+final static String yyrule[] = {
+"$accept : file",
+"file :",
+"$$1 :",
+"file : file $$1 filepart",
+"filepart : package",
+"filepart : import",
+"filepart : javadoc",
+"filepart : class",
+"filepart : enum",
+"filepart : SEMI",
+"package : PACKAGE fullidentifier SEMI",
+"import : IMPORT fullidentifier SEMI",
+"import : IMPORT STATIC fullidentifier SEMI",
+"javadoc : JAVADOCSTART javadocdescription javadoctags JAVADOCEND",
+"javadocdescription : javadoctokens",
+"javadoctokens :",
+"javadoctokens : javadoctokens javadoctoken",
+"javadoctoken : JAVADOCTOKEN",
+"javadoctoken : JAVADOCEOL",
+"javadoctags :",
+"javadoctags : javadoctags javadoctag",
+"$$2 :",
+"javadoctag : JAVADOCTAG $$2 javadoctokens",
+"fullidentifier : IDENTIFIER",
+"fullidentifier : fullidentifier DOT IDENTIFIER",
+"fullidentifier : fullidentifier DOT STAR",
+"arrayidentifier : IDENTIFIER dimensions",
+"dimensions :",
+"dimensions : dimensions SQUAREOPEN SQUARECLOSE",
+"modifier : PUBLIC",
+"modifier : PROTECTED",
+"modifier : PRIVATE",
+"modifier : STATIC",
+"modifier : FINAL",
+"modifier : ABSTRACT",
+"modifier : NATIVE",
+"modifier : SYNCHRONIZED",
+"modifier : VOLATILE",
+"modifier : TRANSIENT",
+"modifier : STRICTFP",
+"modifiers : modifiers modifier",
+"modifiers : modifiers annotation",
+"modifiers :",
+"annotation : AT IDENTIFIER",
+"annotation : AT IDENTIFIER PARENOPEN annotationarglist PARENCLOSE",
+"annotationarglist :",
+"annotationarglist : annotationarglist COMMA",
+"annotationarglist : annotationarglist fullidentifier",
+"annotationarglist : annotationarglist fullidentifier DOT CLASS",
+"annotationarglist : annotationarglist BRACEOPEN annotationarglist BRACECLOSE",
+"annotationarglist : annotationarglist annotation",
+"type : classtype opt_typearguments dimensions",
+"classtype : fullidentifier opt_typearguments",
+"opt_typearguments :",
+"opt_typearguments : LESSTHAN typearglist GREATERTHAN",
+"typearglist : typearg",
+"typearglist : typearglist COMMA typearg",
+"typearg : type",
+"typearg : QUERY",
+"typearg : QUERY EXTENDS type",
+"typearg : QUERY SUPER type",
+"opt_typeparams :",
+"opt_typeparams : typeparams",
+"typeparams : LESSTHAN typeparamlist GREATERTHAN",
+"typeparamlist : typeparam",
+"typeparamlist : typeparamlist COMMA typeparam",
+"typeparam : IDENTIFIER",
+"typeparam : IDENTIFIER EXTENDS typeboundlist",
+"typeboundlist : type",
+"typeboundlist : typeboundlist AMPERSAND type",
+"enum : enum_definition BRACEOPEN enum_body BRACECLOSE",
+"enum_definition : modifiers ENUM IDENTIFIER opt_implements",
+"enum_body : enum_values",
+"enum_body : enum_values SEMI members",
+"enum_values :",
+"enum_values : enum_value",
+"enum_values : enum_value COMMA enum_values",
+"enum_value : javadoc enum_constructor",
+"enum_value : opt_annotations enum_constructor",
+"enum_constructor : IDENTIFIER",
+"enum_constructor : IDENTIFIER CODEBLOCK",
+"enum_constructor : IDENTIFIER PARENBLOCK",
+"enum_constructor : IDENTIFIER PARENBLOCK CODEBLOCK",
+"class : classdefinition BRACEOPEN members BRACECLOSE",
+"classdefinition : modifiers classorinterface IDENTIFIER opt_typeparams opt_extends opt_implements",
+"classorinterface : CLASS",
+"classorinterface : INTERFACE",
+"classorinterface : AT INTERFACE",
+"opt_extends :",
+"opt_extends : EXTENDS extendslist",
+"extendslist : classtype",
+"extendslist : extendslist COMMA classtype",
+"opt_implements :",
+"opt_implements : IMPLEMENTS implementslist",
+"implementslist : classtype",
+"implementslist : implementslist COMMA classtype",
+"members :",
+"$$3 :",
+"members : members $$3 member",
+"member : javadoc",
+"member : fields",
+"member : method",
+"member : constructor",
+"member : static_block",
+"member : class",
+"member : enum",
+"member : SEMI",
+"memberend : SEMI",
+"memberend : CODEBLOCK",
+"static_block : modifiers CODEBLOCK",
+"$$4 :",
+"fields : modifiers type arrayidentifier $$4 extrafields memberend",
+"extrafields :",
+"$$5 :",
+"extrafields : extrafields COMMA $$5 arrayidentifier",
+"method : modifiers typeparams type IDENTIFIER methoddef dimensions opt_exceptions memberend",
+"method : modifiers type IDENTIFIER methoddef dimensions opt_exceptions memberend",
+"constructor : modifiers IDENTIFIER methoddef opt_exceptions memberend",
+"methoddef : PARENOPEN opt_params PARENCLOSE",
+"opt_exceptions :",
+"opt_exceptions : THROWS exceptionlist",
+"exceptionlist : fullidentifier",
+"exceptionlist : exceptionlist COMMA fullidentifier",
+"opt_params :",
+"opt_params : paramlist",
+"paramlist : param",
+"paramlist : paramlist COMMA param",
+"param : opt_annotations opt_parammodifiers type varargs arrayidentifier",
+"varargs :",
+"varargs : DOTDOTDOT",
+"opt_annotations :",
+"opt_annotations : opt_annotations annotation",
+"opt_parammodifiers :",
+"opt_parammodifiers : opt_parammodifiers modifier",
+};
+
+//#line 333 "../src/grammar/parser.y"
+
+private Lexer lexer;
+private Builder builder;
+private StringBuffer textBuffer = new StringBuffer();
+private ClassDef cls = new ClassDef();
+private MethodDef mth = new MethodDef();
+private FieldDef param = new FieldDef();
+private java.util.Set modifiers = new java.util.HashSet();
+private TypeDef fieldType;
+private int line;
+private int column;
+private boolean debugLexer;
+
+private void appendToBuffer(String word) {
+    if (textBuffer.length() > 0) {
+        char lastChar = textBuffer.charAt(textBuffer.length() - 1);
+        if (!Character.isWhitespace(lastChar)) {
+            textBuffer.append(' ');
+        }
+    }
+    textBuffer.append(word);
+}
+
+private String buffer() {
+    String result = textBuffer.toString().trim();
+    textBuffer.setLength(0);
+    return result;
+}
+
+public Parser(Lexer lexer, Builder builder) {
+    this.lexer = lexer;
+    this.builder = builder;
+}
+
+public void setDebugParser(boolean debug) {
+    yydebug = debug;
+}
+
+public void setDebugLexer(boolean debug) {
+    debugLexer = debug;
+}
+
+/**
+ * Parse file. Return true if successful.
+ */
+public boolean parse() {
+    return yyparse() == 0;
+}
+
+private int yylex() {
+    try {
+        final int result = lexer.lex();
+        yylval = new Value();
+        yylval.sval = lexer.text();
+        if (debugLexer) {
+            System.err.println("Token: " + yyname[result] + " \"" + yylval.sval + "\"");
+        }
+        return result;
+    }
+    catch(IOException e) {
+        return 0;
+    }
+}
+
+private void yyerror(String msg) {
+    throw new ParseException(msg, lexer.getLine(), lexer.getColumn());
+}
+
+private class Value {
+    String sval;
+    int ival;
+    boolean bval;
+    TypeDef type;
+}
+
+private void makeField(TypeDef field, String body) {
+    FieldDef fd = new FieldDef();
+    fd.lineNumber = line;
+    fd.modifiers.addAll(modifiers); 
+    fd.type = fieldType.name; 
+    fd.dimensions = fieldType.dimensions + field.dimensions;
+    fd.name = field.name;
+    fd.body = body;
+    builder.addField(fd);
+}
+            
+//#line 600 "Parser.java"
+//###############################################################
+// method: yylexdebug : check lexer state
+//###############################################################
+void yylexdebug(int state,int ch)
+{
+String s=null;
+  if (ch < 0) ch=0;
+  if (ch <= YYMAXTOKEN) //check index bounds
+     s = yyname[ch];    //now get it
+  if (s==null)
+    s = "illegal-symbol";
+  debug("state "+state+", reading "+ch+" ("+s+")");
+}
+
+
+
+
+
+//The following are now global, to aid in error reporting
+int yyn;       //next next thing to do
+int yym;       //
+int yystate;   //current parsing state from state table
+String yys;    //current token string
+
+
+//###############################################################
+// method: yyparse : parse input and execute indicated items
+//###############################################################
+int yyparse()
+{
+boolean doaction;
+  init_stacks();
+  yynerrs = 0;
+  yyerrflag = 0;
+  yychar = -1;          //impossible char forces a read
+  yystate=0;            //initial state
+  state_push(yystate);  //save it
+  val_push(yylval);     //save empty value
+  while (true) //until parsing is done, either correctly, or w/error
+    {
+    doaction=true;
+    if (yydebug) debug("loop"); 
+    //#### NEXT ACTION (from reduction table)
+    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
+      {
+      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
+      if (yychar < 0)      //we want a char?
+        {
+        yychar = yylex();  //get next token
+        if (yydebug) debug(" next yychar:"+yychar);
+        //#### ERROR CHECK ####
+        if (yychar < 0)    //it it didn't work/error
+          {
+          yychar = 0;      //change it to default string (no -1!)
+          if (yydebug)
+            yylexdebug(yystate,yychar);
+          }
+        }//yychar<0
+      yyn = yysindex[yystate];  //get amount to shift by (shift index)
+      if ((yyn != 0) && (yyn += yychar) >= 0 &&
+          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
+        {
+        if (yydebug)
+          debug("state "+yystate+", shifting to state "+yytable[yyn]);
+        //#### NEXT STATE ####
+        yystate = yytable[yyn];//we are in a new state
+        state_push(yystate);   //save it
+        val_push(yylval);      //push our lval as the input for next rule
+        yychar = -1;           //since we have 'eaten' a token, say we need another
+        if (yyerrflag > 0)     //have we recovered an error?
+           --yyerrflag;        //give ourselves credit
+        doaction=false;        //but don't process yet
+        break;   //quit the yyn=0 loop
+        }
+
+    yyn = yyrindex[yystate];  //reduce
+    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
+            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
+      {   //we reduced!
+      if (yydebug) debug("reduce");
+      yyn = yytable[yyn];
+      doaction=true; //get ready to execute
+      break;         //drop down to actions
+      }
+    else //ERROR RECOVERY
+      {
+      if (yyerrflag==0)
+        {
+        yyerror("syntax error");
+        yynerrs++;
+        }
+      if (yyerrflag < 3) //low error count?
+        {
+        yyerrflag = 3;
+        while (true)   //do until break
+          {
+          if (stateptr<0)   //check for under & overflow here
+            {
+            yyerror("stack underflow. aborting...");  //note lower case 's'
+            return 1;
+            }
+          yyn = yysindex[state_peek(0)];
+          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
+                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
+            {
+            if (yydebug)
+              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
+            yystate = yytable[yyn];
+            state_push(yystate);
+            val_push(yylval);
+            doaction=false;
+            break;
+            }
+          else
+            {
+            if (yydebug)
+              debug("error recovery discarding state "+state_peek(0)+" ");
+            if (stateptr<0)   //check for under & overflow here
+              {
+              yyerror("Stack underflow. aborting...");  //capital 'S'
+              return 1;
+              }
+            state_pop();
+            val_pop();
+            }
+          }
+        }
+      else            //discard this token
+        {
+        if (yychar == 0)
+          return 1; //yyabort
+        if (yydebug)
+          {
+          yys = null;
+          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
+          if (yys == null) yys = "illegal-symbol";
+          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
+          }
+        yychar = -1;  //read another
+        }
+      }//end error recovery
+    }//yyn=0 loop
+    if (!doaction)   //any reason not to proceed?
+      continue;      //skip action
+    yym = yylen[yyn];          //get count of terminals on rhs
+    if (yydebug)
+      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
+    if (yym>0)                 //if count of rhs not 'nil'
+      yyval = val_peek(yym-1); //get current semantic value
+    switch(yyn)
+      {
+//########## USER-SUPPLIED ACTIONS ##########
+case 2:
+//#line 28 "../src/grammar/parser.y"
+{ line = lexer.getLine(); }
+break;
+case 10:
+//#line 34 "../src/grammar/parser.y"
+{ builder.addPackage(val_peek(1).sval); }
+break;
+case 11:
+//#line 37 "../src/grammar/parser.y"
+{ builder.addImport(val_peek(1).sval); }
+break;
+case 12:
+//#line 38 "../src/grammar/parser.y"
+{ builder.addImport(val_peek(1).sval); }
+break;
+case 14:
+//#line 46 "../src/grammar/parser.y"
+{ 
+        builder.addJavaDoc(buffer()); 
+    }
+break;
+case 17:
+//#line 53 "../src/grammar/parser.y"
+{
+        appendToBuffer(val_peek(0).sval);
+    }
+break;
+case 18:
+//#line 56 "../src/grammar/parser.y"
+{
+        textBuffer.append('\n');
+    }
+break;
+case 21:
+//#line 63 "../src/grammar/parser.y"
+{ line = lexer.getLine(); }
+break;
+case 22:
+//#line 64 "../src/grammar/parser.y"
+{
+        builder.addJavaDocTag(new TagDef(val_peek(2).sval.substring(1), buffer(), line)); 
+    }
+break;
+case 23:
+//#line 73 "../src/grammar/parser.y"
+{ yyval.sval = val_peek(0).sval; }
+break;
+case 24:
+//#line 74 "../src/grammar/parser.y"
+{ yyval.sval = val_peek(2).sval + '.' + val_peek(0).sval; }
+break;
+case 25:
+//#line 75 "../src/grammar/parser.y"
+{ yyval.sval = val_peek(2).sval + ".*"; }
+break;
+case 26:
+//#line 78 "../src/grammar/parser.y"
+{
+        yyval.type = new TypeDef(val_peek(1).sval,val_peek(0).ival);
+    }
+break;
+case 27:
+//#line 83 "../src/grammar/parser.y"
+{ yyval.ival = 0; }
+break;
+case 28:
+//#line 84 "../src/grammar/parser.y"
+{
+        yyval.ival = val_peek(2).ival + 1; 
+    }
+break;
+case 29:
+//#line 90 "../src/grammar/parser.y"
+{ yyval.sval = "public"; }
+break;
+case 30:
+//#line 91 "../src/grammar/parser.y"
+{ yyval.sval = "protected"; }
+break;
+case 31:
+//#line 92 "../src/grammar/parser.y"
+{ yyval.sval = "private"; }
+break;
+case 32:
+//#line 93 "../src/grammar/parser.y"
+{ yyval.sval = "static"; }
+break;
+case 33:
+//#line 94 "../src/grammar/parser.y"
+{ yyval.sval = "final"; }
+break;
+case 34:
+//#line 95 "../src/grammar/parser.y"
+{ yyval.sval = "abstract"; }
+break;
+case 35:
+//#line 96 "../src/grammar/parser.y"
+{ yyval.sval = "native"; }
+break;
+case 36:
+//#line 97 "../src/grammar/parser.y"
+{ yyval.sval = "synchronized"; }
+break;
+case 37:
+//#line 98 "../src/grammar/parser.y"
+{ yyval.sval = "volatile"; }
+break;
+case 38:
+//#line 99 "../src/grammar/parser.y"
+{ yyval.sval = "transient"; }
+break;
+case 39:
+//#line 100 "../src/grammar/parser.y"
+{ yyval.sval = "strictfp"; }
+break;
+case 40:
+//#line 103 "../src/grammar/parser.y"
+{ modifiers.add(val_peek(0).sval); }
+break;
+case 51:
+//#line 125 "../src/grammar/parser.y"
+{
+        yyval.type = new TypeDef(val_peek(2).sval,val_peek(0).ival);
+    }
+break;
+case 52:
+//#line 130 "../src/grammar/parser.y"
+{
+        yyval.sval = val_peek(1).sval; 
+    }
+break;
+case 70:
+//#line 164 "../src/grammar/parser.y"
+{
+  builder.endClass();
+}
+break;
+case 71:
+//#line 168 "../src/grammar/parser.y"
+{
+    cls.lineNumber = line;
+    cls.modifiers.addAll(modifiers); modifiers.clear();
+    cls.name = val_peek(1).sval;
+    cls.type = ClassDef.ENUM;
+    builder.beginClass(cls);
+    cls = new ClassDef();
+}
+break;
+case 83:
+//#line 195 "../src/grammar/parser.y"
+{
+        builder.endClass(); 
+    }
+break;
+case 84:
+//#line 200 "../src/grammar/parser.y"
+{
+        cls.lineNumber = line;
+        cls.modifiers.addAll(modifiers); modifiers.clear(); 
+        cls.name = val_peek(3).sval;
+        builder.beginClass(cls); 
+        cls = new ClassDef(); 
+    }
+break;
+case 85:
+//#line 209 "../src/grammar/parser.y"
+{ cls.type = ClassDef.CLASS; }
+break;
+case 86:
+//#line 210 "../src/grammar/parser.y"
+{ cls.type = ClassDef.INTERFACE; }
+break;
+case 87:
+//#line 211 "../src/grammar/parser.y"
+{ cls.type = ClassDef.ANNOTATION_TYPE; }
+break;
+case 90:
+//#line 216 "../src/grammar/parser.y"
+{ cls.extendz.add(val_peek(0).sval); }
+break;
+case 91:
+//#line 217 "../src/grammar/parser.y"
+{ cls.extendz.add(val_peek(0).sval); }
+break;
+case 94:
+//#line 222 "../src/grammar/parser.y"
+{ cls.implementz.add(val_peek(0).sval); }
+break;
+case 95:
+//#line 223 "../src/grammar/parser.y"
+{ cls.implementz.add(val_peek(0).sval); }
+break;
+case 97:
+//#line 225 "../src/grammar/parser.y"
+{ line = lexer.getLine(); }
+break;
+case 107:
+//#line 238 "../src/grammar/parser.y"
+{
+      yyval.sval = "";
+    }
+break;
+case 108:
+//#line 241 "../src/grammar/parser.y"
+{
+	  yyval.sval = lexer.getCodeBody();
+    }
+break;
+case 109:
+//#line 246 "../src/grammar/parser.y"
+{ modifiers.clear(); }
+break;
+case 110:
+//#line 251 "../src/grammar/parser.y"
+{
+        fieldType = val_peek(1).type;
+        makeField(val_peek(0).type, lexer.getCodeBody());
+    }
+break;
+case 111:
+//#line 255 "../src/grammar/parser.y"
+{
+        modifiers.clear();
+    }
+break;
+case 113:
+//#line 260 "../src/grammar/parser.y"
+{ line = lexer.getLine(); }
+break;
+case 114:
+//#line 260 "../src/grammar/parser.y"
+{
+        makeField(val_peek(0).type, lexer.getCodeBody());
+    }
+break;
+case 115:
+//#line 268 "../src/grammar/parser.y"
+{
+        mth.lineNumber = line;
+        mth.modifiers.addAll(modifiers); modifiers.clear(); 
+        mth.returns = val_peek(5).type.name;
+        mth.dimensions = val_peek(2).ival + val_peek(5).type.dimensions; /* return dimensions can be specified after return type OR after params*/
+        mth.name = val_peek(4).sval;
+        mth.body = val_peek(0).sval;
+        builder.addMethod(mth);
+        mth = new MethodDef(); 
+    }
+break;
+case 116:
+//#line 278 "../src/grammar/parser.y"
+{
+        mth.lineNumber = line;
+        mth.modifiers.addAll(modifiers); modifiers.clear();
+        mth.returns = val_peek(5).type.name;
+        mth.dimensions = val_peek(2).ival + val_peek(5).type.dimensions; /* return dimensions can be specified after return type OR after params*/
+        mth.name = val_peek(4).sval;
+        mth.body = val_peek(0).sval;
+        builder.addMethod(mth);
+        mth = new MethodDef();
+    }
+break;
+case 117:
+//#line 290 "../src/grammar/parser.y"
+{
+        mth.lineNumber = line;
+        mth.modifiers.addAll(modifiers); modifiers.clear(); 
+        mth.constructor = true; mth.name = val_peek(3).sval;
+        mth.body = val_peek(0).sval;
+        builder.addMethod(mth);
+        mth = new MethodDef(); 
+    }
+break;
+case 121:
+//#line 304 "../src/grammar/parser.y"
+{ mth.exceptions.add(val_peek(0).sval); }
+break;
+case 122:
+//#line 305 "../src/grammar/parser.y"
+{ mth.exceptions.add(val_peek(0).sval); }
+break;
+case 127:
+//#line 314 "../src/grammar/parser.y"
+{
+        param.name = val_peek(0).type.name;
+        param.type = val_peek(2).type.name;
+        param.dimensions = val_peek(2).type.dimensions + val_peek(0).type.dimensions;
+        param.isVarArgs = val_peek(1).bval;
+        mth.params.add(param);
+        param = new FieldDef();
+    }
+break;
+case 128:
+//#line 324 "../src/grammar/parser.y"
+{ yyval.bval = false; }
+break;
+case 129:
+//#line 325 "../src/grammar/parser.y"
+{ yyval.bval = true; }
+break;
+case 133:
+//#line 330 "../src/grammar/parser.y"
+{ param.modifiers.add(val_peek(0).sval); }
+break;
+//#line 1052 "Parser.java"
+//########## END OF USER-SUPPLIED ACTIONS ##########
+    }//switch
+    //#### Now let's reduce... ####
+    if (yydebug) debug("reduce");
+    state_drop(yym);             //we just reduced yylen states
+    yystate = state_peek(0);     //get new state
+    val_drop(yym);               //corresponding value drop
+    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
+    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
+      {
+      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
+      yystate = YYFINAL;         //explicitly say we're done
+      state_push(YYFINAL);       //and save it
+      val_push(yyval);           //also save the semantic value of parsing
+      if (yychar < 0)            //we want another character?
+        {
+        yychar = yylex();        //get next character
+        if (yychar<0) yychar=0;  //clean, if necessary
+        if (yydebug)
+          yylexdebug(yystate,yychar);
+        }
+      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
+         break;                 //quit the loop--all DONE
+      }//if yystate
+    else                        //else not done yet
+      {                         //get next state and push, for next yydefred[]
+      yyn = yygindex[yym];      //find out where to go
+      if ((yyn != 0) && (yyn += yystate) >= 0 &&
+            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
+        yystate = yytable[yyn]; //get new state
+      else
+        yystate = yydgoto[yym]; //else go to new defred
+      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
+      state_push(yystate);     //going again, so push state & val...
+      val_push(yyval);         //for next action
+      }
+    }//main loop
+  return 0;//yyaccept!!
+}
+//## end of method parse() ######################################
+
+
+
+//## run() --- for Thread #######################################
+//## The -Jnorun option was used ##
+//## end of method run() ########################################
+
+
+
+//## Constructors ###############################################
+//## The -Jnoconstruct option was used ##
+//###############################################################
+
+
+
+}
+//################### END OF CLASS ##############################
--- /dev/null	2006-09-11 12:55:45.000000000 +0000
+++ JFlexLexer.java	2007-04-12 07:52:33.000000000 +0000
@@ -0,0 +1,1287 @@
+/* The following code was generated by JFlex 1.4.1 on 4/12/07 7:37 AM */
+
+// class headers
+package com.thoughtworks.qdox.parser.impl;
+import com.thoughtworks.qdox.parser.*;
+
+/**
+ * This class is a scanner generated by 
+ * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
+ * on 4/12/07 7:37 AM from the specification file
+ * <tt>src/grammar/lexer.flex</tt>
+ */
+public class JFlexLexer implements Lexer {
+
+  /** This character denotes the end of file */
+  public static final int YYEOF = -1;
+
+  /** initial size of the lookahead buffer */
+  private static final int ZZ_BUFFERSIZE = 16384;
+
+  /** lexical states */
+  public static final int SINGLELINECOMMENT = 14;
+  public static final int ASSIGNMENT = 8;
+  public static final int STRING = 10;
+  public static final int YYINITIAL = 0;
+  public static final int MULTILINECOMMENT = 16;
+  public static final int PARENBLOCK = 6;
+  public static final int CODEBLOCK = 4;
+  public static final int JAVADOC = 2;
+  public static final int CHAR = 12;
+
+  /**
+   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
+   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
+   *                  at the beginning of a line
+   * l is of the form l = 2*k, k a non negative integer
+   */
+  private static final int ZZ_LEXSTATE[] = { 
+     0,  0,  1,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,  8, 
+     9, 9
+  };
+
+  /** 
+   * Translates characters to character classes
+   */
+  private static final String ZZ_CMAP_PACKED = 
+    "\11\56\1\4\1\2\1\0\1\0\1\1\16\56\4\0\1\4\1\0"+
+    "\1\57\1\0\1\55\1\0\1\47\1\60\1\43\1\44\1\3\1\0"+
+    "\1\10\1\0\1\7\1\5\12\56\1\0\1\6\1\45\1\54\1\46"+
+    "\1\50\1\51\32\55\1\41\1\61\1\42\1\0\1\55\1\0\1\12"+
+    "\1\25\1\13\1\27\1\16\1\32\1\15\1\35\1\17\1\55\1\14"+
+    "\1\26\1\20\1\33\1\21\1\11\1\55\1\22\1\31\1\23\1\24"+
+    "\1\30\1\37\1\40\1\34\1\36\1\52\1\0\1\53\1\0\41\56"+
+    "\2\0\4\55\4\0\1\55\2\0\1\56\7\0\1\55\4\0\1\55"+
+    "\5\0\27\55\1\0\37\55\1\0\u013f\55\31\0\162\55\4\0\14\55"+
+    "\16\0\5\55\11\0\1\55\21\0\130\56\5\0\23\56\12\0\1\55"+
+    "\13\0\1\55\1\0\3\55\1\0\1\55\1\0\24\55\1\0\54\55"+
+    "\1\0\46\55\1\0\5\55\4\0\202\55\1\0\4\56\3\0\105\55"+
+    "\1\0\46\55\2\0\2\55\6\0\20\55\41\0\46\55\2\0\1\55"+
+    "\7\0\47\55\11\0\21\56\1\0\27\56\1\0\3\56\1\0\1\56"+
+    "\1\0\2\56\1\0\1\56\13\0\33\55\5\0\3\55\15\0\4\56"+
+    "\14\0\6\56\13\0\32\55\5\0\13\55\16\56\7\0\12\56\4\0"+
+    "\2\55\1\56\143\55\1\0\1\55\10\56\1\0\6\56\2\55\2\56"+
+    "\1\0\4\56\2\55\12\56\3\55\2\0\1\55\17\0\1\56\1\55"+
+    "\1\56\36\55\33\56\2\0\3\55\60\0\46\55\13\56\1\55\u014f\0"+
+    "\3\56\66\55\2\0\1\56\1\55\20\56\2\0\1\55\4\56\3\0"+
+    "\12\55\2\56\2\0\12\56\21\0\3\56\1\0\10\55\2\0\2\55"+
+    "\2\0\26\55\1\0\7\55\1\0\1\55\3\0\4\55\2\0\1\56"+
+    "\1\55\7\56\2\0\2\56\2\0\3\56\11\0\1\56\4\0\2\55"+
+    "\1\0\3\55\2\56\2\0\12\56\4\55\15\0\3\56\1\0\6\55"+
+    "\4\0\2\55\2\0\26\55\1\0\7\55\1\0\2\55\1\0\2\55"+
+    "\1\0\2\55\2\0\1\56\1\0\5\56\4\0\2\56\2\0\3\56"+
+    "\13\0\4\55\1\0\1\55\7\0\14\56\3\55\14\0\3\56\1\0"+
+    "\11\55\1\0\3\55\1\0\26\55\1\0\7\55\1\0\2\55\1\0"+
+    "\5\55\2\0\1\56\1\55\10\56\1\0\3\56\1\0\3\56\2\0"+
+    "\1\55\17\0\2\55\2\56\2\0\12\56\1\0\1\55\17\0\3\56"+
+    "\1\0\10\55\2\0\2\55\2\0\26\55\1\0\7\55\1\0\2\55"+
+    "\1\0\5\55\2\0\1\56\1\55\6\56\3\0\2\56\2\0\3\56"+
+    "\10\0\2\56\4\0\2\55\1\0\3\55\4\0\12\56\1\0\1\55"+
+    "\20\0\1\56\1\55\1\0\6\55\3\0\3\55\1\0\4\55\3\0"+
+    "\2\55\1\0\1\55\1\0\2\55\3\0\2\55\3\0\3\55\3\0"+
+    "\10\55\1\0\3\55\4\0\5\56\3\0\3\56\1\0\4\56\11\0"+
+    "\1\56\17\0\11\56\11\0\1\55\7\0\3\56\1\0\10\55\1\0"+
+    "\3\55\1\0\27\55\1\0\12\55\1\0\5\55\4\0\7\56\1\0"+
+    "\3\56\1\0\4\56\7\0\2\56\11\0\2\55\4\0\12\56\22\0"+
+    "\2\56\1\0\10\55\1\0\3\55\1\0\27\55\1\0\12\55\1\0"+
+    "\5\55\2\0\1\56\1\55\7\56\1\0\3\56\1\0\4\56\7\0"+
+    "\2\56\7\0\1\55\1\0\2\55\4\0\12\56\22\0\2\56\1\0"+
+    "\10\55\1\0\3\55\1\0\27\55\1\0\20\55\4\0\6\56\2\0"+
+    "\3\56\1\0\4\56\11\0\1\56\10\0\2\55\4\0\12\56\22\0"+
+    "\2\56\1\0\22\55\3\0\30\55\1\0\11\55\1\0\1\55\2\0"+
+    "\7\55\3\0\1\56\4\0\6\56\1\0\1\56\1\0\10\56\22\0"+
+    "\2\56\15\0\60\55\1\56\2\55\7\56\4\0\10\55\10\56\1\0"+
+    "\12\56\47\0\2\55\1\0\1\55\2\0\2\55\1\0\1\55\2\0"+
+    "\1\55\6\0\4\55\1\0\7\55\1\0\3\55\1\0\1\55\1\0"+
+    "\1\55\2\0\2\55\1\0\4\55\1\56\2\55\6\56\1\0\2\56"+
+    "\1\55\2\0\5\55\1\0\1\55\1\0\6\56\2\0\12\56\2\0"+
+    "\2\55\42\0\1\55\27\0\2\56\6\0\12\56\13\0\1\56\1\0"+
+    "\1\56\1\0\1\56\4\0\2\56\10\55\1\0\42\55\6\0\24\56"+
+    "\1\0\2\56\4\55\4\0\10\56\1\0\44\56\11\0\1\56\71\0"+
+    "\42\55\1\0\5\55\1\0\2\55\1\0\7\56\3\0\4\56\6\0"+
+    "\12\56\6\0\6\55\4\56\106\0\46\55\12\0\51\55\7\0\132\55"+
+    "\5\0\104\55\5\0\122\55\6\0\7\55\1\0\77\55\1\0\1\55"+
+    "\1\0\4\55\2\0\7\55\1\0\1\55\1\0\4\55\2\0\47\55"+
+    "\1\0\1\55\1\0\4\55\2\0\37\55\1\0\1\55\1\0\4\55"+
+    "\2\0\7\55\1\0\1\55\1\0\4\55\2\0\7\55\1\0\7\55"+
+    "\1\0\27\55\1\0\37\55\1\0\1\55\1\0\4\55\2\0\7\55"+
+    "\1\0\47\55\1\0\23\55\16\0\11\56\56\0\125\55\14\0\u026c\55"+
+    "\2\0\10\55\12\0\32\55\5\0\113\55\3\0\3\55\17\0\15\55"+
+    "\1\0\4\55\3\56\13\0\22\55\3\56\13\0\22\55\2\56\14\0"+
+    "\15\55\1\0\3\55\1\0\2\56\14\0\64\55\40\56\3\0\1\55"+
+    "\3\0\2\55\1\56\2\0\12\56\41\0\3\56\2\0\12\56\6\0"+
+    "\130\55\10\0\51\55\1\56\126\0\35\55\3\0\14\56\4\0\14\56"+
+    "\12\0\12\56\36\55\2\0\5\55\u038b\0\154\55\224\0\234\55\4\0"+
+    "\132\55\6\0\26\55\2\0\6\55\2\0\46\55\2\0\6\55\2\0"+
+    "\10\55\1\0\1\55\1\0\1\55\1\0\1\55\1\0\37\55\2\0"+
+    "\65\55\1\0\7\55\1\0\1\55\3\0\3\55\1\0\7\55\3\0"+
+    "\4\55\2\0\6\55\4\0\15\55\5\0\3\55\1\0\7\55\17\0"+
+    "\4\56\32\0\5\56\20\0\2\55\23\0\1\55\13\0\4\56\6\0"+
+    "\6\56\1\0\1\55\15\0\1\55\40\0\22\55\36\0\15\56\4\0"+
+    "\1\56\3\0\6\56\27\0\1\55\4\0\1\55\2\0\12\55\1\0"+
+    "\1\55\3\0\5\55\6\0\1\55\1\0\1\55\1\0\1\55\1\0"+
+    "\4\55\1\0\3\55\1\0\7\55\3\0\3\55\5\0\5\55\26\0"+
+    "\44\55\u0e81\0\3\55\31\0\11\55\6\56\1\0\5\55\2\0\5\55"+
+    "\4\0\126\55\2\0\2\56\2\0\3\55\1\0\137\55\5\0\50\55"+
+    "\4\0\136\55\21\0\30\55\70\0\20\55\u0200\0\u19b6\55\112\0\u51a6\55"+
+    "\132\0\u048d\55\u0773\0\u2ba4\55\u215c\0\u012e\55\2\0\73\55\225\0\7\55"+
+    "\14\0\5\55\5\0\1\55\1\56\12\55\1\0\15\55\1\0\5\55"+
+    "\1\0\1\55\1\0\2\55\1\0\2\55\1\0\154\55\41\0\u016b\55"+
+    "\22\0\100\55\2\0\66\55\50\0\15\55\3\0\20\56\20\0\4\56"+
+    "\17\0\2\55\30\0\3\55\31\0\1\55\6\0\5\55\1\0\207\55"+
+    "\2\0\1\56\4\0\1\55\13\0\12\56\7\0\32\55\4\0\1\55"+
+    "\1\0\32\55\12\0\132\55\3\0\6\55\2\0\6\55\2\0\6\55"+
+    "\2\0\3\55\3\0\2\55\3\0\2\55\22\0\3\56\4\0";
+
+  /** 
+   * Translates characters to character classes
+   */
+  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);
+
+  /** 
+   * Translates DFA states to action switch labels.
+   */
+  private static final int [] ZZ_ACTION = zzUnpackAction();
+
+  private static final String ZZ_ACTION_PACKED_0 =
+    "\12\0\2\1\1\2\1\1\1\3\1\4\1\5\14\6"+
+    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
+    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\26"+
+    "\3\1\3\27\1\30\1\31\1\1\1\32\1\33\1\34"+
+    "\1\35\1\27\1\36\1\37\1\40\1\41\1\42\1\43"+
+    "\1\44\1\45\2\1\2\46\1\1\1\47\1\50\1\0"+
+    "\22\6\1\0\1\51\1\0\1\52\2\53\3\0\1\47"+
+    "\1\0\1\54\1\55\1\56\1\57\1\60\1\61\24\6"+
+    "\1\0\1\62\1\60\1\63\6\6\1\64\23\6\1\65"+
+    "\12\6\1\66\1\6\1\67\4\6\1\70\2\6\1\71"+
+    "\3\6\1\72\2\6\1\73\2\6\1\74\1\75\1\76"+
+    "\2\6\1\77\3\6\1\22\4\6\1\100\3\6\1\101"+
+    "\1\102\1\6\1\103\1\6\1\104\1\105\1\6\1\106"+
+    "\2\6\1\107";
+
+  private static int [] zzUnpackAction() {
+    int [] result = new int[222];
+    int offset = 0;
+    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
+    return result;
+  }
+
+  private static int zzUnpackAction(String packed, int offset, int [] result) {
+    int i = 0;       /* index in packed string  */
+    int j = offset;  /* index in unpacked array */
+    int l = packed.length();
+    while (i < l) {
+      int count = packed.charAt(i++);
+      int value = packed.charAt(i++);
+      do result[j++] = value; while (--count > 0);
+    }
+    return j;
+  }
+
+
+  /** 
+   * Translates a state to a row index in the transition table
+   */
+  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();
+
+  private static final String ZZ_ROWMAP_PACKED_0 =
+    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
+    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u01f4\0\u0258\0\u01f4\0\u028a"+
+    "\0\u01f4\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8"+
+    "\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u01f4\0\u01f4\0\u01f4"+
+    "\0\u01f4\0\u01f4\0\u01f4\0\u01f4\0\u01f4\0\u01f4\0\u01f4\0\u01f4"+
+    "\0\u01f4\0\u01f4\0\u01f4\0\u0514\0\u0546\0\u01f4\0\u0578\0\u05aa"+
+    "\0\u05dc\0\u01f4\0\u060e\0\u0640\0\u01f4\0\u01f4\0\u0640\0\u01f4"+
+    "\0\u01f4\0\u01f4\0\u01f4\0\u0672\0\u01f4\0\u01f4\0\u01f4\0\u01f4"+
+    "\0\u01f4\0\u01f4\0\u01f4\0\u01f4\0\u06a4\0\u06d6\0\u0708\0\u01f4"+
+    "\0\u073a\0\u076c\0\u01f4\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866"+
+    "\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6"+
+    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u01f4"+
+    "\0\u0578\0\u01f4\0\u0514\0\u01f4\0\u05aa\0\u0b86\0\u05dc\0\u0bb8"+
+    "\0\u0bea\0\u01f4\0\u01f4\0\u01f4\0\u01f4\0\u0c1c\0\u01f4\0\u0c4e"+
+    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde"+
+    "\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e"+
+    "\0\u0fa0\0\u0fd2\0\u1004\0\u1036\0\u01f4\0\u1068\0\u01f4\0\u109a"+
+    "\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194\0\u0352\0\u11c6\0\u11f8"+
+    "\0\u122a\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388"+
+    "\0\u13ba\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518"+
+    "\0\u154a\0\u0352\0\u157c\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676"+
+    "\0\u16a8\0\u16da\0\u170c\0\u173e\0\u0352\0\u1770\0\u0352\0\u17a2"+
+    "\0\u17d4\0\u1806\0\u1838\0\u0352\0\u186a\0\u189c\0\u0352\0\u18ce"+
+    "\0\u1900\0\u1932\0\u0352\0\u1964\0\u1996\0\u0352\0\u19c8\0\u19fa"+
+    "\0\u0352\0\u0352\0\u0352\0\u1a2c\0\u1a5e\0\u0352\0\u1a90\0\u1ac2"+
+    "\0\u1af4\0\u0352\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u0352\0\u1bee"+
+    "\0\u1c20\0\u1c52\0\u0352\0\u0352\0\u1c84\0\u0352\0\u1cb6\0\u0352"+
+    "\0\u0352\0\u1ce8\0\u0352\0\u1d1a\0\u1d4c\0\u0352";
+
+  private static int [] zzUnpackRowMap() {
+    int [] result = new int[222];
+    int offset = 0;
+    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
+    return result;
+  }
+
+  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
+    int i = 0;  /* index in packed string  */
+    int j = offset;  /* index in unpacked array */
+    int l = packed.length();
+    while (i < l) {
+      int high = packed.charAt(i++) << 16;
+      result[j++] = high | packed.charAt(i++);
+    }
+    return j;
+  }
+
+  /** 
+   * The transition table of the DFA
+   */
+  private static final int [] ZZ_TRANS = zzUnpackTrans();
+
+  private static final String ZZ_TRANS_PACKED_0 =
+    "\1\13\1\14\1\13\1\15\1\13\1\16\1\17\1\20"+
+    "\1\21\1\22\1\23\1\24\2\25\1\26\1\27\3\25"+
+    "\1\30\3\25\1\31\1\32\1\33\1\34\1\35\5\25"+
+    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
+    "\1\46\1\47\1\50\1\51\1\25\1\13\1\52\1\53"+
+    "\1\13\1\54\1\55\1\56\1\57\1\13\56\54\1\55"+
+    "\1\56\1\60\1\61\55\54\1\62\1\63\3\62\1\64"+
+    "\44\62\1\65\1\66\3\62\1\52\1\53\1\62\1\13"+
+    "\1\14\3\13\1\67\35\13\1\70\1\71\12\13\1\52"+
+    "\1\53\1\13\1\62\1\63\3\62\1\64\1\72\1\62"+
+    "\1\73\22\62\1\74\5\62\1\75\1\76\1\77\1\100"+
+    "\1\101\1\102\3\62\1\65\1\103\3\62\1\52\1\53"+
+    "\1\62\1\13\1\14\55\13\1\104\1\13\1\105\1\13"+
+    "\1\14\56\13\1\104\1\106\1\13\1\107\1\110\60\13"+
+    "\1\14\1\13\1\111\56\13\64\0\1\13\62\0\1\112"+
+    "\1\0\1\113\63\0\1\114\63\0\1\25\1\115\7\25"+
+    "\1\116\1\25\1\117\14\25\14\0\2\25\14\0\14\25"+
+    "\1\120\13\25\14\0\2\25\14\0\15\25\1\121\12\25"+
+    "\14\0\2\25\14\0\30\25\14\0\2\25\14\0\22\25"+
+    "\1\122\4\25\1\123\14\0\2\25\14\0\7\25\1\124"+
+    "\12\25\1\125\5\25\14\0\2\25\14\0\11\25\1\126"+
+    "\12\25\1\127\3\25\14\0\2\25\14\0\5\25\1\130"+
+    "\22\25\14\0\2\25\14\0\10\25\1\131\17\25\14\0"+
+    "\2\25\14\0\12\25\1\132\1\133\7\25\1\134\4\25"+
+    "\14\0\2\25\14\0\6\25\1\135\21\25\14\0\2\25"+
+    "\14\0\1\25\1\136\26\25\14\0\2\25\3\0\1\54"+
+    "\2\0\1\137\1\0\55\54\2\0\1\56\57\0\1\54"+
+    "\2\140\1\141\1\140\1\142\54\54\1\143\2\144\1\145"+
+    "\1\144\1\142\54\143\3\0\1\146\1\147\57\0\1\62"+
+    "\62\0\1\150\1\0\1\113\72\0\1\151\122\0\1\152"+
+    "\1\0\1\153\60\0\1\154\1\153\2\0\1\110\64\0"+
+    "\1\155\57\0\1\156\65\0\1\157\63\0\2\25\1\160"+
+    "\25\25\14\0\2\25\14\0\6\25\1\161\1\25\1\162"+
+    "\17\25\14\0\2\25\14\0\14\25\1\163\13\25\14\0"+
+    "\2\25\14\0\20\25\1\164\7\25\14\0\2\25\14\0"+
+    "\1\25\1\165\26\25\14\0\2\25\14\0\13\25\1\166"+
+    "\14\25\14\0\2\25\14\0\12\25\1\167\15\25\14\0"+
+    "\2\25\14\0\1\170\27\25\14\0\2\25\14\0\12\25"+
+    "\1\171\15\25\14\0\2\25\14\0\1\25\1\172\26\25"+
+    "\14\0\2\25\14\0\11\25\1\173\16\25\14\0\2\25"+
+    "\14\0\21\25\1\174\6\25\14\0\2\25\14\0\15\25"+
+    "\1\175\12\25\14\0\2\25\14\0\1\25\1\176\7\25"+
+    "\1\177\16\25\14\0\2\25\14\0\1\200\27\25\14\0"+
+    "\2\25\14\0\22\25\1\201\5\25\14\0\2\25\14\0"+
+    "\22\25\1\202\5\25\14\0\2\25\14\0\12\25\1\203"+
+    "\15\25\14\0\2\25\3\0\1\54\2\140\1\137\1\140"+
+    "\1\0\54\54\3\144\1\146\1\144\1\0\54\144\3\0"+
+    "\1\204\115\0\1\205\25\0\1\206\1\0\1\207\65\0"+
+    "\3\25\1\210\24\25\14\0\2\25\14\0\17\25\1\211"+
+    "\10\25\14\0\2\25\14\0\12\25\1\212\15\25\14\0"+
+    "\2\25\14\0\15\25\1\213\12\25\14\0\2\25\14\0"+
+    "\12\25\1\214\15\25\14\0\2\25\14\0\20\25\1\215"+
+    "\7\25\14\0\2\25\14\0\7\25\1\216\20\25\14\0"+
+    "\2\25\14\0\5\25\1\217\22\25\14\0\2\25\14\0"+
+    "\10\25\1\220\4\25\1\221\12\25\14\0\2\25\14\0"+
+    "\5\25\1\222\22\25\14\0\2\25\14\0\22\25\1\223"+
+    "\5\25\14\0\2\25\14\0\10\25\1\224\17\25\14\0"+
+    "\2\25\14\0\1\25\1\225\26\25\14\0\2\25\14\0"+
+    "\1\25\1\226\26\25\14\0\2\25\14\0\12\25\1\227"+
+    "\15\25\14\0\2\25\14\0\6\25\1\230\21\25\14\0"+
+    "\2\25\14\0\5\25\1\231\22\25\14\0\2\25\14\0"+
+    "\2\25\1\232\25\25\14\0\2\25\14\0\1\25\1\233"+
+    "\26\25\14\0\2\25\14\0\6\25\1\234\21\25\14\0"+
+    "\2\25\10\0\1\207\57\0\1\206\67\0\1\25\1\235"+
+    "\26\25\14\0\2\25\14\0\1\25\1\236\26\25\14\0"+
+    "\2\25\14\0\5\25\1\237\22\25\14\0\2\25\14\0"+
+    "\6\25\1\240\21\25\14\0\2\25\14\0\11\25\1\241"+
+    "\16\25\14\0\2\25\14\0\20\25\1\242\7\25\14\0"+
+    "\2\25\14\0\22\25\1\243\5\25\14\0\2\25\14\0"+
+    "\11\25\1\244\16\25\14\0\2\25\14\0\5\25\1\245"+
+    "\22\25\14\0\2\25\14\0\11\25\1\246\16\25\14\0"+
+    "\2\25\14\0\20\25\1\247\7\25\14\0\2\25\14\0"+
+    "\26\25\1\250\1\25\14\0\2\25\14\0\13\25\1\251"+
+    "\14\25\14\0\2\25\14\0\12\25\1\252\15\25\14\0"+
+    "\2\25\14\0\6\25\1\253\21\25\14\0\2\25\14\0"+
+    "\2\25\1\254\25\25\14\0\2\25\14\0\11\25\1\255"+
+    "\16\25\14\0\2\25\14\0\24\25\1\256\3\25\14\0"+
+    "\2\25\14\0\15\25\1\257\12\25\14\0\2\25\14\0"+
+    "\17\25\1\260\10\25\14\0\2\25\14\0\4\25\1\261"+
+    "\23\25\14\0\2\25\14\0\12\25\1\262\15\25\14\0"+
+    "\2\25\14\0\2\25\1\263\25\25\14\0\2\25\14\0"+
+    "\2\25\1\264\25\25\14\0\2\25\14\0\1\25\1\265"+
+    "\26\25\14\0\2\25\14\0\16\25\1\266\11\25\14\0"+
+    "\2\25\14\0\12\25\1\267\15\25\14\0\2\25\14\0"+
+    "\7\25\1\270\20\25\14\0\2\25\14\0\21\25\1\271"+
+    "\6\25\14\0\2\25\14\0\6\25\1\272\21\25\14\0"+
+    "\2\25\14\0\20\25\1\273\7\25\14\0\2\25\14\0"+
+    "\15\25\1\274\12\25\14\0\2\25\14\0\6\25\1\275"+
+    "\21\25\14\0\2\25\14\0\2\25\1\276\25\25\14\0"+
+    "\2\25\14\0\12\25\1\277\15\25\14\0\2\25\14\0"+
+    "\11\25\1\300\16\25\14\0\2\25\14\0\5\25\1\301"+
+    "\22\25\14\0\2\25\14\0\5\25\1\302\22\25\14\0"+
+    "\2\25\14\0\5\25\1\303\22\25\14\0\2\25\14\0"+
+    "\12\25\1\304\15\25\14\0\2\25\14\0\2\25\1\305"+
+    "\25\25\14\0\2\25\14\0\20\25\1\306\7\25\14\0"+
+    "\2\25\14\0\5\25\1\307\22\25\14\0\2\25\14\0"+
+    "\1\25\1\310\26\25\14\0\2\25\14\0\5\25\1\311"+
+    "\22\25\14\0\2\25\14\0\12\25\1\312\15\25\14\0"+
+    "\2\25\14\0\15\25\1\313\12\25\14\0\2\25\14\0"+
+    "\21\25\1\314\6\25\14\0\2\25\14\0\10\25\1\315"+
+    "\17\25\14\0\2\25\14\0\5\25\1\316\22\25\14\0"+
+    "\2\25\14\0\12\25\1\317\15\25\14\0\2\25\14\0"+
+    "\22\25\1\320\5\25\14\0\2\25\14\0\2\25\1\321"+
+    "\25\25\14\0\2\25\14\0\22\25\1\322\5\25\14\0"+
+    "\2\25\14\0\5\25\1\323\22\25\14\0\2\25\14\0"+
+    "\1\324\27\25\14\0\2\25\14\0\22\25\1\325\5\25"+
+    "\14\0\2\25\14\0\16\25\1\326\11\25\14\0\2\25"+
+    "\14\0\12\25\1\327\15\25\14\0\2\25\14\0\5\25"+
+    "\1\330\22\25\14\0\2\25\14\0\12\25\1\331\15\25"+
+    "\14\0\2\25\14\0\6\25\1\332\21\25\14\0\2\25"+
+    "\14\0\20\25\1\333\7\25\14\0\2\25\14\0\25\25"+
+    "\1\334\2\25\14\0\2\25\14\0\5\25\1\335\22\25"+
+    "\14\0\2\25\14\0\16\25\1\336\11\25\14\0\2\25"+
+    "\3\0";
+
+  private static int [] zzUnpackTrans() {
+    int [] result = new int[7550];
+    int offset = 0;
+    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
+    return result;
+  }
+
+  private static int zzUnpackTrans(String packed, int offset, int [] result) {
+    int i = 0;       /* index in packed string  */
+    int j = offset;  /* index in unpacked array */
+    int l = packed.length();
+    while (i < l) {
+      int count = packed.charAt(i++);
+      int value = packed.charAt(i++);
+      value--;
+      do result[j++] = value; while (--count > 0);
+    }
+    return j;
+  }
+
+
+  /* error codes */
+  private static final int ZZ_UNKNOWN_ERROR = 0;
+  private static final int ZZ_NO_MATCH = 1;
+  private static final int ZZ_PUSHBACK_2BIG = 2;
+
+  /* error messages for the codes above */
+  private static final String ZZ_ERROR_MSG[] = {
+    "Unkown internal scanner error",
+    "Error: could not match input",
+    "Error: pushback value was too large"
+  };
+
+  /**
+   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
+   */
+  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();
+
+  private static final String ZZ_ATTRIBUTE_PACKED_0 =
+    "\12\0\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
+    "\14\1\16\11\2\1\1\11\2\3\1\1\1\11\2\1"+
+    "\2\11\1\1\4\11\1\1\10\11\3\1\1\11\2\1"+
+    "\1\11\1\0\22\1\1\2\1\15\1\2\1\11\1\5"+
+    "\1\15\2\2\1\0\1\1\1\0\4\11\1\1\1\11"+
+    "\24\1\1\0\1\11\1\1\1\11\127\1";
+
+  private static int [] zzUnpackAttribute() {
+    int [] result = new int[222];
+    int offset = 0;
+    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
+    return result;
+  }
+
+  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
+    int i = 0;       /* index in packed string  */
+    int j = offset;  /* index in unpacked array */
+    int l = packed.length();
+    while (i < l) {
+      int count = packed.charAt(i++);
+      int value = packed.charAt(i++);
+      do result[j++] = value; while (--count > 0);
+    }
+    return j;
+  }
+
+  /** the input device */
+  private java.io.Reader zzReader;
+
+  /** the current state of the DFA */
+  private int zzState;
+
+  /** the current lexical state */
+  private int zzLexicalState = YYINITIAL;
+
+  /** this buffer contains the current text to be matched and is
+      the source of the yytext() string */
+  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
+
+  /** the textposition at the last accepting state */
+  private int zzMarkedPos;
+
+  /** the textposition at the last state to be included in yytext */
+  private int zzPushbackPos;
+
+  /** the current text position in the buffer */
+  private int zzCurrentPos;
+
+  /** startRead marks the beginning of the yytext() string in the buffer */
+  private int zzStartRead;
+
+  /** endRead marks the last character in the buffer, that has been read
+      from input */
+  private int zzEndRead;
+
+  /** number of newlines encountered up to the start of the matched text */
+  private int yyline;
+
+  /** the number of characters up to the start of the matched text */
+  private int yychar;
+
+  /**
+   * the number of characters from the last newline up to the start of the 
+   * matched text
+   */
+  private int yycolumn;
+
+  /** 
+   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
+   */
+  private boolean zzAtBOL = true;
+
+  /** zzAtEOF == true <=> the scanner is at the EOF */
+  private boolean zzAtEOF;
+
+  /** denotes if the user-EOF-code has already been executed */
+  private boolean zzEOFDone;
+
+  /* user code: */
+
+    private int classDepth = 0;
+    private int nestingDepth = 0;
+    private int assignmentDepth = 0;
+    private int stateDepth = 0;
+    private int[] stateStack = new int[10];
+    private boolean javaDocNewLine;
+    private boolean javaDocStartedContent;
+    private StringBuffer codeBody = new StringBuffer(8192);
+    private boolean newMode;
+    private boolean enumMode;
+    private boolean appendingToCodeBody;
+    private boolean shouldCaptureCodeBody;
+
+    public void setCaptureCodeBody(boolean shouldCaptureCodeBody) {
+        this.shouldCaptureCodeBody = shouldCaptureCodeBody;
+    }
+
+    public String text() {
+        return yytext();
+    }
+
+    public int lex() throws java.io.IOException {
+        return yylex();
+    }
+    
+    public int getLine() {
+        return yyline + 1;
+    }
+
+    public int getColumn() {
+        return yycolumn + 1;
+    }
+
+    private void pushState(int newState) {
+        stateStack[stateDepth++] = zzLexicalState;
+        yybegin(newState);
+    }
+
+    private void popState() {
+        yybegin(stateStack[--stateDepth]);
+    }
+    
+    public String getCodeBody(){
+        String s = codeBody.toString();
+        codeBody = new StringBuffer(8192);
+        return s;
+    }
+
+
+
+  /**
+   * Creates a new scanner
+   * There is also a java.io.InputStream version of this constructor.
+   *
+   * @param   in  the java.io.Reader to read input from.
+   */
+  public JFlexLexer(java.io.Reader in) {
+    this.zzReader = in;
+  }
+
+  /**
+   * Creates a new scanner.
+   * There is also java.io.Reader version of this constructor.
+   *
+   * @param   in  the java.io.Inputstream to read input from.
+   */
+  public JFlexLexer(java.io.InputStream in) {
+    this(new java.io.InputStreamReader(in));
+  }
+
+  /** 
+   * Unpacks the compressed character translation table.
+   *
+   * @param packed   the packed character translation table
+   * @return         the unpacked character translation table
+   */
+  private static char [] zzUnpackCMap(String packed) {
+    char [] map = new char[0x10000];
+    int i = 0;  /* index in packed string  */
+    int j = 0;  /* index in unpacked array */
+    while (i < 1758) {
+      int  count = packed.charAt(i++);
+      char value = packed.charAt(i++);
+      do map[j++] = value; while (--count > 0);
+    }
+    return map;
+  }
+
+
+  /**
+   * Refills the input buffer.
+   *
+   * @return      <code>false</code>, iff there was new input.
+   * 
+   * @exception   java.io.IOException  if any I/O-Error occurs
+   */
+  private boolean zzRefill() throws java.io.IOException {
+
+    /* first: make room (if you can) */
+    if (zzStartRead > 0) {
+      System.arraycopy(zzBuffer, zzStartRead,
+                       zzBuffer, 0,
+                       zzEndRead-zzStartRead);
+
+      /* translate stored positions */
+      zzEndRead-= zzStartRead;
+      zzCurrentPos-= zzStartRead;
+      zzMarkedPos-= zzStartRead;
+      zzPushbackPos-= zzStartRead;
+      zzStartRead = 0;
+    }
+
+    /* is the buffer big enough? */
+    if (zzCurrentPos >= zzBuffer.length) {
+      /* if not: blow it up */
+      char newBuffer[] = new char[zzCurrentPos*2];
+      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
+      zzBuffer = newBuffer;
+    }
+
+    /* finally: fill the buffer with new input */
+    int numRead = zzReader.read(zzBuffer, zzEndRead,
+                                            zzBuffer.length-zzEndRead);
+
+    if (numRead < 0) {
+      return true;
+    }
+    else {
+      zzEndRead+= numRead;
+      return false;
+    }
+  }
+
+    
+  /**
+   * Closes the input stream.
+   */
+  public final void yyclose() throws java.io.IOException {
+    zzAtEOF = true;            /* indicate end of file */
+    zzEndRead = zzStartRead;  /* invalidate buffer    */
+
+    if (zzReader != null)
+      zzReader.close();
+  }
+
+
+  /**
+   * Resets the scanner to read from a new input stream.
+   * Does not close the old reader.
+   *
+   * All internal variables are reset, the old input stream 
+   * <b>cannot</b> be reused (internal buffer is discarded and lost).
+   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
+   *
+   * @param reader   the new input stream 
+   */
+  public final void yyreset(java.io.Reader reader) {
+    zzReader = reader;
+    zzAtBOL  = true;
+    zzAtEOF  = false;
+    zzEndRead = zzStartRead = 0;
+    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
+    yyline = yychar = yycolumn = 0;
+    zzLexicalState = YYINITIAL;
+  }
+
+
+  /**
+   * Returns the current lexical state.
+   */
+  public final int yystate() {
+    return zzLexicalState;
+  }
+
+
+  /**
+   * Enters a new lexical state
+   *
+   * @param newState the new lexical state
+   */
+  public final void yybegin(int newState) {
+    zzLexicalState = newState;
+  }
+
+
+  /**
+   * Returns the text matched by the current regular expression.
+   */
+  public final String yytext() {
+    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
+  }
+
+
+  /**
+   * Returns the character at position <tt>pos</tt> from the 
+   * matched text. 
+   * 
+   * It is equivalent to yytext().charAt(pos), but faster
+   *
+   * @param pos the position of the character to fetch. 
+   *            A value from 0 to yylength()-1.
+   *
+   * @return the character at position pos
+   */
+  public final char yycharat(int pos) {
+    return zzBuffer[zzStartRead+pos];
+  }
+
+
+  /**
+   * Returns the length of the matched text region.
+   */
+  public final int yylength() {
+    return zzMarkedPos-zzStartRead;
+  }
+
+
+  /**
+   * Reports an error that occured while scanning.
+   *
+   * In a wellformed scanner (no or only correct usage of 
+   * yypushback(int) and a match-all fallback rule) this method 
+   * will only be called with things that "Can't Possibly Happen".
+   * If this method is called, something is seriously wrong
+   * (e.g. a JFlex bug producing a faulty scanner etc.).
+   *
+   * Usual syntax/scanner level error handling should be done
+   * in error fallback rules.
+   *
+   * @param   errorCode  the code of the errormessage to display
+   */
+  private void zzScanError(int errorCode) {
+    String message;
+    try {
+      message = ZZ_ERROR_MSG[errorCode];
+    }
+    catch (ArrayIndexOutOfBoundsException e) {
+      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
+    }
+
+    throw new Error(message);
+  } 
+
+
+  /**
+   * Pushes the specified amount of characters back into the input stream.
+   *
+   * They will be read again by then next call of the scanning method
+   *
+   * @param number  the number of characters to be read again.
+   *                This number must not be greater than yylength()!
+   */
+  public void yypushback(int number)  {
+    if ( number > yylength() )
+      zzScanError(ZZ_PUSHBACK_2BIG);
+
+    zzMarkedPos -= number;
+  }
+
+
+  /**
+   * Contains user EOF-code, which will be executed exactly once,
+   * when the end of file is reached
+   */
+  private void zzDoEOF() throws java.io.IOException {
+    if (!zzEOFDone) {
+      zzEOFDone = true;
+      yyclose();
+    }
+  }
+
+
+  /**
+   * Resumes scanning until the next regular expression is matched,
+   * the end of input is encountered or an I/O-Error occurs.
+   *
+   * @return      the next token
+   * @exception   java.io.IOException  if any I/O-Error occurs
+   */
+  public int yylex() throws java.io.IOException {
+    int zzInput;
+    int zzAction;
+
+    // cached fields:
+    int zzCurrentPosL;
+    int zzMarkedPosL;
+    int zzEndReadL = zzEndRead;
+    char [] zzBufferL = zzBuffer;
+    char [] zzCMapL = ZZ_CMAP;
+
+    int [] zzTransL = ZZ_TRANS;
+    int [] zzRowMapL = ZZ_ROWMAP;
+    int [] zzAttrL = ZZ_ATTRIBUTE;
+    int zzPushbackPosL = zzPushbackPos = -1;
+    boolean zzWasPushback;
+
+    while (true) {
+      zzMarkedPosL = zzMarkedPos;
+
+      boolean zzR = false;
+      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
+                                                             zzCurrentPosL++) {
+        switch (zzBufferL[zzCurrentPosL]) {
+        case '\u000B':
+        case '\u000C':
+        case '\u0085':
+        case '\u2028':
+        case '\u2029':
+          yyline++;
+          yycolumn = 0;
+          zzR = false;
+          break;
+        case '\r':
+          yyline++;
+          yycolumn = 0;
+          zzR = true;
+          break;
+        case '\n':
+          if (zzR)
+            zzR = false;
+          else {
+            yyline++;
+            yycolumn = 0;
+          }
+          break;
+        default:
+          zzR = false;
+          yycolumn++;
+        }
+      }
+
+      if (zzR) {
+        // peek one character ahead if it is \n (if we have counted one line too much)
+        boolean zzPeek;
+        if (zzMarkedPosL < zzEndReadL)
+          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
+        else if (zzAtEOF)
+          zzPeek = false;
+        else {
+          boolean eof = zzRefill();
+          zzEndReadL = zzEndRead;
+          zzMarkedPosL = zzMarkedPos;
+          zzBufferL = zzBuffer;
+          if (eof) 
+            zzPeek = false;
+          else 
+            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
+        }
+        if (zzPeek) yyline--;
+      }
+      if (zzMarkedPosL > zzStartRead) {
+        switch (zzBufferL[zzMarkedPosL-1]) {
+        case '\n':
+        case '\u000B':
+        case '\u000C':
+        case '\u0085':
+        case '\u2028':
+        case '\u2029':
+          zzAtBOL = true;
+          break;
+        case '\r': 
+          if (zzMarkedPosL < zzEndReadL)
+            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
+          else if (zzAtEOF)
+            zzAtBOL = false;
+          else {
+            boolean eof = zzRefill();
+            zzMarkedPosL = zzMarkedPos;
+            zzEndReadL = zzEndRead;
+            zzBufferL = zzBuffer;
+            if (eof) 
+              zzAtBOL = false;
+            else 
+              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
+          }
+          break;
+        default:
+          zzAtBOL = false;
+        }
+      }
+      zzAction = -1;
+
+      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
+  
+      if (zzAtBOL)
+        zzState = ZZ_LEXSTATE[zzLexicalState+1];
+      else
+        zzState = ZZ_LEXSTATE[zzLexicalState];
+
+      zzWasPushback = false;
+
+      zzForAction: {
+        while (true) {
+    
+          if (zzCurrentPosL < zzEndReadL)
+            zzInput = zzBufferL[zzCurrentPosL++];
+          else if (zzAtEOF) {
+            zzInput = YYEOF;
+            break zzForAction;
+          }
+          else {
+            // store back cached positions
+            zzCurrentPos  = zzCurrentPosL;
+            zzMarkedPos   = zzMarkedPosL;
+            zzPushbackPos = zzPushbackPosL;
+            boolean eof = zzRefill();
+            // get translated positions and possibly new buffer
+            zzCurrentPosL  = zzCurrentPos;
+            zzMarkedPosL   = zzMarkedPos;
+            zzBufferL      = zzBuffer;
+            zzEndReadL     = zzEndRead;
+            zzPushbackPosL = zzPushbackPos;
+            if (eof) {
+              zzInput = YYEOF;
+              break zzForAction;
+            }
+            else {
+              zzInput = zzBufferL[zzCurrentPosL++];
+            }
+          }
+          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
+          if (zzNext == -1) break zzForAction;
+          zzState = zzNext;
+
+          int zzAttributes = zzAttrL[zzState];
+          if ( (zzAttributes & 2) == 2 )
+            zzPushbackPosL = zzCurrentPosL;
+
+          if ( (zzAttributes & 1) == 1 ) {
+            zzWasPushback = (zzAttributes & 4) == 4;
+            zzAction = zzState;
+            zzMarkedPosL = zzCurrentPosL;
+            if ( (zzAttributes & 8) == 8 ) break zzForAction;
+          }
+
+        }
+      }
+
+      // store back cached position
+      zzMarkedPos = zzMarkedPosL;
+      if (zzWasPushback)
+        zzMarkedPos = zzPushbackPosL;
+
+      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
+        case 51: 
+          { if (appendingToCodeBody) { codeBody.append("/**/"); }
+          }
+        case 72: break;
+        case 43: 
+          { /* ignore */
+          }
+        case 73: break;
+        case 64: 
+          { return Parser.ABSTRACT;
+          }
+        case 74: break;
+        case 37: 
+          { if (appendingToCodeBody) { codeBody.append('"');    } popState();
+          }
+        case 75: break;
+        case 27: 
+          { nestingDepth--;
+        if (nestingDepth == classDepth) {
+            popState();
+            return Parser.PARENBLOCK;
+        }
+          }
+        case 76: break;
+        case 67: 
+          { return Parser.PROTECTED;
+          }
+        case 77: break;
+        case 55: 
+          { return Parser.FINAL;
+          }
+        case 78: break;
+        case 9: 
+          { nestingDepth++;
+        if (enumMode) {
+          pushState(PARENBLOCK);
+        } else {
+          return Parser.PARENOPEN;
+        }
+          }
+        case 79: break;
+        case 12: 
+          { return Parser.GREATERTHAN;
+          }
+        case 80: break;
+        case 41: 
+          { return Parser.JAVADOCTOKEN;
+          }
+        case 81: break;
+        case 20: 
+          { if (appendingToCodeBody) { codeBody.append('\''); } pushState(CHAR);
+          }
+        case 82: break;
+        case 70: 
+          { return Parser.IMPLEMENTS;
+          }
+        case 83: break;
+        case 2: 
+          { return Parser.STAR;
+          }
+        case 84: break;
+        case 50: 
+          { codeBody.append("new");
+        if (nestingDepth==assignmentDepth) {
+            newMode=true;
+        }
+          }
+        case 85: break;
+        case 49: 
+          { return Parser.DOTDOTDOT;
+          }
+        case 86: break;
+        case 56: 
+          { return Parser.PUBLIC;
+          }
+        case 87: break;
+        case 33: 
+          { codeBody.append(')');
+        nestingDepth--; 
+        if (nestingDepth < assignmentDepth) {
+            appendingToCodeBody = true; 
+            popState(); 
+            return Parser.PARENCLOSE; 
+        }
+          }
+        case 88: break;
+        case 36: 
+          { codeBody.append('}'); nestingDepth--;
+          }
+        case 89: break;
+        case 71: 
+          { return Parser.SYNCHRONIZED;
+          }
+        case 90: break;
+        case 68: 
+          { classDepth++;
+        return Parser.INTERFACE;
+          }
+        case 91: break;
+        case 66: 
+          { return Parser.STRICTFP;
+          }
+        case 92: break;
+        case 59: 
+          { return Parser.STATIC;
+          }
+        case 93: break;
+        case 34: 
+          { codeBody.append('<');
+        if (newMode) { 
+            nestingDepth++; 
+        }
+          }
+        case 94: break;
+        case 42: 
+          { popState(); return Parser.JAVADOCEND;
+          }
+        case 95: break;
+        case 23: 
+          { codeBody.append(yytext());
+          }
+        case 96: break;
+        case 26: 
+          { nestingDepth++;
+          }
+        case 97: break;
+        case 62: 
+          { return Parser.PRIVATE;
+          }
+        case 98: break;
+        case 24: 
+          { codeBody.append('{'); nestingDepth++;
+          }
+        case 99: break;
+        case 13: 
+          { return Parser.AMPERSAND;
+          }
+        case 100: break;
+        case 18: 
+          { assignmentDepth = nestingDepth;
+        appendingToCodeBody = true;
+        pushState(ASSIGNMENT);
+          }
+        case 101: break;
+        case 63: 
+          { return Parser.EXTENDS;
+          }
+        case 102: break;
+        case 48: 
+          { pushState(JAVADOC); 
+        javaDocNewLine = true; 
+        return Parser.JAVADOCSTART;
+          }
+        case 103: break;
+        case 45: 
+          { if (appendingToCodeBody) { codeBody.append("\\\\"); }
+          }
+        case 104: break;
+        case 47: 
+          { if (appendingToCodeBody) { codeBody.append("*/"); } popState();
+          }
+        case 105: break;
+        case 7: 
+          { nestingDepth++; return Parser.SQUAREOPEN;
+          }
+        case 106: break;
+        case 44: 
+          { if (appendingToCodeBody) { codeBody.append("\\\""); }
+          }
+        case 107: break;
+        case 6: 
+          { return Parser.IDENTIFIER;
+          }
+        case 108: break;
+        case 58: 
+          { return Parser.THROWS;
+          }
+        case 109: break;
+        case 1: 
+          { if (appendingToCodeBody) { codeBody.append(yytext()); }
+          }
+        case 110: break;
+        case 14: 
+          { return Parser.QUERY;
+          }
+        case 111: break;
+        case 10: 
+          { nestingDepth--; return Parser.PARENCLOSE;
+          }
+        case 112: break;
+        case 39: 
+          { if (appendingToCodeBody) { codeBody.append("/*"); } pushState(MULTILINECOMMENT);
+          }
+        case 113: break;
+        case 32: 
+          { codeBody.append('('); nestingDepth++;
+          }
+        case 114: break;
+        case 60: 
+          { return Parser.NATIVE;
+          }
+        case 115: break;
+        case 40: 
+          { if (appendingToCodeBody) { codeBody.append("//"); } pushState(SINGLELINECOMMENT);
+          }
+        case 116: break;
+        case 25: 
+          { nestingDepth--;
+        if (nestingDepth == classDepth) {
+            popState();
+            appendingToCodeBody = false;
+            return Parser.CODEBLOCK;
+        } else {
+            codeBody.append('}');
+        }
+          }
+        case 117: break;
+        case 22: 
+          { javaDocNewLine = true; return Parser.JAVADOCEOL;
+          }
+        case 118: break;
+        case 5: 
+          { return Parser.COMMA;
+          }
+        case 119: break;
+        case 52: 
+          { classDepth++;
+        enumMode = true;
+        return Parser.ENUM;
+          }
+        case 120: break;
+        case 61: 
+          { return Parser.PACKAGE;
+          }
+        case 121: break;
+        case 65: 
+          { return Parser.VOLATILE;
+          }
+        case 122: break;
+        case 15: 
+          { return Parser.AT;
+          }
+        case 123: break;
+        case 17: 
+          { nestingDepth--;
+        if (nestingDepth == classDepth - 1) {
+            classDepth--;
+        }
+        return Parser.BRACECLOSE;
+          }
+        case 124: break;
+        case 35: 
+          { codeBody.append('>');
+        if (newMode) {
+            nestingDepth--;
+        	if (nestingDepth==assignmentDepth) { 
+                newMode=false;
+            }
+        }
+          }
+        case 125: break;
+        case 31: 
+          { codeBody.append(']'); nestingDepth--;
+          }
+        case 126: break;
+        case 21: 
+          { int token = Parser.JAVADOCTOKEN;
+        if (javaDocNewLine && yycharat(0) == '@') {
+                token = Parser.JAVADOCTAG;
+        }
+        javaDocNewLine = false;
+        return token;
+          }
+        case 127: break;
+        case 8: 
+          { nestingDepth--; return Parser.SQUARECLOSE;
+          }
+        case 128: break;
+        case 57: 
+          { return Parser.IMPORT;
+          }
+        case 129: break;
+        case 54: 
+          { return Parser.SUPER;
+          }
+        case 130: break;
+        case 28: 
+          { if (nestingDepth == assignmentDepth) {
+            appendingToCodeBody = true;
+            popState(); 
+            return Parser.SEMI; 
+        } else {
+            codeBody.append(';');
+        }
+          }
+        case 131: break;
+        case 30: 
+          { codeBody.append('['); nestingDepth++;
+          }
+        case 132: break;
+        case 16: 
+          { nestingDepth++;
+        if (nestingDepth == classDepth + 1) {
+            appendingToCodeBody = true;
+            pushState(CODEBLOCK);
+        }
+        else {
+            return Parser.BRACEOPEN;
+        }
+          }
+        case 133: break;
+        case 3: 
+          { enumMode = false; return Parser.SEMI;
+          }
+        case 134: break;
+        case 69: 
+          { return Parser.TRANSIENT;
+          }
+        case 135: break;
+        case 29: 
+          { if (nestingDepth == assignmentDepth) {
+            appendingToCodeBody = true;
+            popState(); 
+            return Parser.COMMA; 
+        } else {
+            codeBody.append(',');
+        }
+          }
+        case 136: break;
+        case 53: 
+          { classDepth++;
+        return Parser.CLASS;
+          }
+        case 137: break;
+        case 46: 
+          { if (appendingToCodeBody) { codeBody.append("\\'");  }
+          }
+        case 138: break;
+        case 38: 
+          { if (appendingToCodeBody) { codeBody.append(yytext()); } popState();
+          }
+        case 139: break;
+        case 4: 
+          { return Parser.DOT;
+          }
+        case 140: break;
+        case 11: 
+          { return Parser.LESSTHAN;
+          }
+        case 141: break;
+        case 19: 
+          { if (appendingToCodeBody) { codeBody.append('"');  } pushState(STRING);
+          }
+        case 142: break;
+        default: 
+          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
+            zzAtEOF = true;
+            zzDoEOF();
+              { return 0; }
+          } 
+          else {
+            zzScanError(ZZ_NO_MATCH);
+          }
+      }
+    }
+  }
+
+
+}
