diff -Naur monotone-0.35/constants.cc monotone-0.35-p/constants.cc
--- monotone-0.35/constants.cc	2007-05-07 16:13:36.000000000 +0200
+++ monotone-0.35-p/constants.cc	2007-05-25 17:40:16.000000000 +0200
@@ -13,8 +13,6 @@
 #include "constants.hh"
 #include "numeric_vocab.hh"
 
-#include <boost/static_assert.hpp>
-
 using std::string;
 
 namespace constants
@@ -136,17 +134,6 @@
   size_t const merkle_bitmap_length_in_bits = merkle_num_slots * 2;
   size_t const merkle_bitmap_length_in_bytes = merkle_bitmap_length_in_bits / 8;
 
-  BOOST_STATIC_ASSERT(sizeof(char) == 1);
-  BOOST_STATIC_ASSERT(CHAR_BIT == 8);
-  BOOST_STATIC_ASSERT(merkle_num_tree_levels > 0);
-  BOOST_STATIC_ASSERT(merkle_num_tree_levels < 256);
-  BOOST_STATIC_ASSERT(merkle_fanout_bits > 0);
-  BOOST_STATIC_ASSERT(merkle_fanout_bits < 32);
-  BOOST_STATIC_ASSERT(merkle_hash_length_in_bits > 0);
-  BOOST_STATIC_ASSERT((merkle_hash_length_in_bits % merkle_fanout_bits) == 0);
-  BOOST_STATIC_ASSERT(merkle_bitmap_length_in_bits > 0);
-  BOOST_STATIC_ASSERT((merkle_bitmap_length_in_bits % 8) == 0);
-
   u8 const netcmd_current_protocol_version = 6;
 
   size_t const netcmd_minimum_bytes_to_bother_with_gzip = 0xfff;
@@ -163,6 +150,27 @@
   string const default_encoding("default");
 }
 
+#include <boost/static_assert.hpp>
+
+// constraint checks for fundamental types
+// n.b. sizeof([unsigned] char) is *defined* to be 1 by the C++ standard.
+BOOST_STATIC_ASSERT(std::numeric_limits<unsigned char>::digits == 8);
+BOOST_STATIC_ASSERT(sizeof(u8) == 1);
+BOOST_STATIC_ASSERT(sizeof(u16) == 2);
+BOOST_STATIC_ASSERT(sizeof(u32) == 4);
+BOOST_STATIC_ASSERT(sizeof(u64) == 8);
+
+// constraint checks for relations between constants above
+using namespace constants;
+BOOST_STATIC_ASSERT(merkle_num_tree_levels > 0);
+BOOST_STATIC_ASSERT(merkle_num_tree_levels < 256);
+BOOST_STATIC_ASSERT(merkle_fanout_bits > 0);
+BOOST_STATIC_ASSERT(merkle_fanout_bits < 32);
+BOOST_STATIC_ASSERT(merkle_hash_length_in_bits > 0);
+BOOST_STATIC_ASSERT((merkle_hash_length_in_bits % merkle_fanout_bits) == 0);
+BOOST_STATIC_ASSERT(merkle_bitmap_length_in_bits > 0);
+BOOST_STATIC_ASSERT((merkle_bitmap_length_in_bits % 8) == 0);
+
 // Local Variables:
 // mode: C++
 // fill-column: 76
diff -Naur monotone-0.35/Makefile.am monotone-0.35-p/Makefile.am
--- monotone-0.35/Makefile.am	2007-05-07 16:13:26.000000000 +0200
+++ monotone-0.35-p/Makefile.am	2007-05-25 17:40:16.000000000 +0200
@@ -289,7 +289,6 @@
 # primaries
 
 bin_PROGRAMS = mtn
-check_PROGRAMS = unit_tests tester
 noinst_PROGRAMS = txt2c
 EXTRA_PROGRAMS = usher
 
@@ -498,9 +497,15 @@
 # testsuite stuff (could this possibly be more ugly?)
 
 if BUILD_UNIT_TESTS
+
+check_PROGRAMS = unit_tests tester
 TESTS = unit_tests run_tester_tests run_lua_tests
+
 else
+
+check_PROGRAMS = tester
 TESTS = run_tester_tests run_lua_tests
+
 endif
 
 TESTS_ENVIRONMENT=AUTOTEST_PATH="."
diff -Naur monotone-0.35/numeric_vocab.hh monotone-0.35-p/numeric_vocab.hh
--- monotone-0.35/numeric_vocab.hh	2007-05-07 16:13:44.000000000 +0200
+++ monotone-0.35-p/numeric_vocab.hh	2007-05-25 17:40:16.000000000 +0200
@@ -21,13 +21,6 @@
 typedef uint32_t u32;
 typedef uint64_t u64;
 
-BOOST_STATIC_ASSERT(sizeof(char) == 1);
-BOOST_STATIC_ASSERT(CHAR_BIT == 8);
-BOOST_STATIC_ASSERT(sizeof(u8) == 1);
-BOOST_STATIC_ASSERT(sizeof(u16) == 2);
-BOOST_STATIC_ASSERT(sizeof(u32) == 4);
-BOOST_STATIC_ASSERT(sizeof(u64) == 8);
-
 // This is similar to static_cast<T>(v).  The difference is that when T is
 // unsigned, this cast does not sign-extend:
 //   static_cast<u32>((signed char) -1) = 4294967295
@@ -43,8 +36,9 @@
     return static_cast<T>(v);
   else
     {
+      const size_t char_bit = std::numeric_limits<unsigned char>::digits;
       T mask = std::numeric_limits<T>::max();
-      size_t shift = (sizeof(T) - sizeof(V)) * 8;
+      size_t shift = (sizeof(T) - sizeof(V)) * char_bit;
       mask >>= shift;
       return static_cast<T>(v) & mask;
     }
