Description: fix unexpected code execution using reverse()
Origin: provided by upstream
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/python-django/+bug/1309779

Index: python-django-1.5.4/django/core/urlresolvers.py
===================================================================
--- python-django-1.5.4.orig/django/core/urlresolvers.py	2013-09-15 02:28:02.000000000 -0400
+++ python-django-1.5.4/django/core/urlresolvers.py	2014-04-19 09:04:48.762171513 -0400
@@ -244,6 +244,10 @@
         self._reverse_dict = {}
         self._namespace_dict = {}
         self._app_dict = {}
+        # set of dotted paths to all functions and classes that are used in
+        # urlpatterns
+        self._callback_strs = set()
+        self._populated = False
 
     def __repr__(self):
         if isinstance(self.urlconf_name, list) and len(self.urlconf_name):
@@ -261,6 +265,15 @@
         apps = {}
         language_code = get_language()
         for pattern in reversed(self.url_patterns):
+            if hasattr(pattern, '_callback_str'):
+                self._callback_strs.add(pattern._callback_str)
+            elif hasattr(pattern, '_callback'):
+                callback = pattern._callback
+                if not hasattr(callback, '__name__'):
+                    lookup_str = callback.__module__ + "." + callback.__class__.__name__
+                else:
+                    lookup_str = callback.__module__ + "." + callback.__name__
+                self._callback_strs.add(lookup_str)
             p_pattern = pattern.regex.pattern
             if p_pattern.startswith('^'):
                 p_pattern = p_pattern[1:]
@@ -281,6 +294,7 @@
                         namespaces[namespace] = (p_pattern + prefix, sub_pattern)
                     for app_name, namespace_list in pattern.app_dict.items():
                         apps.setdefault(app_name, []).extend(namespace_list)
+                    self._callback_strs.update(pattern._callback_strs)
             else:
                 bits = normalize(p_pattern)
                 lookups.appendlist(pattern.callback, (bits, p_pattern, pattern.default_args))
@@ -289,6 +303,7 @@
         self._reverse_dict[language_code] = lookups
         self._namespace_dict[language_code] = namespaces
         self._app_dict[language_code] = apps
+        self._populated = True
 
     @property
     def reverse_dict(self):
@@ -375,8 +390,13 @@
     def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):
         if args and kwargs:
             raise ValueError("Don't mix *args and **kwargs in call to reverse()!")
+
+        if not self._populated:
+            self._populate()
+
         try:
-            lookup_view = get_callable(lookup_view, True)
+            if lookup_view in self._callback_strs:
+                lookup_view = get_callable(lookup_view, True)
         except (ImportError, AttributeError) as e:
             raise NoReverseMatch("Error importing '%s': %s." % (lookup_view, e))
         possibilities = self.reverse_dict.getlist(lookup_view)
Index: python-django-1.5.4/tests/regressiontests/urlpatterns_reverse/nonimported_module.py
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ python-django-1.5.4/tests/regressiontests/urlpatterns_reverse/nonimported_module.py	2014-04-19 09:04:48.762171513 -0400
@@ -0,0 +1,3 @@
+def view(request):
+    """Stub view"""
+    pass
Index: python-django-1.5.4/tests/regressiontests/urlpatterns_reverse/tests.py
===================================================================
--- python-django-1.5.4.orig/tests/regressiontests/urlpatterns_reverse/tests.py	2013-09-15 02:28:02.000000000 -0400
+++ python-django-1.5.4/tests/regressiontests/urlpatterns_reverse/tests.py	2014-04-19 09:04:48.762171513 -0400
@@ -1,8 +1,11 @@
+# -*- coding: utf-8 -*-
 """
 Unit tests for reverse URL lookups.
 """
 from __future__ import absolute_import, unicode_literals
 
+import sys
+
 from django.conf import settings
 from django.contrib.auth.models import User
 from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist
@@ -290,6 +293,25 @@
         self.assertEqual(res['Location'], '/foo/')
         res = redirect('http://example.com/')
         self.assertEqual(res['Location'], 'http://example.com/')
+        # Assert that we can redirect using UTF-8 strings
+        res = redirect('/æøå/abc/')
+        self.assertEqual(res['Location'], '/%C3%A6%C3%B8%C3%A5/abc/')
+        # Assert that no imports are attempted when dealing with a relative path
+        # (previously, the below would resolve in a UnicodeEncodeError from __import__ )
+        res = redirect('/æøå.abc/')
+        self.assertEqual(res['Location'], '/%C3%A6%C3%B8%C3%A5.abc/')
+        res = redirect('os.path')
+        self.assertEqual(res['Location'], 'os.path')
+
+    def test_no_illegal_imports(self):
+        # modules that are not listed in urlpatterns should not be importable
+        redirect("urlpatterns_reverse.nonimported_module.view")
+        self.assertNotIn("urlpatterns_reverse.nonimported_module", sys.modules)
+
+    def test_reverse_by_path_nested(self):
+        # Views that are added to urlpatterns using include() should be
+        # reversable by doted path.
+        self.assertEqual(reverse('regressiontests.urlpatterns_reverse.views.nested_view'), '/includes/nested_path/')
 
     def test_redirect_view_object(self):
         from .views import absolute_kwargs_view
@@ -559,4 +581,3 @@
         # swallow it.
         self.assertRaises(AttributeError, get_callable,
             'regressiontests.urlpatterns_reverse.views_broken.i_am_broken')
-
Index: python-django-1.5.4/tests/regressiontests/urlpatterns_reverse/urls.py
===================================================================
--- python-django-1.5.4.orig/tests/regressiontests/urlpatterns_reverse/urls.py	2013-09-15 02:21:17.000000000 -0400
+++ python-django-1.5.4/tests/regressiontests/urlpatterns_reverse/urls.py	2014-04-19 09:04:48.762171513 -0400
@@ -7,6 +7,7 @@
 
 other_patterns = patterns('',
     url(r'non_path_include/$', empty_view, name='non_path_include'),
+    url(r'nested_path/$', 'regressiontests.urlpatterns_reverse.views.nested_view'),
 )
 
 urlpatterns = patterns('',
Index: python-django-1.5.4/tests/regressiontests/urlpatterns_reverse/views.py
===================================================================
--- python-django-1.5.4.orig/tests/regressiontests/urlpatterns_reverse/views.py	2013-09-15 02:28:02.000000000 -0400
+++ python-django-1.5.4/tests/regressiontests/urlpatterns_reverse/views.py	2014-04-19 09:04:48.762171513 -0400
@@ -16,6 +16,10 @@
 def defaults_view(request, arg1, arg2):
     pass
 
+def nested_view(request):
+    pass
+
+
 def erroneous_view(request):
     import non_existent
 
