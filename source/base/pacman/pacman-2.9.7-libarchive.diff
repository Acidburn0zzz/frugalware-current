Date: 2005-08-13
Initial Package Version: 2.9.6
Upstream Status: Not submitted - Frugalware specific
Origin: Matthias-Christian Ott <matthias.christian@tiscali.de> and
        Christian Hamar alias krix <krics@linuxforum.hu>
Description: Use libarchive instead of libtar to uncompress packages.
This allows us to create smaller packages using bzip2.
 Makefile.in     |   12 +++---
 configure.in    |    3 +
 scripts/makepkg |   20 ++++++++--
 src/archive.c   |   26 ++++++++++++++
 src/archive.h   |   11 ++++++
 src/package.c   |   57 ++++++++++++++++++-------------
 src/pacman.c    |   58 ++++++++++++++++++++-----------
 src/util.c      |  102 +++++++++++++++++++-------------------------------------
 8 files changed, 169 insertions(+), 120 deletions(-)
diff -Naur pacman-2.9.6.orig/Makefile.in pacman-2.9.6/Makefile.in
--- pacman-2.9.6.orig/Makefile.in	2005-08-13 17:48:00.000000000 +0200
+++ pacman-2.9.6/Makefile.in	2005-08-13 17:48:16.000000000 +0200
@@ -45,9 +45,10 @@
 CXX = @CC@
 CXXFLAGS += @CFLAGS@ -g -Wall -pedantic -fno-exceptions \
             -D_GNU_SOURCE -DPACVER=\"$(PACVER)\" -I. -Ilibftp
-LDFLAGS += @LDFLAGS@ -Llibftp -lftp -ltar -lz
+LDFLAGS += @LDFLAGS@ -Llibftp -lftp -larchive -lz -lbz2 -lacl
 
-SRCS = $(SRCDIR)pacman.c \
+SRCS = $(SRCDIR)archive.c \
+			 $(SRCDIR)pacman.c \
 			 $(SRCDIR)db.c \
 			 $(SRCDIR)util.c \
 			 $(SRCDIR)list.c \
@@ -59,7 +60,8 @@
 			 $(SRCDIR)vercmp.c \
 			 $(SRCDIR)rpmvercmp.c
 
-OBJECTS = $(OBJDIR)pacman.o \
+OBJECTS = $(OBJDIR)archive.o \
+					$(OBJDIR)pacman.o \
 					$(OBJDIR)db.o \
 					$(OBJDIR)util.o \
 					$(OBJDIR)list.o \
@@ -79,8 +81,8 @@
 vercmp: $(OBJDIR)vercmp.o $(OBJDIR)rpmvercmp.o
 	$(CXX) $(OBJDIR)vercmp.o $(OBJDIR)rpmvercmp.o $(CXXFLAGS) -o $@
 
-convertdb: $(OBJDIR)convertdb.o $(OBJDIR)list.o $(OBJDIR)util.o
-	$(CXX) $(OBJDIR)convertdb.o $(OBJDIR)list.o $(OBJDIR)util.o $(LDFLAGS) -o $@
+convertdb: $(OBJDIR)convertdb.o $(OBJDIR)list.o $(OBJDIR)archive.o $(OBJDIR)util.o
+	$(CXX) $(OBJDIR)convertdb.o $(OBJDIR)list.o $(OBJDIR)archive.o $(OBJDIR)util.o $(LDFLAGS) -o $@
 
 .c.o: $(SRCS)
 	$(CXX) $(CXXFLAGS) -o $@ -c $<
diff -Naur pacman-2.9.6.orig/configure.in pacman-2.9.6/configure.in
--- pacman-2.9.6.orig/configure.in	2005-08-13 17:48:00.000000000 +0200
+++ pacman-2.9.6/configure.in	2005-08-13 17:48:16.000000000 +0200
@@ -15,8 +15,9 @@
 
 # Checks for libraries.
 AC_CHECK_LIB([c], [printf], , AC_MSG_ERROR([your libc is broken!]))
-AC_CHECK_LIB([tar], [tar_open], , AC_MSG_ERROR([missing libtar]))
 AC_CHECK_LIB([z], [gzread], , AC_MSG_ERROR([missing zlib]))
+AC_CHECK_LIB([bz2], [BZ2_bzDecompressInit], , AC_MSG_ERROR([missing bzip2]))
+AC_CHECK_LIB([archive], [archive_read_new], , AC_MSG_ERROR([missing libarchive]))
 
 # Checks for header files.
 AC_HEADER_DIRENT
diff -Naur pacman-2.9.6.orig/scripts/makepkg pacman-2.9.6/scripts/makepkg
--- pacman-2.9.6.orig/scripts/makepkg	2005-08-13 17:48:00.000000000 +0200
+++ pacman-2.9.6/scripts/makepkg	2005-08-13 17:48:16.000000000 +0200
@@ -227,6 +227,7 @@
 	echo "  -S, --sudosync   Install missing dependencies with pacman and sudo"
 	echo "  -u, --noup2date  Do not check for newer version"
 	echo "  -w <destdir>     Write package to <destdir> instead of the working dir"
+	echo "  --gzip           Use gzip compression for FPM instead of bzip2"
 	echo
 	echo "  if -p is not specified, makepkg will look for a FrugalBuild"
 	echo "  file in the current directory."
@@ -284,6 +285,7 @@
 CHROOT=0
 LOGGING=0
 NOUP2DATE=0
+GZIP=0
 
 ARGLIST=$@
 
@@ -310,6 +312,7 @@
 		--chroot)     CHROOT=1 ;;
 		--noup2date)     NOUP2DATE=1 ;;
 		--logging)    LOGGING=1 ;;
+		--gzip)       GZIP=1 ;;
 		--help)
 			usage
 			exit 0
@@ -1089,12 +1092,21 @@
 if [ -f $startdir/pkg/.CHANGELOG ]; then
 	extra="$extra .CHANGELOG"
 fi
+
+if [ "$GZIP" == "1" ]; then
+    tarargs="czvf"
+    msg "Compression type: GZIP"
+else
+    tarargs="cjvf"
+    msg "Compression type: BZIP2 (default)"
+fi
+
 if [ "$INCHROOT" != "1" ]; then
-tar czvf $PKGDEST/$pkgname-$pkgver-$pkgrel-$CARCH.fpm .PKGINFO .FILELIST \
-	$extra * | sort >../filelist
+    tar $tarargs $PKGDEST/$pkgname-$pkgver-$pkgrel-$CARCH.fpm .PKGINFO .FILELIST \
+	    $extra * | sort >../filelist
 else
-	tar czvf ../$pkgname-$pkgver-$pkgrel-$CARCH.fpm .PKGINFO .FILELIST \
-		$extra * | sort >../filelist
+    tar $tarargs ../$pkgname-$pkgver-$pkgrel-$CARCH.fpm .PKGINFO .FILELIST \
+	$extra * | sort >../filelist
 fi
 
 cd $startdir
diff -Naur pacman-2.9.6.orig/src/archive.c pacman-2.9.6/src/archive.c
--- pacman-2.9.6.orig/src/archive.c	1970-01-01 01:00:00.000000000 +0100
+++ pacman-2.9.6/src/archive.c	2005-08-13 17:48:16.000000000 +0200
@@ -0,0 +1,26 @@
+#include <archive.h>
+#include <archive_entry.h>
+#include <stdlib.h>
+#include <string.h>
+#include "archive.h"
+
+int archive_read_entry_data_into_fd (struct archive *archive, int file)
+{
+register size_t length;
+char cache [10240];
+
+if (file == -1)
+	{
+	goto error;
+	}
+
+while ((length = archive_read_data (archive, &cache, sizeof (cache))) > 0)
+	{
+	write (file, cache, length);
+	}
+
+return ARCHIVE_OK;
+
+error:
+	return ARCHIVE_RETRY;
+}
diff -Naur pacman-2.9.6.orig/src/archive.h pacman-2.9.6/src/archive.h
--- pacman-2.9.6.orig/src/archive.h	1970-01-01 01:00:00.000000000 +0100
+++ pacman-2.9.6/src/archive.h	2005-08-13 17:48:16.000000000 +0200
@@ -0,0 +1,11 @@
+#ifndef ARCHIVE_H
+
+#define ARCHIVE_H
+
+#include <archive.h>
+
+#define ARCHIVE_EXTRACT_FLAGS	ARCHIVE_EXTRACT_OWNER | ARCHIVE_EXTRACT_PERM | ARCHIVE_EXTRACT_TIME | ARCHIVE_EXTRACT_ACL | ARCHIVE_EXTRACT_FFLAGS
+
+int archive_read_entry_data_into_fd (struct archive *archive, int file); 
+
+#endif
diff -Naur pacman-2.9.6.orig/src/package.c pacman-2.9.6/src/package.c
--- pacman-2.9.6.orig/src/package.c	2005-08-13 17:48:00.000000000 +0200
+++ pacman-2.9.6/src/package.c	2005-08-13 17:48:16.000000000 +0200
@@ -25,11 +25,12 @@
 #include <limits.h>
 #include <fcntl.h>
 #include <string.h>
-#include <libtar.h>
-#include <zlib.h>
+#include <archive.h>
+#include <archive_entry.h>
 #include "pacconf.h"
 #include "util.h"
 #include "package.h"
+#include "archive.h"
 
 pkginfo_t* load_pkg(char *pkgfile)
 {
@@ -38,36 +39,41 @@
 	int config = 0;
 	int filelist = 0;
 	int scriptcheck = 0;
-	TAR *tar;
+	
+	register struct archive *archive;
+	struct archive_entry *entry;
+	
 	pkginfo_t *info = NULL;
 	PMList *backup = NULL;
 	PMList *lp;
-	tartype_t gztype = {
-		(openfunc_t) gzopen_frontend,
-		(closefunc_t)gzclose,
-		(readfunc_t) gzread,
-		(writefunc_t)gzwrite
-	};
 
-	if(tar_open(&tar, pkgfile, &gztype, O_RDONLY, 0, TAR_GNU) == -1) {
-	  perror("could not open package");
-		return(NULL);
+	if ((archive = archive_read_new ()) == NULL)
+	    goto error;
+
+	archive_read_support_compression_all (archive);
+	archive_read_support_format_all (archive);
+
+	if (archive_read_open_file (archive, pkgfile, 10240) != ARCHIVE_OK) {
+	    perror("could not open package");
+	    goto error;
 	}
 
 	info = newpkg();
 
-	for(i = 0; !th_read(tar); i++) {
+	for (i = 0; archive_read_next_header (archive, &entry) == ARCHIVE_OK; i++) {
 		if(config && filelist && scriptcheck) {
 			/* we have everything we need */
 			break;
 		}
-		if(!strcmp(th_get_pathname(tar), ".PKGINFO")) {
+		if(!strcmp(archive_entry_pathname (entry), ".PKGINFO")) {
 			char *descfile;
+			register int file;
 
 			/* extract this file into /tmp. it has info for us */
 			descfile = strdup("/tmp/pacman_XXXXXX");
-			mkstemp(descfile);
-			tar_extract_file(tar, descfile);
+			file = mkstemp(descfile);
+			    archive_read_entry_data_into_fd (archive, file);
+			close (file);
 			/* parse the info file */
 			parse_descfile(descfile, info, &backup, 0);
 			if(!strlen(info->name)) {
@@ -88,19 +94,22 @@
 			config = 1;
 			FREE(descfile);
 			continue;
-		} else if(!strcmp(th_get_pathname(tar), "._install") || !strcmp(th_get_pathname(tar), ".INSTALL")) {
+		} else if(!strcmp(archive_entry_pathname (entry), "._install") 
+		    || !strcmp(archive_entry_pathname (entry), ".INSTALL")) {
 			info->scriptlet = 1;
 			scriptcheck = 1;
-		} else if(!strcmp(th_get_pathname(tar), ".FILELIST")) {
+		} else if(!strcmp(archive_entry_pathname (entry), ".FILELIST")) {
 			/* Build info->files from the filelist */
 			FILE *fp;
 			char *fn;
 			char *str;
+			register int file;
 			
 			MALLOC(str, PATH_MAX);
 			fn = strdup("/tmp/pacman_XXXXXX");
-			mkstemp(fn);
-			tar_extract_file(tar, fn);
+			file = mkstemp(fn);
+			    archive_read_entry_data_into_fd (archive, file);
+			close (file);
 			fp = fopen(fn, "r");
 			while(!feof(fp)) {
 				if(fgets(str, PATH_MAX, fp) == NULL) {
@@ -122,12 +131,12 @@
 			if(!filelist) {
 				/* no .FILELIST present in this package..  build the filelist the */
 				/* old-fashioned way, one at a time */
-				expath = strdup(th_get_pathname(tar));
+				expath = strdup(archive_entry_pathname (entry));
 				info->files = list_add(info->files, expath);
 			}
 		}
 
-		if(TH_ISREG(tar) && tar_skip_regfile(tar)) {
+		if(archive_read_data_skip (archive)) {
 			char errorstr[255];
 			snprintf(errorstr, 255, "bad package file in %s", pkgfile);
 			perror(errorstr);
@@ -136,7 +145,7 @@
 		}
 		expath = NULL;
 	}
-	tar_close(tar);
+	archive_read_finish (archive);
 
 	if(!config) {
 		fprintf(stderr, "load_pkg: missing package info file in %s\n", pkgfile);
@@ -147,6 +156,8 @@
 	info->filename = strdup(pkgfile);
 
 	return(info);
+error:
+	return(NULL);
 }
 
 /* Parses the package description file for the current package
diff -Naur pacman-2.9.6.orig/src/pacman.c pacman-2.9.6/src/pacman.c
--- pacman-2.9.6.orig/src/pacman.c	2005-08-13 17:48:00.000000000 +0200
+++ pacman-2.9.6/src/pacman.c	2005-08-13 17:50:23.000000000 +0200
@@ -32,9 +32,9 @@
 #include <unistd.h>
 #include <time.h>
 #include <getopt.h>
-#include <zlib.h>
+#include <archive.h>
+#include <archive_entry.h>
 #include <syslog.h>
-#include <libtar.h>
 #include <dirent.h>
 /* pacman */
 #include "pacconf.h"
@@ -46,6 +46,7 @@
 #include "db.h"
 #include "pacsync.h"
 #include "pacman.h"
+#include "archive.h"
 
 /*
  * GLOBALS
@@ -1448,7 +1449,8 @@
 int pacman_add(pacdb_t *db, PMList *targets, PMList *dependonly)
 {
 	int i, ret = 0, errors = 0;
-	TAR *tar = NULL;
+	register struct archive *archive;
+	struct archive_entry *entry;
 	char expath[PATH_MAX];
 	char pm_install[PATH_MAX];
 	char rm_fname[PATH_MAX];
@@ -1459,12 +1461,6 @@
 	PMList *skiplist = NULL;
 
 	unsigned short real_pmo_upgrade;
-	tartype_t gztype = {
-		(openfunc_t) gzopen_frontend,
-		(closefunc_t)gzclose,
-		(readfunc_t) gzread,
-		(writefunc_t)gzwrite
-	};
 
 	if(targets == NULL) {
 		return(0);
@@ -1791,21 +1787,30 @@
 		}
 		fflush(stdout);
 
-		/* open the .tar.gz package */
-		if(tar_open(&tar, info->filename, &gztype, O_RDONLY, 0, TAR_GNU) == -1) {
-		  perror("could not open package");
-			return(1);
+		/* open the .tar.gz (or tar.bz2) package */
+               if ((archive = archive_read_new ()) == NULL)
+		    goto error;
+
+		archive_read_support_compression_all (archive);
+		archive_read_support_format_all (archive);
+
+		if(archive_read_open_file (archive, info->filename, 10240) != ARCHIVE_OK) {
+		     perror("could not open package");
+			goto error;
 		}
 		vprint("extracting files...\n");
-		for(i = 0; !th_read(tar); i++) {
+
+		chdir(pmo_root);
+
+		for(i = 0; archive_read_next_header (archive, &entry) == ARCHIVE_OK; i++) {
 			int nb = 0;
 			int notouch = 0;
 			char *md5_orig = NULL;
 			char pathname[PATH_MAX];
-			strncpy(pathname, th_get_pathname(tar), PATH_MAX);
+			strncpy(pathname, archive_entry_pathname (entry), PATH_MAX);
 
 			if(!strcmp(pathname, ".PKGINFO") || !strcmp(pathname, ".FILELIST")) {
-				tar_skip_regfile(tar);
+				archive_read_data_skip (archive);
 				continue;
 			}
 
@@ -1834,7 +1839,7 @@
 			if(is_in(pathname, pmo_noextract)) {
 				vprint("%s is in NoExtract - skipping\n", pathname);
 				logaction(stderr, "warning: %s is in NoExtract -- skipping extraction", pathname);
-				tar_skip_regfile(tar);
+				archive_read_data_skip (archive);
 				continue;
 			}
 
@@ -1863,7 +1868,8 @@
 				/* extract the package's version to a temporary file and md5 it */
 				temp = strdup("/tmp/pacman_XXXXXX");
 				mkstemp(temp);
-				if(tar_extract_file(tar, temp)) {
+				archive_entry_set_pathname (entry, temp);
+				if (archive_read_extract (archive, entry, ARCHIVE_EXTRACT_FLAGS) != ARCHIVE_OK) {
 					logaction(stderr, "could not extract %s: %s", pathname, strerror(errno));
 					errors++;
 					continue;
@@ -1901,12 +1907,15 @@
 						char newpath[PATH_MAX];
 						snprintf(newpath, PATH_MAX, "%s.pacorig", expath);
 						if(rename(expath, newpath)) {
+							archive_entry_set_pathname (entry, expath);
 							logaction(stderr, "error: could not rename %s: %s", expath, strerror(errno));
 						}
 						if(copyfile(temp, expath)) {
+							archive_entry_set_pathname (entry, expath);
 							logaction(stderr, "error: could not copy %s to %s: %s", temp, expath, strerror(errno));
 							errors++;
 						} else {
+							archive_entry_set_pathname (entry, expath);
 							logaction(stderr, "warning: %s saved as %s", expath, newpath);
 						}
 					}
@@ -1946,6 +1955,7 @@
 							fprintf(stderr, "error: could not copy %s to %s: %s\n", temp, expath, strerror(errno));
 							errors++;
 						}
+                                               archive_entry_set_pathname (entry, expath);
 					}
 				}
 
@@ -1970,8 +1980,10 @@
 					 */
 					unlink(expath);
 				}
-				if(tar_extract_file(tar, expath)) {
-					logaction(stderr, "could not extract %s: %s", pathname, strerror(errno));
+				archive_entry_set_pathname (entry, expath);
+				if (archive_read_extract (archive, entry, ARCHIVE_EXTRACT_FLAGS) != ARCHIVE_OK) {
+					printf ("%d\n",ARCHIVE_OK);
+					logaction(stderr, "could not extract %s: %s", expath, strerror(errno));
 					errors++;
 				}
 				/* calculate an md5 hash if this is in info->backup */
@@ -1992,7 +2004,9 @@
 				}
 			}
 		}
-		tar_close(tar);
+		archive_read_finish (archive);
+		/* free (archive); */
+		
 		if(errors) {
 			ret = 1;
 			logaction(stderr, "errors occurred while %s %s",
@@ -2110,6 +2124,8 @@
 	}
 	
 	return(ret);
+error:
+	return 1;
 }
 
 int pacman_remove(pacdb_t *db, PMList *targets, PMList *skiplist)
diff -Naur pacman-2.9.6.orig/src/util.c pacman-2.9.6/src/util.c
--- pacman-2.9.6.orig/src/util.c	2005-08-13 17:48:00.000000000 +0200
+++ pacman-2.9.6/src/util.c	2005-08-13 17:48:16.000000000 +0200
@@ -28,10 +28,11 @@
 #include <fcntl.h>
 #include <ctype.h>
 #include <dirent.h>
-#include <zlib.h>
-#include <libtar.h>
+#include <archive.h>
+#include <archive_entry.h>
 #include <regex.h>
 #include "util.h"
+#include "archive.h"
 
 extern unsigned short pmo_verbose;
 
@@ -48,75 +49,44 @@
 	}
 }
 
-/* borrowed and modified from Per Liden's pkgutils (http://crux.nu) */
-long gzopen_frontend(char *pathname, int oflags, int mode)
+int unpack (char *archive, const char *prefix, const char *fn)
 {
-	char* gzoflags;
-	int fd;
-	gzFile gzf;
-   
-	switch (oflags & O_ACCMODE) {
-		case O_WRONLY:
-			gzoflags = "w";
-			break;
-		case O_RDONLY:
-			gzoflags = "r";
-			break;
-		case O_RDWR:
-		default:
-			errno = EINVAL;
-			return -1;
-	}
-	
-	if((fd = open(pathname, oflags, mode)) == -1) {
-		return -1;
-	}
-	if((oflags & O_CREAT) && fchmod(fd, mode)) {
-		return -1;
-	}
-	if(!(gzf = gzdopen(fd, gzoflags))) {
-		errno = ENOMEM;
-		return -1;
-	}
+	register struct archive *_archive;
+	struct archive_entry *entry;
+	char expath[PATH_MAX];
 
-	return (long)gzf;
-}
+	if ((_archive = archive_read_new ()) == NULL)
+	    goto error;
 
-int unpack(char *archive, const char *prefix, const char *fn)
-{
-	TAR *tar = NULL;
-	char expath[PATH_MAX];
-	tartype_t gztype = {
-		(openfunc_t) gzopen_frontend,
-		(closefunc_t)gzclose,
-		(readfunc_t) gzread,
-		(writefunc_t)gzwrite
-	};
-
-	/* open the .tar.gz package */
-	if(tar_open(&tar, archive, &gztype, O_RDONLY, 0, TAR_GNU) == -1) {
-	  perror(archive);
-		return(1);
-	}
-	while(!th_read(tar)) {
-		if(fn && strcmp(fn, th_get_pathname(tar))) {
-			if(TH_ISREG(tar) && tar_skip_regfile(tar)) {
-				char errorstr[255];
-				snprintf(errorstr, 255, "bad tar archive: %s", archive);
-				perror(errorstr);
-				return(1);
-			}
-			continue;
-		}
-		snprintf(expath, PATH_MAX, "%s/%s", prefix, th_get_pathname(tar));
-	  if(tar_extract_file(tar, expath)) {
-			fprintf(stderr, "could not extract %s: %s\n", th_get_pathname(tar), strerror(errno));
-		}
-		if(fn) break;
+        archive_read_support_compression_all (_archive);
+        archive_read_support_format_all (_archive);
+
+	if (archive_read_open_file (_archive, archive, 10240) != ARCHIVE_OK)
+	    goto error;
+
+	while (archive_read_next_header (_archive, &entry) == ARCHIVE_OK) {
+	    if (fn && strcmp (fn, archive_entry_pathname (entry))) {
+		if (archive_read_data_skip (_archive) != ARCHIVE_OK)
+		     goto error;
+	    continue;
+	    }
+
+	    snprintf(expath, PATH_MAX, "%s/%s", prefix, archive_entry_pathname (entry));
+	    archive_entry_set_pathname (entry, expath);
+	    if (archive_read_extract (_archive, entry, ARCHIVE_EXTRACT_FLAGS) != ARCHIVE_OK) {
+		fprintf(stderr, "could not extract %s: %s\n", archive_entry_pathname (entry), archive_error_string (_archive));
+    		goto error;
+	    }
+
+	    if (fn)
+		break;
 	}
-	tar_close(tar);
+	
+	archive_read_finish (_archive);
+	return 0;
 
-	return(0);
+error:
+	return 1;
 }
 
 int copyfile(char *src, char *dest)
