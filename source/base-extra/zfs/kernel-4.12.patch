diff -Naur zfs-zfs-0.7.0-rc4/config/kernel-current-time.m4 zfs-zfs-0.7.0-rc4.new/config/kernel-current-time.m4
--- zfs-zfs-0.7.0-rc4/config/kernel-current-time.m4	1970-01-01 01:00:00.000000000 +0100
+++ zfs-zfs-0.7.0-rc4.new/config/kernel-current-time.m4	2017-07-03 13:00:35.000000000 +0200
@@ -0,0 +1,19 @@
+dnl #
+dnl # 4.9, current_time() added
+dnl #
+AC_DEFUN([ZFS_AC_KERNEL_CURRENT_TIME],
+	[AC_MSG_CHECKING([whether current_time() exists])
+	ZFS_LINUX_TRY_COMPILE_SYMBOL([
+		#include <linux/fs.h>
+	], [
+		struct inode ip;
+		struct timespec now __attribute__ ((unused));
+
+		now = current_time(&ip);
+	], [current_time], [fs/inode.c], [
+		AC_MSG_RESULT(yes)
+		AC_DEFINE(HAVE_CURRENT_TIME, 1, [current_time() exists])
+	], [
+		AC_MSG_RESULT(no)
+	])
+])
diff -Naur zfs-zfs-0.7.0-rc4/config/kernel.m4 zfs-zfs-0.7.0-rc4.new/config/kernel.m4
--- zfs-zfs-0.7.0-rc4/config/kernel.m4	2017-05-05 19:33:40.000000000 +0200
+++ zfs-zfs-0.7.0-rc4.new/config/kernel.m4	2017-07-03 13:00:35.000000000 +0200
@@ -118,6 +118,7 @@
 	ZFS_AC_KERNEL_MODULE_PARAM_CALL_CONST
 	ZFS_AC_KERNEL_RENAME_WANTS_FLAGS
 	ZFS_AC_KERNEL_HAVE_GENERIC_SETXATTR
+	ZFS_AC_KERNEL_CURRENT_TIME
 
 	AS_IF([test "$LINUX_OBJ" != "$LINUX"], [
 		KERNELMAKE_PARAMS="$KERNELMAKE_PARAMS O=$LINUX_OBJ"
diff -Naur zfs-zfs-0.7.0-rc4/include/linux/vfs_compat.h zfs-zfs-0.7.0-rc4.new/include/linux/vfs_compat.h
--- zfs-zfs-0.7.0-rc4/include/linux/vfs_compat.h	2017-05-05 19:33:40.000000000 +0200
+++ zfs-zfs-0.7.0-rc4.new/include/linux/vfs_compat.h	2017-07-03 13:00:35.000000000 +0200
@@ -74,10 +74,13 @@
  * 4.12 - x.y, super_setup_bdi_name() new interface.
  */
 #if defined(HAVE_SUPER_SETUP_BDI_NAME)
+extern atomic_long_t zfs_bdi_seq;
+
 static inline int
 zpl_bdi_setup(struct super_block *sb, char *name)
 {
-	return (super_setup_bdi_name(sb, name));
+	return super_setup_bdi_name(sb, "%.28s-%ld", name,
+	    atomic_long_inc_return(&zfs_bdi_seq));
 }
 static inline void
 zpl_bdi_destroy(struct super_block *sb)
@@ -144,7 +147,6 @@
 zpl_bdi_setup(struct super_block *sb, char *name)
 {
 	struct backing_dev_info *bdi;
-	char tmp[32];
 	int error;
 
 	bdi = kmem_zalloc(sizeof (struct backing_dev_info), KM_SLEEP);
@@ -157,8 +159,7 @@
 		return (error);
 	}
 
-	sprintf(tmp, "%.28s%s", name, "-%d");
-	error = bdi_register(bdi, NULL, tmp,
+	error = bdi_register(bdi, NULL, "%.28s-%ld", name,
 	    atomic_long_inc_return(&zfs_bdi_seq));
 	if (error) {
 		bdi_destroy(bdi);
@@ -565,5 +566,16 @@
 #error
 #endif
 
+/*
+ * 4.9 API change
+ * Preferred interface to get the current FS time.
+ */
+#if !defined(HAVE_CURRENT_TIME)
+static inline struct timespec
+current_time(struct inode *ip)
+{
+	return (timespec_trunc(current_kernel_time(), ip->i_sb->s_time_gran));
+}
+#endif
 
 #endif /* _ZFS_VFS_H */
diff -Naur zfs-zfs-0.7.0-rc4/include/sys/zfs_context.h zfs-zfs-0.7.0-rc4.new/include/sys/zfs_context.h
--- zfs-zfs-0.7.0-rc4/include/sys/zfs_context.h	2017-05-05 19:33:40.000000000 +0200
+++ zfs-zfs-0.7.0-rc4.new/include/sys/zfs_context.h	2017-07-03 13:00:45.000000000 +0200
@@ -799,7 +799,7 @@
 
 extern fstrans_cookie_t spl_fstrans_mark(void);
 extern void spl_fstrans_unmark(fstrans_cookie_t);
-extern int spl_fstrans_check(void);
+extern int __spl_pf_fstrans_check(void);
 
 #endif /* _KERNEL */
 #endif	/* _SYS_ZFS_CONTEXT_H */
diff -Naur zfs-zfs-0.7.0-rc4/lib/libzpool/kernel.c zfs-zfs-0.7.0-rc4.new/lib/libzpool/kernel.c
--- zfs-zfs-0.7.0-rc4/lib/libzpool/kernel.c	2017-05-05 19:33:40.000000000 +0200
+++ zfs-zfs-0.7.0-rc4.new/lib/libzpool/kernel.c	2017-07-03 13:00:45.000000000 +0200
@@ -1500,7 +1500,7 @@
 }
 
 int
-spl_fstrans_check(void)
+__spl_pf_fstrans_check(void)
 {
 	return (0);
 }
diff -Naur zfs-zfs-0.7.0-rc4/module/zfs/vdev_file.c zfs-zfs-0.7.0-rc4.new/module/zfs/vdev_file.c
--- zfs-zfs-0.7.0-rc4/module/zfs/vdev_file.c	2017-05-05 19:33:40.000000000 +0200
+++ zfs-zfs-0.7.0-rc4.new/module/zfs/vdev_file.c	2017-07-03 13:00:45.000000000 +0200
@@ -213,7 +213,7 @@
 			 * already set, see xfs_vm_writepage().  Therefore
 			 * the sync must be dispatched to a different context.
 			 */
-			if (spl_fstrans_check()) {
+			if (__spl_pf_fstrans_check()) {
 				VERIFY3U(taskq_dispatch(vdev_file_taskq,
 				    vdev_file_io_fsync, zio, TQ_SLEEP), !=,
 				    TASKQID_INVALID);
diff -Naur zfs-zfs-0.7.0-rc4/module/zfs/zfs_ctldir.c zfs-zfs-0.7.0-rc4.new/module/zfs/zfs_ctldir.c
--- zfs-zfs-0.7.0-rc4/module/zfs/zfs_ctldir.c	2017-05-05 19:33:40.000000000 +0200
+++ zfs-zfs-0.7.0-rc4.new/module/zfs/zfs_ctldir.c	2017-07-03 13:00:35.000000000 +0200
@@ -451,7 +451,7 @@
 zfsctl_inode_alloc(zfsvfs_t *zfsvfs, uint64_t id,
     const struct file_operations *fops, const struct inode_operations *ops)
 {
-	struct timespec now = current_fs_time(zfsvfs->z_sb);
+	struct timespec now;
 	struct inode *ip;
 	znode_t *zp;
 
@@ -459,6 +459,7 @@
 	if (ip == NULL)
 		return (NULL);
 
+	now = current_time(ip);
 	zp = ITOZ(ip);
 	ASSERT3P(zp->z_dirlocks, ==, NULL);
 	ASSERT3P(zp->z_acl_cached, ==, NULL);
diff -Naur zfs-zfs-0.7.0-rc4/module/zfs/zfs_vfsops.c zfs-zfs-0.7.0-rc4.new/module/zfs/zfs_vfsops.c
--- zfs-zfs-0.7.0-rc4/module/zfs/zfs_vfsops.c	2017-05-05 19:33:40.000000000 +0200
+++ zfs-zfs-0.7.0-rc4.new/module/zfs/zfs_vfsops.c	2017-07-03 13:00:27.000000000 +0200
@@ -1568,8 +1568,7 @@
 	return (0);
 }
 
-#if !defined(HAVE_SUPER_SETUP_BDI_NAME) && \
-	!defined(HAVE_2ARGS_BDI_SETUP_AND_REGISTER) && \
+#if !defined(HAVE_2ARGS_BDI_SETUP_AND_REGISTER) && \
 	!defined(HAVE_3ARGS_BDI_SETUP_AND_REGISTER)
 atomic_long_t zfs_bdi_seq = ATOMIC_LONG_INIT(0);
 #endif
diff -Naur zfs-zfs-0.7.0-rc4/module/zfs/zpl_ctldir.c zfs-zfs-0.7.0-rc4.new/module/zfs/zpl_ctldir.c
--- zfs-zfs-0.7.0-rc4/module/zfs/zpl_ctldir.c	2017-05-05 19:33:40.000000000 +0200
+++ zfs-zfs-0.7.0-rc4.new/module/zfs/zpl_ctldir.c	2017-07-03 13:00:35.000000000 +0200
@@ -103,8 +103,10 @@
 zpl_root_getattr_impl(const struct path *path, struct kstat *stat,
     u32 request_mask, unsigned int query_flags)
 {
-	generic_fillattr(path->dentry->d_inode, stat);
-	stat->atime = CURRENT_TIME;
+	struct inode *ip = path->dentry->d_inode;
+
+	generic_fillattr(ip, stat);
+	stat->atime = current_time(ip);
 
 	return (0);
 }
@@ -377,14 +379,15 @@
 zpl_snapdir_getattr_impl(const struct path *path, struct kstat *stat,
     u32 request_mask, unsigned int query_flags)
 {
-	zfsvfs_t *zfsvfs = ITOZSB(path->dentry->d_inode);
+	struct inode *ip = path->dentry->d_inode;
+	zfsvfs_t *zfsvfs = ITOZSB(ip);
 
 	ZFS_ENTER(zfsvfs);
-	generic_fillattr(path->dentry->d_inode, stat);
+	generic_fillattr(ip, stat);
 
 	stat->nlink = stat->size = 2;
 	stat->ctime = stat->mtime = dmu_objset_snap_cmtime(zfsvfs->z_os);
-	stat->atime = CURRENT_TIME;
+	stat->atime = current_time(ip);
 	ZFS_EXIT(zfsvfs);
 
 	return (0);
@@ -522,7 +525,7 @@
 	if (zfsvfs->z_shares_dir == 0) {
 		generic_fillattr(path->dentry->d_inode, stat);
 		stat->nlink = stat->size = 2;
-		stat->atime = CURRENT_TIME;
+		stat->atime = current_time(ip);
 		ZFS_EXIT(zfsvfs);
 		return (0);
 	}
diff -Naur zfs-zfs-0.7.0-rc4/module/zfs/zpl_inode.c zfs-zfs-0.7.0-rc4.new/module/zfs/zpl_inode.c
--- zfs-zfs-0.7.0-rc4/module/zfs/zpl_inode.c	2017-05-05 19:33:40.000000000 +0200
+++ zfs-zfs-0.7.0-rc4.new/module/zfs/zpl_inode.c	2017-07-03 13:00:35.000000000 +0200
@@ -596,7 +596,7 @@
 		return (-EMLINK);
 
 	crhold(cr);
-	ip->i_ctime = CURRENT_TIME_SEC;
+	ip->i_ctime = current_time(ip);
 	igrab(ip); /* Use ihold() if available */
 
 	cookie = spl_fstrans_mark();
diff -Naur zfs-zfs-0.7.0-rc4/module/zfs/zpl_xattr.c zfs-zfs-0.7.0-rc4.new/module/zfs/zpl_xattr.c
--- zfs-zfs-0.7.0-rc4/module/zfs/zpl_xattr.c	2017-05-05 19:33:40.000000000 +0200
+++ zfs-zfs-0.7.0-rc4.new/module/zfs/zpl_xattr.c	2017-07-03 13:00:35.000000000 +0200
@@ -938,7 +938,6 @@
 int
 zpl_set_acl(struct inode *ip, struct posix_acl *acl, int type)
 {
-	struct super_block *sb = ITOZSB(ip)->z_sb;
 	char *name, *value = NULL;
 	int error = 0;
 	size_t size = 0;
@@ -964,7 +963,7 @@
 				 */
 				if (ip->i_mode != mode) {
 					ip->i_mode = mode;
-					ip->i_ctime = current_fs_time(sb);
+					ip->i_ctime = current_time(ip);
 					zfs_mark_inode_dirty(ip);
 				}
 
@@ -1130,7 +1129,7 @@
 
 		if (!acl) {
 			ip->i_mode &= ~current_umask();
-			ip->i_ctime = current_fs_time(ITOZSB(ip)->z_sb);
+			ip->i_ctime = current_time(ip);
 			zfs_mark_inode_dirty(ip);
 			return (0);
 		}
