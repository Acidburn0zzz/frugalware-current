diff -Naur binutils-2.16.91.0.4/gas/cond.c binutils-2.16.91.0.4-patched/gas/cond.c
--- binutils-2.16.91.0.4/gas/cond.c	2005-11-13 18:16:35.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/cond.c	2005-11-24 19:03:37.906444744 +0100
@@ -102,7 +102,9 @@
 	 considered to be undefined.  */
       is_defined =
 	symbolP != NULL
-	&& S_IS_DEFINED (symbolP)
+	&& (S_IS_DEFINED (symbolP)
+	    || symbol_equated_p (symbolP)
+	    || S_GET_VALUE (symbolP))
 	&& S_GET_SEGMENT (symbolP) != reg_section;
 
       cframe.ignoring = ! (test_defined ^ is_defined);
diff -Naur binutils-2.16.91.0.4/gas/doc/internals.texi binutils-2.16.91.0.4-patched/gas/doc/internals.texi
--- binutils-2.16.91.0.4/gas/doc/internals.texi	2005-11-13 18:16:35.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/doc/internals.texi	2005-11-24 19:03:37.908444440 +0100
@@ -93,6 +93,12 @@
 Whether the symbol is an MRI common symbol created by the @code{COMMON}
 pseudo-op when assembling in MRI mode.
 
+@item sy_volatile
+Whether the symbol can be re-defined.
+
+@item sy_forward_ref
+Whether the symbol's value must only be evaluated upon use.
+
 @item sy_weakrefr
 Whether the symbol is a @code{weakref} alias to another symbol.
 
@@ -165,6 +171,16 @@
 Return non-zero if the symbol was aliased by a @code{weakref} alias and has not
 had any strong references.
 
+@item S_IS_VOLATILE
+@cindex S_IS_VOLATILE
+Return non-zero if the symbol may be re-defined. Such symbols get created by
+the @code{=} operator, @code{equ}, or @code{set}.
+
+@item S_IS_FORWARD_REF
+@cindex S_IS_FORWARD_REF
+Return non-zero if the symbol is a forward reference, that is its value must
+only be determined upon use.
+
 @item S_IS_COMMON
 @cindex S_IS_COMMON
 Return non-zero if this is a common symbol.  Common symbols are sometimes
@@ -222,6 +238,19 @@
 whenever the symbol is looked up, as part of a direct reference or a
 definition, but not as part of a @code{weakref} directive.
 
+@item S_SET_VOLATILE
+@cindex S_SET_VOLATILE
+Indicate that the symbol may be re-defined.
+
+@item S_CLEAR_VOLATILE
+@cindex S_CLEAR_VOLATILE
+Indicate that the symbol may no longer be re-defined.
+
+@item S_SET_FORWARD_REF
+@cindex S_SET_FORWARD_REF
+Indicate that the symbol is a forward reference, that is its value must only
+be determined upon use.
+
 @item S_GET_TYPE
 @item S_GET_DESC
 @item S_GET_OTHER
diff -Naur binutils-2.16.91.0.4/gas/read.c binutils-2.16.91.0.4-patched/gas/read.c
--- binutils-2.16.91.0.4/gas/read.c	2005-11-13 18:16:35.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/read.c	2005-11-24 19:03:37.912443832 +0100
@@ -1467,13 +1467,25 @@
 
   *p = 0;
   symbolP = symbol_find_or_make (name);
-  if (S_IS_DEFINED (symbolP) && !S_IS_COMMON (symbolP))
+  if ((S_IS_DEFINED (symbolP) || symbol_equated_p (symbolP))
+      && !S_IS_COMMON (symbolP))
     {
-      symbolP = NULL;
-      as_bad (_("symbol `%s' is already defined"), name);
-      *p = c;
-      ignore_rest_of_line ();
-      goto out;
+      if (!S_IS_VOLATILE (symbolP))
+	{
+	  symbolP = NULL;
+	  as_bad (_("symbol `%s' is already defined"), name);
+	  *p = c;
+	  ignore_rest_of_line ();
+	  goto out;
+	}
+      /* This could be avoided when the symbol wasn't used so far, but
+	 the comment in struc-symbol.h says this flag isn't reliable.  */
+      if (1 || !symbol_used_p (symbolP))
+	symbolP = symbol_clone (symbolP, 1);
+      S_SET_SEGMENT (symbolP, undefined_section);
+      S_SET_VALUE (symbolP, 0);
+      symbol_set_frag (symbolP, &zero_address_frag);
+      S_CLEAR_VOLATILE (symbolP);
     }
 
   size = S_GET_VALUE (symbolP);
@@ -2794,7 +2806,11 @@
 #endif
     }
 
-  if (S_IS_DEFINED (symbolP) || symbol_equated_p (symbolP))
+  if (S_IS_DEFINED (symbolP)
+      || symbol_equated_p (symbolP)
+      /* This detects common symbols not put in bfd_com_section, which
+	 S_IS_COMMON doesn't recognize.  */
+      || S_GET_VALUE (symbolP))
     {
       /* Permit register names to be redefined.  */
       if ((mode != 0 || !S_IS_VOLATILE (symbolP))
@@ -3178,12 +3194,22 @@
 
   symbolP = symbol_find_or_make (name);
 
-  if (S_IS_DEFINED (symbolP) || symbol_equated_p (symbolP))
+  if (S_IS_DEFINED (symbolP)
+      || symbol_equated_p (symbolP)
+      || S_GET_VALUE (symbolP))
     {
-      as_bad (_("symbol `%s' is already defined"), name);
-      *end_name = delim;
-      ignore_rest_of_line ();
-      return;
+      if(!S_IS_VOLATILE (symbolP))
+	{
+	  as_bad (_("symbol `%s' is already defined"), name);
+	  *end_name = delim;
+	  ignore_rest_of_line ();
+	  return;
+	}
+      /* This could be avoided when the symbol wasn't used so far, but
+	 the comment in struc-symbol.h says this flag isn't reliable.  */
+      if (1 || !symbol_used_p (symbolP))
+	symbolP = symbol_clone (symbolP, 1);
+      S_CLEAR_VOLATILE (symbolP);
     }
 
   *end_name = delim;
diff -Naur binutils-2.16.91.0.4/gas/symbols.c binutils-2.16.91.0.4-patched/gas/symbols.c
--- binutils-2.16.91.0.4/gas/symbols.c	2005-11-13 18:16:35.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/symbols.c	2005-11-24 19:03:37.914443528 +0100
@@ -333,8 +333,18 @@
 	  locsym->lsy_value = frag_now_fix ();
 	}
       else if (!(S_IS_DEFINED (symbolP) || symbol_equated_p (symbolP))
-	       || S_IS_COMMON (symbolP))
+	       || S_IS_COMMON (symbolP)
+	       || S_IS_VOLATILE (symbolP))
 	{
+	  if (S_IS_VOLATILE (symbolP)
+	      /* This could be avoided when the symbol wasn't used so far, but
+		 the comment in struc-symbol.h says this flag isn't reliable.  */
+	      && (1 || !symbol_used_p (symbolP)))
+	    {
+	      symbolP = symbol_clone (symbolP, 1);
+	      S_SET_VALUE (symbolP, 0);
+	      S_CLEAR_VOLATILE (symbolP);
+	    }
 	  if (S_GET_VALUE (symbolP) == 0)
 	    {
 	      symbolP->sy_frag = frag_now;
@@ -421,7 +431,10 @@
 	  if (!(frag_now == symbolP->sy_frag
 		&& S_GET_VALUE (symbolP) == frag_now_fix ()
 		&& S_GET_SEGMENT (symbolP) == now_seg))
-	    as_bad (_("symbol `%s' is already defined"), sym_name);
+	    {
+	      as_bad (_("symbol `%s' is already defined"), sym_name);
+	      symbolP = symbol_clone (symbolP, 0);
+	    }
 	}
 
     }
@@ -2196,6 +2209,13 @@
 }
 
 void
+S_CLEAR_VOLATILE (symbolS *s)
+{
+  if (!LOCAL_SYMBOL_CHECK (s))
+    s->sy_volatile = 0;
+}
+
+void
 S_SET_FORWARD_REF (symbolS *s)
 {
   if (LOCAL_SYMBOL_CHECK (s))
diff -Naur binutils-2.16.91.0.4/gas/symbols.h binutils-2.16.91.0.4-patched/gas/symbols.h
--- binutils-2.16.91.0.4/gas/symbols.h	2005-11-13 18:16:35.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/symbols.h	2005-11-24 19:03:37.915443376 +0100
@@ -108,6 +108,7 @@
 extern void S_CLEAR_WEAKREFD (symbolS *);
 extern void S_SET_THREAD_LOCAL (symbolS *);
 extern void S_SET_VOLATILE (symbolS *);
+extern void S_CLEAR_VOLATILE (symbolS *);
 extern void S_SET_FORWARD_REF (symbolS *);
 
 #ifndef WORKING_DOT_WORD
diff -Naur binutils-2.16.91.0.4/gas/testsuite/gas/all/cond.l binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/cond.l
--- binutils-2.16.91.0.4/gas/testsuite/gas/all/cond.l	2005-11-13 18:16:35.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/cond.l	2005-11-24 19:03:37.916443224 +0100
@@ -24,7 +24,13 @@
   29[ 	]+.else
   31[ 	]+.endif
 [ 	]*[1-9][0-9]*[ 	]+
+[ 	]*[1-9][0-9]*[ 	]+\.comm[ 	]+c,[ 	]*1[ 	]*
+[ 	]*[1-9][0-9]*[ 	]+\.ifndef[ 	]+c[ 	]*
+[ 	]*[1-9][0-9]*[ 	]+\.endif[ 	]*
+[ 	]*[1-9][0-9]*[ 	]+
 [ 	]*[1-9][0-9]*[ 	]+\.equiv[ 	]+x,[ 	]*y[ 	]*
+[ 	]*[1-9][0-9]*[ 	]+\.ifndef[ 	]+x[ 	]*
+[ 	]*[1-9][0-9]*[ 	]+\.endif[ 	]*
 [ 	]*[1-9][0-9]*[ 	]+\.equiv[ 	]+y,[ 	]*0[ 	]*
 [ 	]*[1-9][0-9]*[ 	]+\.if[ 	]+x[ 	]*
 [ 	]*[1-9][0-9]*[ 	]+\.elseif[ 	]+x[ 	]*
diff -Naur binutils-2.16.91.0.4/gas/testsuite/gas/all/cond.s binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/cond.s
--- binutils-2.16.91.0.4/gas/testsuite/gas/all/cond.s	2005-11-13 18:16:35.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/cond.s	2005-11-24 19:03:37.917443072 +0100
@@ -30,7 +30,15 @@
 	.long	9
 	.endif
 
+	.comm	c, 1
+	.ifndef c
+	.err
+	.endif
+
 	.equiv	x, y
+	.ifndef x
+	.err
+	.endif
 	.equiv	y, 0
 	.if	x
 	.err
diff -Naur binutils-2.16.91.0.4/gas/testsuite/gas/all/gas.exp binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/gas.exp
--- binutils-2.16.91.0.4/gas/testsuite/gas/all/gas.exp	2005-11-13 18:16:35.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/gas.exp	2005-11-24 19:03:37.918442920 +0100
@@ -74,16 +74,24 @@
 # .set works differently on some targets.
 case $target_triplet in {
     { alpha*-*-* } { }
-    { iq2000*-*-* } { }
     { mips*-*-* } { }
     { *c54x*-*-* } { }
     { z80-*-* } { }
     default {
 	setup_xfail "*c30*-*-*" "*c4x*-*-*" "pdp11-*-*"
 	run_dump_test redef
-	setup_xfail "*c30*-*-*" "*c4x*-*-*" "*arm*-*-coff" "arm*-*-pe*" "crx*-*-*"
-	setup_xfail "h8300*-*-*" "m68hc*-*-*" "maxq-*-*" "pdp11-*-*" "vax*-*-*" "z8k-*-*"
+	setup_xfail "*c30*-*-*" "*c4x*-*-*" "*arm*-*-*aout*" "*arm*-*-*coff" \
+	    "*arm*-*-pe" "crx*-*-*" "h8300*-*-*" "m68hc*-*-*" "maxq-*-*" \
+	    "pdp11-*-*" "vax*-*-*" "z8k-*-*"
 	run_dump_test redef2
+	setup_xfail "*-*-aix*" "*-*-coff" "*-*-cygwin" "*-*-mingw*" "*-*-pe*" \
+	    "bfin-*-*" "*c4x*-*-*" "crx*-*-*" "h8300*-*-*" "m68hc*-*-*" \
+	    "maxq-*-*" "or32-*-*" "pdp11-*-*" "vax*-*-*" "z8k-*-*"
+	run_dump_test redef3
+	setup_xfail "*c4x*-*-*"
+	gas_test_error "redef4.s" "" ".set for symbol already used as label"
+	setup_xfail "*c4x*-*-*"
+	gas_test_error "redef5.s" "" ".set for symbol already defined through .comm"
     }
 }
 
@@ -256,6 +264,9 @@
 
 # .set works differently on some targets.
 case $target_triplet in {
+    { alpha*-*-* } { }
+    { mips*-*-* } { }
+    { *c54x*-*-* } { }
     { z80-*-* } { }
     default {
 	run_dump_test weakref1
diff -Naur binutils-2.16.91.0.4/gas/testsuite/gas/all/redef2.d binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef2.d
--- binutils-2.16.91.0.4/gas/testsuite/gas/all/redef2.d	2005-11-13 18:16:35.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef2.d	2005-11-24 19:03:37.919442768 +0100
@@ -5,9 +5,11 @@
 
 RELOCATION RECORDS FOR .*
 .*
-0+0.*(here|\.data)
-0+8.*xtrn
+0+00.*(here|\.data)
+0+08.*xtrn
+0+10.*(sym|\.data(\+0x0+10)?)
 #...
 Contents of section \.data:
  0000 00000000 11111111 00000000 22222222[ 	]+................[ 	]*
+ 0010 [01]00000[01]0 .*
 #pass
diff -Naur binutils-2.16.91.0.4/gas/testsuite/gas/all/redef2.s binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef2.s
--- binutils-2.16.91.0.4/gas/testsuite/gas/all/redef2.s	2005-11-13 18:16:35.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef2.s	2005-11-24 19:03:37.920442616 +0100
@@ -8,3 +8,5 @@
  .long sym
  .set sym, 0x22222222
  .long sym
+sym:
+ .long sym
diff -Naur binutils-2.16.91.0.4/gas/testsuite/gas/all/redef3.d binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef3.d
--- binutils-2.16.91.0.4/gas/testsuite/gas/all/redef3.d	1970-01-01 01:00:00.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef3.d	2005-11-24 19:03:37.921442464 +0100
@@ -0,0 +1,15 @@
+#objdump: -rsj .data
+#name: .equ redefinitions (3)
+
+.*: .*
+
+RELOCATION RECORDS FOR .*
+.*
+0+00.*(here|\.data)
+0+08.*xtrn
+0+10.*sym
+#...
+Contents of section \.data:
+ 0000 00000000 11111111 00000000 22222222[ 	]+................[ 	]*
+ 0010 00000000 .*
+#pass
diff -Naur binutils-2.16.91.0.4/gas/testsuite/gas/all/redef3.s binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef3.s
--- binutils-2.16.91.0.4/gas/testsuite/gas/all/redef3.s	1970-01-01 01:00:00.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef3.s	2005-11-24 19:03:37.922442312 +0100
@@ -0,0 +1,12 @@
+ .data
+here:
+ .set sym, here
+ .long sym
+ .set sym, 0x11111111
+ .long sym
+ .set sym, xtrn
+ .long sym
+ .set sym, 0x22222222
+ .long sym
+ .comm sym, 1
+ .long sym
diff -Naur binutils-2.16.91.0.4/gas/testsuite/gas/all/redef4.s binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef4.s
--- binutils-2.16.91.0.4/gas/testsuite/gas/all/redef4.s	1970-01-01 01:00:00.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef4.s	2005-11-24 19:03:37.923442160 +0100
@@ -0,0 +1,3 @@
+ .data
+sym:
+ .set sym, 0
diff -Naur binutils-2.16.91.0.4/gas/testsuite/gas/all/redef5.s binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef5.s
--- binutils-2.16.91.0.4/gas/testsuite/gas/all/redef5.s	1970-01-01 01:00:00.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/testsuite/gas/all/redef5.s	2005-11-24 19:03:37.923442160 +0100
@@ -0,0 +1,2 @@
+ .comm sym, 1
+ .set sym, 0
diff -Naur binutils-2.16.91.0.4/gas/testsuite/gas/elf/redef.d binutils-2.16.91.0.4-patched/gas/testsuite/gas/elf/redef.d
--- binutils-2.16.91.0.4/gas/testsuite/gas/elf/redef.d	2005-11-13 18:16:35.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/testsuite/gas/elf/redef.d	2005-11-24 19:03:37.924442008 +0100
@@ -1,6 +1,5 @@
 #objdump: -t
 #name: .equ redefinitions (ELF)
-#source: ../all/redef2.s
 
 .*: .*
 
diff -Naur binutils-2.16.91.0.4/gas/testsuite/gas/elf/redef.s binutils-2.16.91.0.4-patched/gas/testsuite/gas/elf/redef.s
--- binutils-2.16.91.0.4/gas/testsuite/gas/elf/redef.s	1970-01-01 01:00:00.000000000 +0100
+++ binutils-2.16.91.0.4-patched/gas/testsuite/gas/elf/redef.s	2005-11-24 19:03:37.925441856 +0100
@@ -0,0 +1,10 @@
+ .data
+here:
+ .set sym, here
+ .long sym
+ .set sym, 0x11111111
+ .long sym
+ .set sym, xtrn
+ .long sym
+ .set sym, 0x22222222
+ .long sym
