From e1ca2aab0d8976c120680056fc272323971c765b Mon Sep 17 00:00:00 2001
From: Your Name <you@example.com>
Date: Mon, 29 Jan 2018 13:01:34 +0100
Subject: [PATCH 2/2] Revert "[SV 20513] Un-escaped # are not comments in
 function invocations"

This reverts commit c6966b323811c37acedff05b576b907b06aea5f4.
---
 NEWS                          |  4 ----
 src/main.c                    |  2 +-
 src/read.c                    | 25 ++++++++++++-------------
 tests/scripts/features/escape | 18 ------------------
 tests/scripts/functions/guile | 14 --------------
 tests/scripts/functions/shell |  6 ++++--
 6 files changed, 17 insertions(+), 52 deletions(-)

diff --git a/NEWS b/NEWS
index aa01191..3f28f21 100644
--- a/NEWS
+++ b/NEWS
@@ -42,10 +42,6 @@ http://sv.gnu.org/bugs/index.php?group=make&report_id=111&fix_release_id=108&set
   value to the load value requested.  This allows usage such as "-j -lN" for
   N-processor systems with less fear of overload.
   Patch provided by Sven C. Dack <sven.c.dack@sky.com>
-
-* Rework the source distribution to move source files into the src/*
-  subdirectory.  This aligns with modern best practices in GNU.
-
 * The previous limit of 63 jobs under -jN on MS-Windows is now
   increased to 4095.  That limit includes the subprocess started by
   the $(shell) function.
diff --git a/src/main.c b/src/main.c
index 9fa2c84..3b28646 100644
--- a/src/main.c
+++ b/src/main.c
@@ -1314,7 +1314,7 @@ main (int argc, char **argv, char **envp)
      some compilers (MSVC) don't like conditionals in macros.  */
   {
     const char *features = "target-specific order-only second-expansion"
-                           " else-if shortest-stem undefine oneshell nocomment"
+                           " else-if shortest-stem undefine oneshell"
 #ifndef NO_ARCHIVES
                            " archives"
 #endif
diff --git a/src/read.c b/src/read.c
index 29c0ffb..ccd857b 100644
--- a/src/read.c
+++ b/src/read.c
@@ -1392,15 +1392,14 @@ eval (struct ebuffer *ebuf, int set_default)
 
 
 /* Remove comments from LINE.
-   This will also remove backslashes that escape things.
-   It ignores comment characters that appear inside variable references.  */
+   This is done by copying the text at LINE onto itself.  */
 
 static void
 remove_comments (char *line)
 {
   char *comment;
 
-  comment = find_char_unquote (line, MAP_COMMENT|MAP_VARIABLE);
+  comment = find_char_unquote (line, MAP_COMMENT);
 
   if (comment != 0)
     /* Cut off the line at the #.  */
@@ -2221,27 +2220,27 @@ record_files (struct nameseq *filenames, const char *pattern,
     }
 }
 
-/* Search STRING for an unquoted STOPMAP.
-   Backslashes quote elements from STOPMAP and backslash.
-   Quoting backslashes are removed from STRING by compacting it into itself.
-   Returns a pointer to the first unquoted STOPCHAR if there is one, or nil if
-   there are none.
+/* Search STRING for an unquoted STOPCHAR or blank (if BLANK is nonzero).
+   Backslashes quote STOPCHAR, blanks if BLANK is nonzero, and backslash.
+   Quoting backslashes are removed from STRING by compacting it into
+   itself.  Returns a pointer to the first unquoted STOPCHAR if there is
+   one, or nil if there are none.  STOPCHARs inside variable references are
+   ignored if IGNOREVARS is true.
 
-   If MAP_VARIABLE is set, then the complete contents of variable references
-   are skipped, even if the contain STOPMAP characters.  */
+   STOPCHAR _cannot_ be '$' if IGNOREVARS is true.  */
 
 static char *
-find_char_unquote (char *string, int stopmap)
+find_char_unquote (char *string, int map)
 {
   unsigned int string_len = 0;
   char *p = string;
 
   /* Always stop on NUL.  */
-  stopmap |= MAP_NUL;
+  map |= MAP_NUL;
 
   while (1)
     {
-      while (! STOP_SET (*p, stopmap))
+      while (! STOP_SET (*p, map))
         ++p;
 
       if (*p == '\0')
diff --git a/tests/scripts/features/escape b/tests/scripts/features/escape
index 5157a97..562fb49 100644
--- a/tests/scripts/features/escape
+++ b/tests/scripts/features/escape
@@ -81,23 +81,5 @@ all: ..\foo
 !,
               '', ": '..\\foo'\n");
 
-# Test escaped comments in variable assignments
-run_make_test(q!
-self = $1
-foo := $(call self,#foo#)#foo
-bar := $(call self,\#bar\#)#bar
-all:;@echo '$(foo) $(bar)'
-!,
-               '',"#foo# \\#bar\\#");
-
-# Test escaped comments in variable assignments in a variable
-run_make_test(q!
-C = \#
-self = $1
-foo := $(call self,$Cfoo$C)#foo
-all:;@echo '$(foo)'
-!,
-               '',"#foo#");
-
 # This tells the test driver that the perl test script executed properly.
 1;
diff --git a/tests/scripts/functions/guile b/tests/scripts/functions/guile
index 415827a..c63bec9 100644
--- a/tests/scripts/functions/guile
+++ b/tests/scripts/functions/guile
@@ -36,20 +36,6 @@ x:;@echo '$(guile #f)'; \
 !,
               '', "\n#t\nc\n1234\nfoo\nbar\na b\na b c d 1 2 3");
 
-# Verify guile functions in variables -- SV 43378
-run_make_test(q!
-res := $(guile #f) \
-       $(guile #t) \
-       $(guile #\c) \
-       $(guile 1234) \
-       $(guile 'foo) \
-       $(guile "bar") \
-       $(guile (cons 'a 'b)) \
-       $(guile '(a b (c . d) 1 (2) 3))
-x:;@echo '$(res)'
-!,
-              '', " #t c 1234 foo bar a b a b c d 1 2 3");
-
 # Verify the gmk-expand function
 run_make_test(q!
 VAR = $(guile (gmk-expand "$(shell echo hi)"))
diff --git a/tests/scripts/functions/shell b/tests/scripts/functions/shell
index 6e44608..8f57b3b 100644
--- a/tests/scripts/functions/shell
+++ b/tests/scripts/functions/shell
@@ -34,11 +34,13 @@ all: ; @echo SIG=$(SIG)
               ','','SIG=130');
 
 # Test unescaped comment characters in shells.  Savannah bug #20513
-run_make_test(q!
+if ($all_tests) {
+    run_make_test(q!
 FOO := $(shell echo '#')
 foo: ; echo '$(FOO)'
 !,
-              '', "echo '#'\n#\n");
+              '', "#\n");
+}
 
 # Test shells inside exported environment variables.
 # This is the test that fails if we try to put make exported variables into
-- 
2.16.1

