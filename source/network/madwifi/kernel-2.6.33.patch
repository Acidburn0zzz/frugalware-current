diff --git a/Makefile.inc b/Makefile.inc
index b67a4de..e4f28b0 100644
--- a/Makefile.inc
+++ b/Makefile.inc
@@ -146,7 +146,7 @@ ATH_RATE=	$(TOP)/ath_rate
 # 
 TOOLS=  $(TOP)/tools 
 
-COPTS+=	-Werror
+COPTS+=
 INCS=	-include $(TOP)/include/compat.h -I$(TOP)/include
 
 # TARGET defines the target platform architecture. It must match one of
diff --git a/ath/if_ath.c b/ath/if_ath.c
index 43ae664..82ec9ee 100644
--- a/ath/if_ath.c
+++ b/ath/if_ath.c
@@ -9572,120 +9572,101 @@ static int mincalibrate = 1;			/* once a second */
 static int maxint = 0x7fffffff;		/* 32-bit big */
 
 static const ctl_table ath_sysctl_template[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "slottime",
+	{ .procname	= "slottime",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_SLOTTIME,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "acktimeout",
+	{ .procname	= "acktimeout",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_ACKTIMEOUT,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "ctstimeout",
+	{ .procname	= "ctstimeout",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_CTSTIMEOUT,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "softled",
+	{ .procname	= "softled",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_SOFTLED,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "ledpin",
+	{ .procname	= "ledpin",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_LEDPIN,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "countrycode",
+	{ .procname	= "countrycode",
 	  .mode		= 0444,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_COUNTRYCODE,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "maxvaps",
+	{ .procname	= "maxvaps",
 	  .mode		= 0444,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_MAXVAPS,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "regdomain",
+	{ .procname	= "regdomain",
 	  .mode		= 0444,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_REGDOMAIN,
 	},
 #ifdef AR_DEBUG
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "debug",
+	{ .procname	= "debug",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_DEBUG,
 	},
 #endif
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "txantenna",
+	{ .procname	= "txantenna",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_TXANTENNA,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "rxantenna",
+	{ .procname	= "rxantenna",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_RXANTENNA,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "diversity",
+	{ .procname	= "diversity",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_DIVERSITY,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "txintrperiod",
+	{ .procname	= "txintrperiod",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_TXINTRPERIOD,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "fftxqmin",
+	{ .procname	= "fftxqmin",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_FFTXQMIN,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "tkipmic",
+	{ .procname	= "tkipmic",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_TKIPMIC,
 	},
 #ifdef ATH_SUPERG_XR
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "xrpollperiod",
+	{ .procname	= "xrpollperiod",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_XR_POLL_PERIOD,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "xrpollcount",
+	{ .procname	= "xrpollcount",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_XR_POLL_COUNT,
 	},
 #endif
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "ackrate",
+	{ .procname	= "ackrate",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_ACKRATE,
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "intmit",
+	{ .procname	= "intmit",
 	  .mode		= 0644,
 	  .proc_handler	= ath_sysctl_halparam,
 	  .extra2	= (void *)ATH_INTMIT,
@@ -9722,12 +9703,10 @@ ath_dynamic_sysctl_register(struct ath_softc *sc)
 
 	/* setup the table */
 	memset(sc->sc_sysctls, 0, space);
-	sc->sc_sysctls[0].ctl_name = CTL_DEV;
 	sc->sc_sysctls[0].procname = "dev";
 	sc->sc_sysctls[0].mode = 0555;
 	sc->sc_sysctls[0].child = &sc->sc_sysctls[2];
 	/* [1] is NULL terminator */
-	sc->sc_sysctls[2].ctl_name = CTL_AUTO;
 	sc->sc_sysctls[2].procname = dev_name;
 	sc->sc_sysctls[2].mode = 0555;
 	sc->sc_sysctls[2].child = &sc->sc_sysctls[4];
@@ -9830,44 +9809,38 @@ ath_announce(struct net_device *dev)
  */
 static ctl_table ath_static_sysctls[] = {
 #ifdef AR_DEBUG
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "debug",
+	{ .procname	= "debug",
 	  .mode		= 0644,
 	  .data		= &ath_debug,
 	  .maxlen	= sizeof(ath_debug),
 	  .proc_handler	= proc_dointvec
 	},
 #endif
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "countrycode",
+	{ .procname	= "countrycode",
 	  .mode		= 0444,
 	  .data		= &ath_countrycode,
 	  .maxlen	= sizeof(ath_countrycode),
 	  .proc_handler	= proc_dointvec
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "maxvaps",
+	{ .procname	= "maxvaps",
 	  .mode		= 0444,
 	  .data		= &ath_maxvaps,
 	  .maxlen	= sizeof(ath_maxvaps),
 	  .proc_handler	= proc_dointvec
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "outdoor",
+	{ .procname	= "outdoor",
 	  .mode		= 0444,
 	  .data		= &ath_outdoor,
 	  .maxlen	= sizeof(ath_outdoor),
 	  .proc_handler	= proc_dointvec
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "xchanmode",
+	{ .procname	= "xchanmode",
 	  .mode		= 0444,
 	  .data		= &ath_xchanmode,
 	  .maxlen	= sizeof(ath_xchanmode),
 	  .proc_handler	= proc_dointvec
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "calibrate",
+	{ .procname	= "calibrate",
 	  .mode		= 0644,
 	  .data		= &ath_calinterval,
 	  .maxlen	= sizeof(ath_calinterval),
@@ -9878,15 +9851,13 @@ static ctl_table ath_static_sysctls[] = {
 	{ 0 }
 };
 static ctl_table ath_ath_table[] = {
-	{ .ctl_name	= DEV_ATH,
-	  .procname	= "ath",
+	{ .procname	= "ath",
 	  .mode		= 0555,
 	  .child	= ath_static_sysctls
 	}, { 0 }
 };
 static ctl_table ath_root_table[] = {
-	{ .ctl_name	= CTL_DEV,
-	  .procname	= "dev",
+	{ .procname	= "dev",
 	  .mode		= 0555,
 	  .child	= ath_ath_table
 	}, { 0 }
diff --git a/ath_hal/ah_os.c b/ath_hal/ah_os.c
index a4d0336..8d25abc 100644
--- a/ath_hal/ah_os.c
+++ b/ath_hal/ah_os.c
@@ -436,50 +436,43 @@ EXPORT_SYMBOL(ath_hal_memcmp);
 
 static ctl_table ath_hal_sysctls[] = {
 #ifdef AH_DEBUG
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "debug",
+	{ .procname	= "debug",
 	  .mode		= 0644,
 	  .data		= &ath_hal_debug,
 	  .maxlen	= sizeof(ath_hal_debug),
 	  .proc_handler	= proc_dointvec
 	},
 #endif
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "dma_beacon_response_time",
+	{ .procname	= "dma_beacon_response_time",
 	  .data		= &ath_hal_dma_beacon_response_time,
 	  .maxlen	= sizeof(ath_hal_dma_beacon_response_time),
 	  .mode		= 0644,
 	  .proc_handler	= proc_dointvec
 	},
-	{ .ctl_name	= CTL_AUTO,	
-	  .procname	= "sw_beacon_response_time",
+	{ .procname	= "sw_beacon_response_time",
 	  .mode		= 0644,
 	  .data		= &ath_hal_sw_beacon_response_time,
 	  .maxlen	= sizeof(ath_hal_sw_beacon_response_time),
 	  .proc_handler	= proc_dointvec
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "swba_backoff",
+	{ .procname	= "swba_backoff",
 	  .mode		= 0644,
 	  .data		= &ath_hal_additional_swba_backoff,
 	  .maxlen	= sizeof(ath_hal_additional_swba_backoff),
 	  .proc_handler	= proc_dointvec
 	},
 #ifdef AH_DEBUG_ALQ
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "alq",
+	{ .procname	= "alq",
 	  .mode		= 0644,
 	  .proc_handler	= sysctl_hw_ath_hal_log
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "alq_size",
+	{ .procname	= "alq_size",
 	  .mode		= 0644,
 	  .data		= &ath_hal_alq_qsize,
 	  .maxlen	= sizeof(ath_hal_alq_qsize),
 	  .proc_handler	= proc_dointvec
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "alq_lost",
+	{ .procname	= "alq_lost",
 	  .mode		= 0644,
 	  .data		= &ath_hal_alq_lost,
 	  .maxlen	= sizeof(ath_hal_alq_lost),
@@ -489,22 +482,19 @@ static ctl_table ath_hal_sysctls[] = {
 	{ 0 }
 };
 static ctl_table ath_hal_table[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "hal",
+	{ .procname	= "hal",
 	  .mode		= 0555,
 	  .child	= ath_hal_sysctls
 	}, { 0 }
 };
 static ctl_table ath_ath_table[] = {
-	{ .ctl_name	= DEV_ATH,
-	  .procname	= "ath",
+	{ .procname	= "ath",
 	  .mode		= 0555,
 	  .child	= ath_hal_table
 	}, { 0 }
 };
 static ctl_table ath_root_table[] = {
-	{ .ctl_name	= CTL_DEV,
-	  .procname	= "dev",
+	{ .procname	= "dev",
 	  .mode		= 0555,
 	  .child	= ath_ath_table
 	}, { 0 }
diff --git a/ath_rate/amrr/amrr.c b/ath_rate/amrr/amrr.c
index f6a7399..702ed12 100644
--- a/ath_rate/amrr/amrr.c
+++ b/ath_rate/amrr/amrr.c
@@ -487,8 +487,7 @@ static int min_threshold = 1;
  */
 
 static ctl_table ath_rate_static_sysctls[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "interval",
+	{ .procname	= "interval",
 	  .mode		= 0644,
 	  .data		= &ath_rateinterval,
 	  .maxlen	= sizeof(ath_rateinterval),
@@ -496,8 +495,7 @@ static ctl_table ath_rate_static_sysctls[] = {
 	  .extra2	= &maxint,
 	  .proc_handler	= proc_dointvec_minmax
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "max_success_threshold",
+	{ .procname	= "max_success_threshold",
 	  .mode		= 0644,
 	  .data		= &ath_rate_max_success_threshold,
 	  .maxlen	= sizeof(ath_rate_max_success_threshold),
@@ -505,8 +503,7 @@ static ctl_table ath_rate_static_sysctls[] = {
 	  .extra2	= &maxint,
 	  .proc_handler	= proc_dointvec_minmax
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "min_success_threshold",
+	{ .procname	= "min_success_threshold",
 	  .mode		= 0644,
 	  .data		= &ath_rate_min_success_threshold,
 	  .maxlen	= sizeof(ath_rate_min_success_threshold),
@@ -517,22 +514,19 @@ static ctl_table ath_rate_static_sysctls[] = {
 	{ 0 }
 };
 static ctl_table ath_rate_table[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "rate",
+	{ .procname	= "rate",
 	  .mode		= 0555,
 	  .child	= ath_rate_static_sysctls
 	}, { 0 }
 };
 static ctl_table ath_ath_table[] = {
-	{ .ctl_name	= DEV_ATH,
-	  .procname	= "ath",
+	{ .procname	= "ath",
 	  .mode		= 0555,
 	  .child	= ath_rate_table
 	}, { 0 }
 };
 static ctl_table ath_root_table[] = {
-	{ .ctl_name	= CTL_DEV,
-	  .procname	= "dev",
+	{ .procname	= "dev",
 	  .mode		= 0555,
 	  .child	= ath_ath_table
 	}, { 0 }
diff --git a/ath_rate/onoe/onoe.c b/ath_rate/onoe/onoe.c
index a174d5d..d061de9 100644
--- a/ath_rate/onoe/onoe.c
+++ b/ath_rate/onoe/onoe.c
@@ -435,8 +435,7 @@ static int maxint = 0x7fffffff;		/* 32-bit big */
  * Static (i.e. global) sysctls.
  */
 static ctl_table ath_rate_static_sysctls[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "interval",
+	{ .procname	= "interval",
 	  .mode		= 0644,
 	  .data		= &ath_rateinterval,
 	  .maxlen	= sizeof(ath_rateinterval),
@@ -444,8 +443,7 @@ static ctl_table ath_rate_static_sysctls[] = {
 	  .extra2	= &maxint,
 	  .proc_handler	= proc_dointvec_minmax
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "raise",
+	{ .procname	= "raise",
 	  .mode		= 0644,
 	  .data		= &ath_rate_raise,
 	  .maxlen	= sizeof(ath_rate_raise),
@@ -453,8 +451,7 @@ static ctl_table ath_rate_static_sysctls[] = {
 	  .extra2	= &maxpercent,
 	  .proc_handler	= proc_dointvec_minmax
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "raise_threshold",
+	{ .procname	= "raise_threshold",
 	  .mode		= 0644,
 	  .data		= &ath_rate_raise_threshold,
 	  .maxlen	= sizeof(ath_rate_raise_threshold),
@@ -463,22 +460,19 @@ static ctl_table ath_rate_static_sysctls[] = {
 	{ 0 }
 };
 static ctl_table ath_rate_table[] = {
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "rate",
+	{ .procname	= "rate",
 	  .mode		= 0555,
 	  .child	= ath_rate_static_sysctls
 	}, { 0 }
 };
 static ctl_table ath_ath_table[] = {
-	{ .ctl_name	= DEV_ATH,
-	  .procname	= "ath",
+	{ .procname	= "ath",
 	  .mode		= 0555,
 	  .child	= ath_rate_table
 	}, { 0 }
 };
 static ctl_table ath_root_table[] = {
-	{ .ctl_name	= CTL_DEV,
-	  .procname	= "dev",
+	{ .procname	= "dev",
 	  .mode		= 0555,
 	  .child	= ath_ath_table
 	}, { 0 }
diff --git a/kernelversion.c b/kernelversion.c
index a216978..440e8b9 100644
--- a/kernelversion.c
+++ b/kernelversion.c
@@ -10,7 +10,7 @@
 
 /* Linux 2.6.18+ uses <linux/utsrelease.h> */
 #ifndef UTS_RELEASE
-#include <linux/utsrelease.h>
+#include <generated/utsrelease.h>
 #endif
 
 char *uts_release = UTS_RELEASE;
diff --git a/net80211/ieee80211_linux.c b/net80211/ieee80211_linux.c
index d433b10..18d56d2 100644
--- a/net80211/ieee80211_linux.c
+++ b/net80211/ieee80211_linux.c
@@ -622,40 +622,33 @@ IEEE80211_SYSCTL_DECL(ieee80211_sysctl_monitor_crc_errors, ctl, write, filp, buf
 
 static const ctl_table ieee80211_sysctl_template[] = {
 #ifdef IEEE80211_DEBUG
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "debug",
+	{ .procname	= "debug",
 	  .mode		= 0644,
 	  .proc_handler	= ieee80211_sysctl_debug
 	},
 #endif
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "dev_type",
+	{ .procname	= "dev_type",
 	  .mode		= 0644,
 	  .proc_handler	= ieee80211_sysctl_dev_type
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "monitor_nods_only",
+	{ .procname	= "monitor_nods_only",
 	  .mode		= 0644,
 	  .proc_handler	= ieee80211_sysctl_monitor_nods_only
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "monitor_txf_len",
+	{ .procname	= "monitor_txf_len",
 	  .mode		= 0644,
 	  .proc_handler	= ieee80211_sysctl_monitor_txf_len
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "monitor_phy_errors",
+	{ .procname	= "monitor_phy_errors",
 	  .mode		= 0644,
 	  .proc_handler = ieee80211_sysctl_monitor_phy_errors
 	},
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "monitor_crc_errors",
+	{ .procname	= "monitor_crc_errors",
 	  .mode		= 0644,
 	  .proc_handler = ieee80211_sysctl_monitor_crc_errors
 	},
 	/* NB: must be last entry before NULL */
-	{ .ctl_name	= CTL_AUTO,
-	  .procname	= "%parent",
+	{ .procname	= "%parent",
 	  .maxlen	= IFNAMSIZ,
 	  .mode		= 0444,
 	  .proc_handler	= proc_dostring
@@ -690,12 +683,10 @@ ieee80211_sysctl_vattach(struct ieee80211vap *vap)
 
 	/* setup the table */
 	memset(vap->iv_sysctls, 0, space);
-	vap->iv_sysctls[0].ctl_name = CTL_NET;
 	vap->iv_sysctls[0].procname = "net";
 	vap->iv_sysctls[0].mode = 0555;
 	vap->iv_sysctls[0].child = &vap->iv_sysctls[2];
 	/* [1] is NULL terminator */
-	vap->iv_sysctls[2].ctl_name = CTL_AUTO;
 	vap->iv_sysctls[2].procname = devname; /* XXX bad idea? */
 	vap->iv_sysctls[2].mode = 0555;
 	vap->iv_sysctls[2].child = &vap->iv_sysctls[4];
