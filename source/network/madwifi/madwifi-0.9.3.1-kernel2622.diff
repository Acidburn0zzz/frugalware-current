diff -Naur madwifi-0.9.3.1.orig/Makefile.inc madwifi-0.9.3.1/Makefile.inc
--- madwifi-0.9.3.1.orig/Makefile.inc	2007-01-18 09:26:23.000000000 +0100
+++ madwifi-0.9.3.1/Makefile.inc	2007-07-10 14:45:07.000000000 +0200
@@ -146,7 +146,7 @@
 # 
 TOOLS=  $(TOP)/tools 
 
-COPTS+=	-Werror
+#COPTS+=	-Werror
 INCS=	-include $(TOP)/include/compat.h -I$(TOP)/include
 
 # TARGET defines the target platform architecture. It must match one of
diff -Naur madwifi-0.9.3.1.orig/net80211/ieee80211_input.c madwifi-0.9.3.1/net80211/ieee80211_input.c
--- madwifi-0.9.3.1.orig/net80211/ieee80211_input.c	2007-05-23 10:43:05.000000000 +0200
+++ madwifi-0.9.3.1/net80211/ieee80211_input.c	2007-07-10 14:45:21.000000000 +0200
@@ -1048,11 +1048,12 @@
 			 * incoming fragments
 			 * XXX 4-address/QoS frames?
 			 */
-			else if (skb->end - skb->head < ni->ni_vap->iv_dev->mtu +
-				 hdrlen) {
+			else if (skb_end_pointer(skb) - skb->head <
+				 ni->ni_vap->iv_dev->mtu + hdrlen) {
 				ni->ni_rxfrag = skb_copy_expand(skb, 0,
 					(ni->ni_vap->iv_dev->mtu + hdrlen) -
-					(skb->end - skb->head), GFP_ATOMIC);
+					(skb_end_pointer(skb) - skb->head),
+				        GFP_ATOMIC);
 				dev_kfree_skb(skb);
 			}
 		}
@@ -1136,8 +1137,8 @@
 		}
 		if (skb1 != NULL) {
 			skb1->dev = dev;
-			skb1->mac.raw = skb1->data;
-			skb1->nh.raw = skb1->data + sizeof(struct ether_header);
+			skb_reset_mac_header(skb1);
+			skb1->network_header = skb1->data + sizeof(struct ether_header);
 			skb1->protocol = __constant_htons(ETH_P_802_2);
 			/* XXX insert vlan tag before queue it? */
 			dev_queue_xmit(skb1);
@@ -2259,7 +2260,7 @@
 		if (skb1 == NULL)
 			return;
 		skb1->dev = dev;
-		skb1->mac.raw = skb1->data;
+		skb_reset_mac_header(skb1);
 		skb1->ip_summed = CHECKSUM_NONE;
 		skb1->pkt_type = PACKET_OTHERHOST;
 		skb1->protocol = __constant_htons(0x0019);  /* ETH_P_80211_RAW */
@@ -2534,7 +2535,7 @@
 	
 	skb->dev = dev;
 	skb->protocol = eth_type_trans(skb, dev);
-	skb->mac.raw = skb->data;
+	skb_reset_mac_header(skb);
 	ieee80211_deliver_data(ni, skb);
 	return;
 }
@@ -3712,15 +3713,15 @@
 ath_eth_type_trans(struct sk_buff *skb, struct net_device *dev)
 {
 	struct ethhdr *eth;
-	
-	skb->mac.raw=skb->data;
+
+	skb_reset_mac_header(skb);
 	skb_pull(skb, ETH_HLEN);
 	/*
 	 * NB: mac.ethernet is replaced in 2.6.9 by eth_hdr but
 	 *     since that's an inline and not a define there's
 	 *     no easy way to do this cleanly.
 	 */
-	eth = (struct ethhdr *)skb->mac.raw;
+	eth = eth_hdr(skb);
 	
 	if (*eth->h_dest & 1)
 		if (memcmp(eth->h_dest, dev->broadcast, ETH_ALEN) == 0)
diff -Naur madwifi-0.9.3.1.orig/net80211/ieee80211_monitor.c madwifi-0.9.3.1/net80211/ieee80211_monitor.c
--- madwifi-0.9.3.1.orig/net80211/ieee80211_monitor.c	2007-02-15 00:45:48.000000000 +0100
+++ madwifi-0.9.3.1/net80211/ieee80211_monitor.c	2007-07-10 14:45:14.000000000 +0200
@@ -373,7 +373,7 @@
 		if (vap->iv_monitor_txf_len && tx) {
 			/* truncate transmit feedback packets */
 			skb_trim(skb1, vap->iv_monitor_txf_len);
-			skb1->nh.raw = skb1->data;
+			skb1->network_header = skb1->data;
 		}
 		switch (vap->iv_dev->type) {
 		case ARPHRD_IEEE80211:
@@ -555,7 +555,7 @@
 				skb_trim(skb1, skb1->len - IEEE80211_CRC_LEN);
 			}
 			skb1->dev = dev; /* NB: deliver to wlanX */
-			skb1->mac.raw = skb1->data;
+			skb_reset_mac_header(skb1);
 			skb1->ip_summed = CHECKSUM_NONE;
 			skb1->pkt_type = pkttype;
 			skb1->protocol = __constant_htons(0x0019); /* ETH_P_80211_RAW */
