Fix Linux 2.6.30 compatibility

Linux 2.6.30 doesn't define IRQ_NONE as a macro. Assume irqreturn_t,
IRQ_NONE and IRQ_HANDLED to be present on Linux 2.6.29 and newer.
http://madwifi-project.org/changeset/3986
--- a/ath/if_athvar.h
+++ b/ath/if_athvar.h
@@ -83,11 +83,13 @@ typedef void *TQUEUE_ARG;
 /*
  * Guess how the interrupt handler should work.
  */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,29)
 #if !defined(IRQ_NONE)
 typedef void irqreturn_t;
 #define	IRQ_NONE
 #define	IRQ_HANDLED
 #endif /* !defined(IRQ_NONE) */
+#endif /* Linux < 2.6.29 */
 
 #ifndef SET_MODULE_OWNER
 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,23)
--- ./net80211/ieee80211_linux.c.orig	2009-06-12 22:05:10.000000000 +0200
+++ ./net80211/ieee80211_linux.c	2009-06-12 22:06:49.000000000 +0200
@@ -247,9 +247,12 @@
 	static const char *tag = "STA-TRAFFIC-STAT";
 	struct net_device *dev = vap->iv_dev;
 	union iwreq_data wreq;
-	char buf[1024];
 
-	snprintf(buf, sizeof(buf), "%s\nmac=%s\nrx_packets=%u\nrx_bytes=%llu\n"
+	char *buf = kmalloc(1024, GFP_KERNEL);
+	if (!buf) {
+		return;
+	}
+	snprintf(buf, 1024, "%s\nmac=%s\nrx_packets=%u\nrx_bytes=%llu\n"
 			"tx_packets=%u\ntx_bytes=%llu\n", tag, 
 			ether_sprintf(ni->ni_macaddr), ni->ni_stats.ns_rx_data, 
 			ni->ni_stats.ns_rx_bytes, ni->ni_stats.ns_tx_data, 
@@ -257,6 +260,7 @@
 	memset(&wreq, 0, sizeof(wreq));
 	wreq.data.length = strlen(buf);
 	wireless_send_event(dev, IWEVCUSTOM, &wreq, buf);
+	kfree(buf);
 }
 
 void
--- ./net80211/ieee80211_wireless.c.orig	2009-06-12 22:00:11.000000000 +0200
+++ ./net80211/ieee80211_wireless.c	2009-06-12 22:04:33.000000000 +0200
@@ -1459,17 +1459,22 @@
 {
 	struct ieee80211vap *vap = netdev_priv(dev);
 	struct ieee80211com *ic = vap->iv_ic;
-	struct waplistreq req;		/* XXX off stack */
+	struct waplistreq *req = kmalloc(sizeof (struct waplistreq), GFP_KERNEL);
+	if (!req) {
+		return -ENOMEM;
+	}
 
-	req.vap = vap;
-	req.i = 0;
-	ieee80211_scan_iterate(ic, waplist_cb, &req);
+	req->vap = vap;
+	req->i = 0;
+	ieee80211_scan_iterate(ic, waplist_cb, req);
 
-	data->length = req.i;
-	memcpy(extra, &req.addr, req.i * sizeof(req.addr[0]));
+	data->length = req->i;
+	memcpy(extra, &req->addr, req->i * sizeof(req->addr[0]));
 	data->flags = 1;		/* signal quality present (sort of) */
-	memcpy(extra + req.i * sizeof(req.addr[0]), &req.qual,
-		req.i * sizeof(req.qual[0]));
+	memcpy(extra + req->i * sizeof(req->addr[0]), &req->qual,
+		req->i * sizeof(req->qual[0]));
+
+	kfree (req);
 
 	return 0;
 }
