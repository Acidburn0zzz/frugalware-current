--- configure.ac	2006-10-22 14:48:29.000000000 +0100
+++ configure.ac	2007-05-03 11:34:33.000000000 +0100
@@ -3,7 +3,7 @@
 # gaim-encryption configure script, thanks guys ;)
 #
 
-AC_INIT([gaim-libnotify], [0.12], [nothing])
+AC_INIT([pidgin-libnotify], [0.13], [nothing])
 AC_CANONICAL_SYSTEM
 AM_CONFIG_HEADER(config.h)
 
@@ -33,9 +33,11 @@
 #
 # Setup gettext
 #
-ALL_LINGUAS="es fr it nl pl pt pt_BR"
-AM_GNU_GETTEXT_VERSION(0.10.40)
-AM_GNU_GETTEXT
+AC_PROG_INTLTOOL
+GETTEXT_PACKAGE=pidgin-libnotify
+AC_SUBST(GETTEXT_PACKAGE)
+ALL_LINGUAS="es fr it nl pl pt pt_BR sl"
+AM_GLIB_GNU_GETTEXT
 
 #
 # Look for the C compiler
@@ -80,19 +82,34 @@
 AC_SUBST(GTK_LIBS)
 
 #
-# Check for gaim
+# Check for libpurple
 #
 
-PKG_CHECK_MODULES(GAIM, gaim >= 2.0.0,
+PKG_CHECK_MODULES(LIBPURPLE, purple >= 2.0.0,
 [
-	AC_DEFINE(HAVE_GAIM, 1, [Define if we've found gaim.])
+	AC_DEFINE(HAVE_LIBPURPLE, 1, [Define if we've found libpurple.])
 ])
 
-AC_SUBST(GAIM_CFLAGS)
-GAIM_LIBDIR=`pkg-config --variable=libdir gaim`
-GAIM_DATADIR=`pkg-config --variable=datadir gaim`
-AC_SUBST(GAIM_LIBDIR)
-AC_SUBST(GAIM_DATADIR)
+AC_SUBST(LIBPURPLE_CFLAGS)
+LIBPURPLE_LIBDIR=`pkg-config --variable=libdir purple`
+LIBPURPLE_DATADIR=`pkg-config --variable=datadir purple`
+AC_SUBST(LIBPURPLE_LIBDIR)
+AC_SUBST(LIBPURPLE_DATADIR)
+
+#
+# Check for pidgin
+#
+
+PKG_CHECK_MODULES(PIDGIN, pidgin >= 2.0.0,
+[
+  AC_DEFINE(HAVE_PIDGIN, 1, [Define if we've found pidgin.])
+])
+
+AC_SUBST(PIDGIN_CFLAGS)
+PIDGIN_LIBDIR=`pkg-config --variable=libdir pidgin`
+PIDGIN_DATADIR=`pkg-config --variable=datadir pidgin`
+AC_SUBST(PIDGIN_LIBDIR)
+AC_SUBST(PIDGIN_DATADIR)
 
 #
 # Check if plugins are enabled
@@ -119,7 +136,6 @@
 #
 AC_OUTPUT([Makefile
 		   VERSION
-		   intl/Makefile
 		   po/Makefile.in
 		   src/Makefile
 		  ])
@@ -129,8 +145,9 @@
 echo;
 echo Debugging enabled..............: $enable_debug
 echo Deprecated API enabled.........: $enable_deprecated
-#echo Gaim API.......................: $GAIM_CFLAGS
+#echo libpurple API..................: $LIBPURPLE_CFLAGS
+#echo pidgin API.....................: $PIDGIN_CFLAGS
 echo;
 echo Type make to compile
-echo Thank you for using gaim-libnotify
+echo Thank you for using pidgin-libnotify
 echo;
--- src/gaim-libnotify.c	2006-10-22 14:46:44.000000000 +0100
+++ src/gaim-libnotify.c	2007-05-03 22:54:18.000000000 +0100
@@ -1,5 +1,5 @@
 /*
- * Gaim-libnotify - Provides a libnotify interface for Gaim
+ * Pidgin-libnotify - Provides a libnotify interface for Pidgin
  * Copyright (C) 2005 Duarte Henriques
  *
  * This program is free software; you can redistribute it and/or
@@ -23,59 +23,59 @@
 
 #include "gln_intl.h"
 
-#ifndef GAIM_PLUGINS
-#define GAIM_PLUGINS
+#ifndef PURPLE_PLUGINS
+#define PURPLE_PLUGINS
 #endif
 
-#include <gaim.h>
+#include <pidgin.h>
 #include <version.h>
 #include <debug.h>
 #include <util.h>
 #include <privacy.h>
 
-/* for gaim_gtk_create_prpl_icon */
-#include <gaim/gtkutils.h>
+/* for pidgin_create_prpl_icon */
+#include <gtkutils.h>
 
 #include <libnotify/notify.h>
 
 #include <string.h>
 
-#define PLUGIN_ID "gaim-libnotify"
+#define PLUGIN_ID "pidgin-libnotify"
 
 static GHashTable *buddy_hash;
 
-static GaimPluginPrefFrame *
-get_plugin_pref_frame (GaimPlugin *plugin)
+static PurplePluginPrefFrame *
+get_plugin_pref_frame (PurplePlugin *plugin)
 {
-	GaimPluginPrefFrame *frame;
-	GaimPluginPref *ppref;
+	PurplePluginPrefFrame *frame;
+	PurplePluginPref *ppref;
 
-	frame = gaim_plugin_pref_frame_new ();
+	frame = purple_plugin_pref_frame_new ();
 
-	ppref = gaim_plugin_pref_new_with_name_and_label (
+	ppref = purple_plugin_pref_new_with_name_and_label (
                             "/plugins/gtk/libnotify/newmsg",
                             _("New messages"));
-	gaim_plugin_pref_frame_add (frame, ppref);
+	purple_plugin_pref_frame_add (frame, ppref);
 
-	ppref = gaim_plugin_pref_new_with_name_and_label (
+	ppref = purple_plugin_pref_new_with_name_and_label (
                             "/plugins/gtk/libnotify/newconvonly",
                             _("Only new conversations"));
-	gaim_plugin_pref_frame_add (frame, ppref);
+	purple_plugin_pref_frame_add (frame, ppref);
 
-	ppref = gaim_plugin_pref_new_with_name_and_label (
+	ppref = purple_plugin_pref_new_with_name_and_label (
                             "/plugins/gtk/libnotify/blocked",
                             _("Ignore events from blocked users"));
-	gaim_plugin_pref_frame_add (frame, ppref);
+	purple_plugin_pref_frame_add (frame, ppref);
 
-	ppref = gaim_plugin_pref_new_with_name_and_label (
+	ppref = purple_plugin_pref_new_with_name_and_label (
                             "/plugins/gtk/libnotify/signon",
                             _("Buddy signs on"));
-	gaim_plugin_pref_frame_add (frame, ppref);
+	purple_plugin_pref_frame_add (frame, ppref);
 
-	ppref = gaim_plugin_pref_new_with_name_and_label (
+	ppref = purple_plugin_pref_new_with_name_and_label (
                             "/plugins/gtk/libnotify/signoff",
                             _("Buddy signs off"));
-	gaim_plugin_pref_frame_add (frame, ppref);
+	purple_plugin_pref_frame_add (frame, ppref);
 
 	return frame;
 }
@@ -86,19 +86,19 @@
 static gboolean
 event_connection_throttle_cb (gpointer data)
 {
-	GaimAccount *account;
+	PurpleAccount *account;
 
-	account = (GaimAccount *)data;
+	account = (PurpleAccount *)data;
 
 	if (!account)
 		return FALSE;
 
-	if (!gaim_account_get_connection (account)) {
+	if (!purple_account_get_connection (account)) {
 		just_signed_on_accounts = g_list_remove (just_signed_on_accounts, account);
 		return FALSE;
 	}
 
-	if (!gaim_account_is_connected (account))
+	if (!purple_account_is_connected (account))
 		return TRUE;
 
 	just_signed_on_accounts = g_list_remove (just_signed_on_accounts, account);
@@ -106,14 +106,18 @@
 }
 
 static void
-event_connection_throttle (GaimConnection *gc, gpointer data)
+event_connection_throttle (PurpleConnection *gc, gpointer data)
 {
-	GaimAccount *account;
+	PurpleAccount *account;
+
+	/* TODO: this function gets called after buddy signs on for GTalk
+	   users who have themselves as a buddy */
+	purple_debug_info (PLUGIN_ID, "event_connection_throttle() called\n");
 
 	if (!gc)
 		return;
 
-	account = gaim_connection_get_account(gc);
+	account = purple_connection_get_account(gc);
 	if (!account)
 		return;
 
@@ -123,7 +127,7 @@
 
 /* do NOT g_free() the string returned by this function */
 static gchar *
-best_name (GaimBuddy *buddy)
+best_name (PurpleBuddy *buddy)
 {
 	if (buddy->alias) {
 		return buddy->alias;
@@ -135,14 +139,14 @@
 }
 
 static GdkPixbuf *
-pixbuf_from_buddy_icon (GaimBuddyIcon *buddy_icon)
+pixbuf_from_buddy_icon (PurpleBuddyIcon *buddy_icon)
 {
 	GdkPixbuf *icon;
 	const guchar *data;
 	size_t len;
 	GdkPixbufLoader *loader;
 
-	data = gaim_buddy_icon_get_data (buddy_icon, &len);
+	data = purple_buddy_icon_get_data (buddy_icon, &len);
 
 	loader = gdk_pixbuf_loader_new ();
 	gdk_pixbuf_loader_set_size (loader, 48, 48);
@@ -164,23 +168,23 @@
 action_cb (NotifyNotification *notification,
 		   gchar *action, gpointer user_data)
 {
-	GaimBuddy *buddy = NULL;
-	GaimConversation *conv = NULL;
+	PurpleBuddy *buddy = NULL;
+	PurpleConversation *conv = NULL;
 
-	gaim_debug_info (PLUGIN_ID, "action_cb(), "
+	purple_debug_info (PLUGIN_ID, "action_cb(), "
 					"notification: 0x%x, action: '%s'", notification, action);
 
-	buddy = (GaimBuddy *)g_object_get_data (G_OBJECT(notification), "buddy");
+	buddy = (PurpleBuddy *)g_object_get_data (G_OBJECT(notification), "buddy");
 
 	if (!buddy) {
-		gaim_debug_warning (PLUGIN_ID, "Got no buddy!");
+		purple_debug_warning (PLUGIN_ID, "Got no buddy!");
 		return;
 	}
 
-	conv = gaim_find_conversation_with_account (GAIM_CONV_TYPE_ANY, buddy->name, buddy->account);
+	conv = purple_find_conversation_with_account (PURPLE_CONV_TYPE_ANY, buddy->name, buddy->account);
 
 	if (!conv) {
-		conv = gaim_conversation_new (GAIM_CONV_TYPE_IM,
+		conv = purple_conversation_new (PURPLE_CONV_TYPE_IM,
 									  buddy->account,
 									  buddy->name);
 	}
@@ -192,11 +196,11 @@
 static gboolean
 closed_cb (NotifyNotification *notification)
 {
-	GaimBuddy *buddy;
+	PurpleBuddy *buddy;
 
-	gaim_debug_info (PLUGIN_ID, "closed_cb(), notification: 0x%x\n", notification);
+	purple_debug_info (PLUGIN_ID, "closed_cb(), notification: 0x%x\n", notification);
 
-	buddy = (GaimBuddy *)g_object_get_data (G_OBJECT(notification), "buddy");
+	buddy = (PurpleBuddy *)g_object_get_data (G_OBJECT(notification), "buddy");
 	if (buddy)
 		g_hash_table_remove (buddy_hash, buddy);
 
@@ -235,11 +239,11 @@
 static void
 notify (const gchar *title,
 		const gchar *body,
-		GaimBuddy *buddy)
+		PurpleBuddy *buddy)
 {
 	NotifyNotification *notification = NULL;
 	GdkPixbuf *icon;
-	GaimBuddyIcon *buddy_icon;
+	PurpleBuddyIcon *buddy_icon;
 	gchar *tr_body;
 
 	if (body)
@@ -254,7 +258,7 @@
 		/* this shouldn't be necessary, file a bug */
 		notify_notification_show (notification, NULL);
 
-		gaim_debug_info (PLUGIN_ID, "notify(), update: "
+		purple_debug_info (PLUGIN_ID, "notify(), update: "
 						 "title: '%s', body: '%s', buddy: '%s'\n",
 						 title, tr_body, best_name (buddy));
 
@@ -262,26 +266,26 @@
 		return;
 	}
 	notification = notify_notification_new (title, tr_body, NULL, NULL);
-	gaim_debug_info (PLUGIN_ID, "notify(), new: "
+	purple_debug_info (PLUGIN_ID, "notify(), new: "
 					 "title: '%s', body: '%s', buddy: '%s'\n",
 					 title, tr_body, best_name (buddy));
 
 	g_free (tr_body);
 
-	buddy_icon = gaim_buddy_get_icon (buddy);
+	buddy_icon = purple_buddy_get_icon (buddy);
 	if (buddy_icon) {
 		icon = pixbuf_from_buddy_icon (buddy_icon);
-		gaim_debug_info (PLUGIN_ID, "notify(), has a buddy icon.\n");
+		purple_debug_info (PLUGIN_ID, "notify(), has a buddy icon.\n");
 	} else {
-		icon = gaim_gtk_create_prpl_icon (buddy->account, 1);
-		gaim_debug_info (PLUGIN_ID, "notify(), has a prpl icon.\n");
+		icon = pidgin_create_prpl_icon (buddy->account, 1);
+		purple_debug_info (PLUGIN_ID, "notify(), has a prpl icon.\n");
 	}
 
 	if (icon) {
 		notify_notification_set_icon_from_pixbuf (notification, icon);
 		g_object_unref (icon);
 	} else {
-		gaim_debug_warning (PLUGIN_ID, "notify(), couldn't find any icon!\n");
+		purple_debug_warning (PLUGIN_ID, "notify(), couldn't find any icon!\n");
 	}
 
 	g_hash_table_insert (buddy_hash, buddy, notification);
@@ -295,13 +299,13 @@
 	notify_notification_add_action (notification, "show", _("Show"), action_cb, NULL, NULL);
 
 	if (!notify_notification_show (notification, NULL)) {
-		gaim_debug_error (PLUGIN_ID, "notify(), failed to send notification\n");
+		purple_debug_error (PLUGIN_ID, "notify(), failed to send notification\n");
 	}
 
 }
 
 static void
-notify_buddy_signon_cb (GaimBuddy *buddy,
+notify_buddy_signon_cb (PurpleBuddy *buddy,
 						gpointer data)
 {
 	gchar *tr_name, *title;
@@ -309,14 +313,14 @@
 
 	g_return_if_fail (buddy);
 
-	if (!gaim_prefs_get_bool ("/plugins/gtk/libnotify/signon"))
+	if (!purple_prefs_get_bool ("/plugins/gtk/libnotify/signon"))
 		return;
 
 	if (g_list_find (just_signed_on_accounts, buddy->account))
 		return;
 
-	blocked = gaim_prefs_get_bool ("/plugins/gtk/libnotify/blocked");
-	if (!gaim_privacy_check (buddy->account, buddy->name) && blocked)
+	blocked = purple_prefs_get_bool ("/plugins/gtk/libnotify/blocked");
+	if (!purple_privacy_check (buddy->account, buddy->name) && blocked)
 		return;
 
 	tr_name = truncate_escape_string (best_name (buddy), 25);
@@ -330,7 +334,7 @@
 }
 
 static void
-notify_buddy_signoff_cb (GaimBuddy *buddy,
+notify_buddy_signoff_cb (PurpleBuddy *buddy,
 						 gpointer data)
 {
 	gchar *tr_name, *title;
@@ -338,14 +342,14 @@
 
 	g_return_if_fail (buddy);
 
-	if (!gaim_prefs_get_bool ("/plugins/gtk/libnotify/signoff"))
+	if (!purple_prefs_get_bool ("/plugins/gtk/libnotify/signoff"))
 		return;
 
 	if (g_list_find (just_signed_on_accounts, buddy->account))
 		return;
 
-	blocked = gaim_prefs_get_bool ("/plugins/gtk/libnotify/blocked");
-	if (!gaim_privacy_check (buddy->account, buddy->name) && blocked)
+	blocked = purple_prefs_get_bool ("/plugins/gtk/libnotify/blocked");
+	if (!purple_privacy_check (buddy->account, buddy->name) && blocked)
 		return;
 
 	tr_name = truncate_escape_string (best_name (buddy), 25);
@@ -359,26 +363,26 @@
 }
 
 static void
-notify_msg_sent (GaimAccount *account,
+notify_msg_sent (PurpleAccount *account,
 				 const gchar *sender,
 				 const gchar *message)
 {
-	GaimBuddy *buddy;
+	PurpleBuddy *buddy;
 	gchar *title, *body, *tr_name;
 	gboolean blocked;
 
-	buddy = gaim_find_buddy (account, sender);
+	buddy = purple_find_buddy (account, sender);
 	if (!buddy)
 		return;
 
-	blocked = gaim_prefs_get_bool ("/plugins/gtk/libnotify/blocked");
-	if (!gaim_privacy_check(account, sender) && blocked)
+	blocked = purple_prefs_get_bool ("/plugins/gtk/libnotify/blocked");
+	if (!purple_privacy_check(account, sender) && blocked)
 		return;
 
 	tr_name = truncate_escape_string (best_name (buddy), 25);
 
 	title = g_strdup_printf (_("%s says:"), tr_name);
-	body = gaim_markup_strip_html (message);
+	body = purple_markup_strip_html (message);
 
 	notify (title, body, buddy);
 
@@ -388,28 +392,28 @@
 }
 
 static void
-notify_new_message_cb (GaimAccount *account,
+notify_new_message_cb (PurpleAccount *account,
 					   const gchar *sender,
 					   const gchar *message,
 					   int flags,
 					   gpointer data)
 {
-	GaimConversation *conv;
+	PurpleConversation *conv;
 
-	if (!gaim_prefs_get_bool ("/plugins/gtk/libnotify/newmsg"))
+	if (!purple_prefs_get_bool ("/plugins/gtk/libnotify/newmsg"))
 		return;
 
-	conv = gaim_find_conversation_with_account (GAIM_CONV_TYPE_IM, sender, account);
+	conv = purple_find_conversation_with_account (PURPLE_CONV_TYPE_IM, sender, account);
 
 #ifndef DEBUG /* in debug mode, always show notifications */
-	if (conv && gaim_conversation_has_focus (conv)) {
-		gaim_debug_info (PLUGIN_ID, "Conversation has focus 0x%x\n", conv);
+	if (conv && purple_conversation_has_focus (conv)) {
+		purple_debug_info (PLUGIN_ID, "Conversation has focus 0x%x\n", conv);
 		return;
 	}
 #endif
 
-	if (conv && gaim_prefs_get_bool ("/plugins/gtk/libnotify/newconvonly")) {
-		gaim_debug_info (PLUGIN_ID, "Conversation is not new 0x%x\n", conv);
+	if (conv && purple_prefs_get_bool ("/plugins/gtk/libnotify/newconvonly")) {
+		purple_debug_info (PLUGIN_ID, "Conversation is not new 0x%x\n", conv);
 		return;
 	}
 
@@ -417,15 +421,15 @@
 }
 
 static void
-notify_chat_nick (GaimAccount *account,
+notify_chat_nick (PurpleAccount *account,
 				  const gchar *sender,
 				  const gchar *message,
-				  GaimConversation *conv,
+				  PurpleConversation *conv,
 				  gpointer data)
 {
 	gchar *nick;
 
-	nick = (gchar *)gaim_conv_chat_get_nick (GAIM_CONV_CHAT(conv));
+	nick = (gchar *)purple_conv_chat_get_nick (PURPLE_CONV_CHAT(conv));
 	if (nick && !strcmp (sender, nick))
 		return;
 
@@ -436,63 +440,63 @@
 }
 
 static gboolean
-plugin_load (GaimPlugin *plugin)
+plugin_load (PurplePlugin *plugin)
 {
 	void *conv_handle, *blist_handle, *conn_handle;
 
-	if (!notify_is_initted () && !notify_init ("Gaim")) {
-		gaim_debug_error (PLUGIN_ID, "libnotify not running!\n");
+	if (!notify_is_initted () && !notify_init ("Pidgin")) {
+		purple_debug_error (PLUGIN_ID, "libnotify not running!\n");
 		return FALSE;
 	}
 
-	conv_handle = gaim_conversations_get_handle ();
-	blist_handle = gaim_blist_get_handle ();
-	conn_handle = gaim_connections_get_handle();
+	conv_handle = purple_conversations_get_handle ();
+	blist_handle = purple_blist_get_handle ();
+	conn_handle = purple_connections_get_handle();
 
 	buddy_hash = g_hash_table_new (NULL, NULL);
 
-	gaim_signal_connect (blist_handle, "buddy-signed-on", plugin,
-						GAIM_CALLBACK(notify_buddy_signon_cb), NULL);
+	purple_signal_connect (blist_handle, "buddy-signed-on", plugin,
+						PURPLE_CALLBACK(notify_buddy_signon_cb), NULL);
 
-	gaim_signal_connect (blist_handle, "buddy-signed-off", plugin,
-						GAIM_CALLBACK(notify_buddy_signoff_cb), NULL);
+	purple_signal_connect (blist_handle, "buddy-signed-off", plugin,
+						PURPLE_CALLBACK(notify_buddy_signoff_cb), NULL);
 
-	gaim_signal_connect (conv_handle, "received-im-msg", plugin,
-						GAIM_CALLBACK(notify_new_message_cb), NULL);
+	purple_signal_connect (conv_handle, "received-im-msg", plugin,
+						PURPLE_CALLBACK(notify_new_message_cb), NULL);
 
-	gaim_signal_connect (conv_handle, "received-chat-msg", plugin,
-						GAIM_CALLBACK(notify_chat_nick), NULL);
+	purple_signal_connect (conv_handle, "received-chat-msg", plugin,
+						PURPLE_CALLBACK(notify_chat_nick), NULL);
 
 	/* used just to not display the flood of guifications we'd get */
-	gaim_signal_connect (conn_handle, "signed-on", plugin,
-						GAIM_CALLBACK(event_connection_throttle), NULL);
+	purple_signal_connect (conn_handle, "signed-on", plugin,
+						PURPLE_CALLBACK(event_connection_throttle), NULL);
 
 	return TRUE;
 }
 
 static gboolean
-plugin_unload (GaimPlugin *plugin)
+plugin_unload (PurplePlugin *plugin)
 {
 	void *conv_handle, *blist_handle, *conn_handle;
 
-	conv_handle = gaim_conversations_get_handle ();
-	blist_handle = gaim_blist_get_handle ();
-	conn_handle = gaim_connections_get_handle();
+	conv_handle = purple_conversations_get_handle ();
+	blist_handle = purple_blist_get_handle ();
+	conn_handle = purple_connections_get_handle();
 
-	gaim_signal_disconnect (blist_handle, "buddy-signed-on", plugin,
-							GAIM_CALLBACK(notify_buddy_signon_cb));
+	purple_signal_disconnect (blist_handle, "buddy-signed-on", plugin,
+							PURPLE_CALLBACK(notify_buddy_signon_cb));
 
-	gaim_signal_disconnect (blist_handle, "buddy-signed-off", plugin,
-							GAIM_CALLBACK(notify_buddy_signoff_cb));
+	purple_signal_disconnect (blist_handle, "buddy-signed-off", plugin,
+							PURPLE_CALLBACK(notify_buddy_signoff_cb));
 
-	gaim_signal_disconnect (conv_handle, "received-im-msg", plugin,
-							GAIM_CALLBACK(notify_new_message_cb));
+	purple_signal_disconnect (conv_handle, "received-im-msg", plugin,
+							PURPLE_CALLBACK(notify_new_message_cb));
 
-	gaim_signal_disconnect (conv_handle, "received-chat-msg", plugin,
-							GAIM_CALLBACK(notify_chat_nick));
+	purple_signal_disconnect (conv_handle, "received-chat-msg", plugin,
+							PURPLE_CALLBACK(notify_chat_nick));
 
-	gaim_signal_disconnect (conn_handle, "signed-on", plugin,
-							GAIM_CALLBACK(event_connection_throttle));
+	purple_signal_disconnect (conn_handle, "signed-on", plugin,
+							PURPLE_CALLBACK(event_connection_throttle));
 
 	g_hash_table_destroy (buddy_hash);
 
@@ -501,21 +505,21 @@
 	return TRUE;
 }
 
-static GaimPluginUiInfo prefs_info = {
+static PurplePluginUiInfo prefs_info = {
     get_plugin_pref_frame,
     0,						/* page num (Reserved) */
     NULL					/* frame (Reserved) */
 };
 
-static GaimPluginInfo info = {
-    GAIM_PLUGIN_MAGIC,										/* api version */
-    GAIM_MAJOR_VERSION,
-    GAIM_MINOR_VERSION,
-    GAIM_PLUGIN_STANDARD,									/* type */
+static PurplePluginInfo info = {
+    PURPLE_PLUGIN_MAGIC,										/* api version */
+    PURPLE_MAJOR_VERSION,
+    PURPLE_MINOR_VERSION,
+    PURPLE_PLUGIN_STANDARD,									/* type */
     0,														/* ui requirement */
     0,														/* flags */
     NULL,													/* dependencies */
-    GAIM_PRIORITY_DEFAULT,									/* priority */
+    PURPLE_PRIORITY_DEFAULT,									/* priority */
     
     PLUGIN_ID,												/* id */
     NULL,													/* name */
@@ -535,22 +539,22 @@
 };
 
 static void
-init_plugin (GaimPlugin *plugin)
+init_plugin (PurplePlugin *plugin)
 {
 	bindtextdomain (PACKAGE, LOCALEDIR);
 	bind_textdomain_codeset (PACKAGE, "UTF-8");
 
 	info.name = _("Libnotify Popups");
 	info.summary = _("Displays popups via libnotify.");
-	info.description = _("Gaim-libnotify:\nDisplays popups via libnotify.");
+	info.description = _("Pidgin-libnotify:\nDisplays popups via libnotify.");
 
-	gaim_prefs_add_none ("/plugins/gtk/libnotify");
-	gaim_prefs_add_bool ("/plugins/gtk/libnotify/newmsg", TRUE);
-	gaim_prefs_add_bool ("/plugins/gtk/libnotify/blocked", TRUE);
-	gaim_prefs_add_bool ("/plugins/gtk/libnotify/newconvonly", FALSE);
-	gaim_prefs_add_bool ("/plugins/gtk/libnotify/signon", TRUE);
-	gaim_prefs_add_bool ("/plugins/gtk/libnotify/signoff", FALSE);
+	purple_prefs_add_none ("/plugins/gtk/libnotify");
+	purple_prefs_add_bool ("/plugins/gtk/libnotify/newmsg", TRUE);
+	purple_prefs_add_bool ("/plugins/gtk/libnotify/blocked", TRUE);
+	purple_prefs_add_bool ("/plugins/gtk/libnotify/newconvonly", FALSE);
+	purple_prefs_add_bool ("/plugins/gtk/libnotify/signon", TRUE);
+	purple_prefs_add_bool ("/plugins/gtk/libnotify/signoff", FALSE);
 }
 
-GAIM_INIT_PLUGIN(notify, init_plugin, info)
+PURPLE_INIT_PLUGIN(notify, init_plugin, info)
 
--- Makefile.am	2005-12-24 02:44:33.000000000 +0000
+++ Makefile.am	2006-11-17 00:37:25.000000000 +0000
@@ -6,5 +6,5 @@
 		README \
 		COPYING
 
-SUBDIRS = intl po src
+SUBDIRS = po src
 
--- /dev/null	2007-05-03 09:23:19.077225576 +0100
+++ po/sl.po	2006-11-17 22:17:27.000000000 +0000
@@ -0,0 +1,75 @@
+# Slovenian (sl) translation of gaim-libnotify.
+# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
+# This file is distributed under the same license as the gaim-libnotify package.
+#
+# Matic Žgur <mr.zgur@gmail.com>, 2006.
+#
+msgid ""
+msgstr ""
+"Project-Id-Version: gaim-libnotify\n"
+"Report-Msgid-Bugs-To: \n"
+"POT-Creation-Date: 2006-11-17 00:40+0000\n"
+"PO-Revision-Date: 2006-11-16 18:11+0100\n"
+"Last-Translator: Matic Žgur <mr.zgur@gmail.com>\n"
+"Language-Team: Slovenian <LL@li.org>\n"
+"MIME-Version: 1.0\n"
+"Content-Type: text/plain; charset=utf-8\n"
+"Content-Transfer-Encoding: 8bit\n"
+"Plural-Forms: nplurals=4; plural=(n%100==1 ? 0 : n%100==2 ? 1 : n%100==3 || n"
+"%100==4 ? 2 : 3);\n"
+"X-Poedit-Language: Slovenian\n"
+
+#: src/gaim-libnotify.c:57
+msgid "New messages"
+msgstr "Nova sporočila"
+
+#: src/gaim-libnotify.c:62
+msgid "Only new conversations"
+msgstr "Samo novi pogovori"
+
+#: src/gaim-libnotify.c:67
+msgid "Ignore events from blocked users"
+msgstr "Prezri dogodke pri blokiranih uporabnikih"
+
+#: src/gaim-libnotify.c:72
+msgid "Buddy signs on"
+msgstr "Prijatelj se prijavi"
+
+#: src/gaim-libnotify.c:77
+msgid "Buddy signs off"
+msgstr "Prijatelj se odjavi"
+
+#: src/gaim-libnotify.c:295
+msgid "Show"
+msgstr "Prikaži"
+
+#: src/gaim-libnotify.c:324
+#, c-format
+msgid "%s signed on"
+msgstr "%s se je prijavil/a"
+
+#: src/gaim-libnotify.c:353
+#, c-format
+msgid "%s signed off"
+msgstr "%s se je odjavil/a"
+
+#: src/gaim-libnotify.c:380
+#, c-format
+msgid "%s says:"
+msgstr "%s pravi:"
+
+#: src/gaim-libnotify.c:543
+msgid "Libnotify Popups"
+msgstr "Pojavna okna libnotify"
+
+#: src/gaim-libnotify.c:544
+msgid "Displays popups via libnotify."
+msgstr "Prikaže pojavna okna preko libnotify."
+
+#: src/gaim-libnotify.c:545
+msgid ""
+"Gaim-libnotify:\n"
+"Displays popups via libnotify."
+msgstr ""
+"Gaim-libnotify:\n"
+"Prikaže pojavna okna preko libnotify."
--- src/Makefile.am	2005-12-24 02:44:33.000000000 +0000
+++ src/Makefile.am	2007-05-03 11:34:53.000000000 +0100
@@ -1,4 +1,4 @@
-gddir = $(GAIM_LIBDIR)/gaim
+gddir = $(LIBPURPLE_LIBDIR)/purple-2
 
 gaim_libnotify_la_LDFLAGS = -module -avoid-version
 
@@ -15,13 +15,14 @@
 endif
 
 AM_CPPFLAGS = \
-	-DLIBDIR=\"$(GAIM_LIBDIR)/gaim/\" \
-	-DDATADIR=\"$(GAIM_DATADIR)\" \
-	-DLOCALEDIR=\"$(GAIM_DATADIR)/locale\" \
+	-DLIBDIR=\"$(LIBPURPLE_LIBDIR)/purple-2/\" \
+	-DDATADIR=\"$(LIBPURPLE_DATADIR)\" \
+	-DLOCALEDIR=\"$(LIBPURPLE_DATADIR)/locale\" \
 	$(DEBUG_CFLAGS) \
 	$(GTK_CFLAGS) \
 	$(GLIB_CFLAGS) \
-	$(GAIM_CFLAGS) \
+	$(PIDGIN_CFLAGS) \
+	$(LIBPURPLE_CFLAGS) \
 	$(LIBNOTIFY_CFLAGS) \
 	$(DBUS_CFLAGS) \
 	$(GTK_CFLAGS)
