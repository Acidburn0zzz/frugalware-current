--- zapping-0.10cvs6/test/simd.c	2006-04-12 03:42:09.000000000 +0200
+++ zapping-0.10cvs6-p/test/simd.c	2007-09-25 21:32:17.000000000 +0200
@@ -16,7 +16,7 @@
  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  */
 
-/* $Id: simd.c,v 1.4 2006/04/12 01:42:09 mschimek Exp $ */
+/* $Id: simd.c,v 1.5 2007/08/30 12:32:12 mschimek Exp $ */
 
 #ifdef HAVE_CONFIG_H
 #  include "config.h"
@@ -91,6 +91,44 @@
 #define SAT32(n) SATURATE (n, -0x8000000, 0x7FFFFFFF)
 #define SATU32(n) SATURATE (n, 0, 0xFFFFFFFFU)
 
+#define ISHIFT_CASE(op, offs)						\
+	case 0 + offs: return op (val, 0 + offs);			\
+	case 1 + offs: return op (val, 1 + offs);			\
+	case 2 + offs: return op (val, 2 + offs);			\
+	case 3 + offs: return op (val, 3 + offs);			\
+	case 4 + offs: return op (val, 4 + offs);			\
+	case 5 + offs: return op (val, 5 + offs);			\
+	case 6 + offs: return op (val, 6 + offs);			\
+	case 7 + offs: return op (val, 7 + offs);
+
+#define ISHIFT16(type, op)						\
+static type test_ ## op (type val, unsigned int sh) {			\
+	switch (sh & 15) {						\
+	ISHIFT_CASE (op, 0)						\
+	ISHIFT_CASE (op, 8)						\
+	default: assert (0); return val;				\
+	}								\
+}
+
+ISHIFT16 (v16, vsl16)
+ISHIFT16 (v16, vsr16)
+ISHIFT16 (vu16, vsru16)
+
+#define ISHIFT32(type, op)						\
+static type test_ ## op (type val, unsigned int sh) {			\
+	switch (sh & 31) {						\
+	ISHIFT_CASE (op, 0)						\
+	ISHIFT_CASE (op, 8)						\
+	ISHIFT_CASE (op, 16)						\
+	ISHIFT_CASE (op, 24)						\
+	default: assert (0); return val;				\
+	}								\
+}
+
+ISHIFT32 (v32, vsl32)
+ISHIFT32 (v32, vsr32)
+ISHIFT32 (vu32, vsru32)
+
 void
 SIMD_NAME (test)		(void)
 {
@@ -176,7 +214,6 @@
 		PASS (u16, 0, vzerou16 ());
 		PASS (u32, 0, vzerou32 ());
 
-#if 1
 		PASS (8, -1, vminus18 ());
 		PASS (16, -1, vminus116 ());
 		PASS (32, -1, vminus132 ());
@@ -211,15 +248,16 @@
 		PASS (8, sa8 >> 1, vsr18 (va8));
 		PASS (u8, sau8 >> 1, vsr1u8 (vau8));
 
-		PASS (16, sa16 << 7, vsl16 (va16, 7));
-		PASS (16, sa16 >> 7, vsr16 (va16, 7));
-		PASS (u16, sau16 >> 7, vsru16 (vau16, 7));
-
-#if !(SIMD & CPU_FEATURE_ALTIVEC)
-		PASS (16, sa16 << (sb8 & 15), vsl16 (va16, (sb8 & 15)));
-		PASS (16, sa16 >> (sb8 & 15), vsr16 (va16, (sb8 & 15)));
-		PASS (u16, sau16 >> (sb8 & 15), vsru16 (vau16, (sb8 & 15)));
-#endif
+		PASS (16, sa16 << (sb8 & 15), test_vsl16 (va16, (sb8 & 15)));
+		PASS (16, sa16 >> (sb8 & 15), test_vsr16 (va16, (sb8 & 15)));
+		PASS (u16, sau16 >> (sb8 & 15),
+		      test_vsru16 (vau16, (sb8 & 15)));
+
+		PASS (32, sa32 << (sb8 & 15), test_vsl32 (va32, (sb8 & 15)));
+		PASS (32, sa32 >> (sb8 & 15), test_vsr32 (va32, (sb8 & 15)));
+		PASS (u32, sau32 >> (sb8 & 15),
+		      test_vsru32 (vau32, (sb8 & 15)));
+
 		// vlsr
 		// vshiftu2x
 
@@ -277,7 +315,6 @@
 			      fast_vavgu8 (vau8, vbu8));
 #endif
 
-#endif
 		PASS (u8, (sau8 > sbu8) ? a : b, vmaxu8 (vau8, vbu8));
 		PASS (u8, (sau8 < sbu8) ? a : b, vminu8 (vau8, vbu8));
 
