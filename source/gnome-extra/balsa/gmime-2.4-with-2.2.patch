see http://bugzilla.gnome.org/show_bug.cgi?id=537507

Index: balsa/balsa/src/balsa-mime-widget-message.c
===================================================================
--- balsa/src/balsa-mime-widget-message.c	(revision 8017)
+++ balsa/src/balsa-mime-widget-message.c	(working copy)
@@ -315,9 +315,15 @@
 
     /* create a message */
     message = libbalsa_message_new();
+#ifndef HAVE_GMIME_2_4
     data = internet_address_to_string(balsa_app.current_ident->ia, FALSE);
     message->headers->from = internet_address_parse_string(data);
     g_free(data);
+#else /* HAVE_GMIME_2_4 */
+    message->headers->from = internet_address_list_new();
+    internet_address_list_add(message->headers->from,
+                              balsa_app.current_ident->ia);
+#endif /* HAVE_GMIME_2_4 */
 
     data = libbalsa_message_body_get_parameter(mime_body, "subject");
     if (data) {
@@ -326,7 +332,11 @@
     }
 
     data = libbalsa_message_body_get_parameter(mime_body, "server");
+#ifndef HAVE_GMIME_2_4
     message->headers->to_list = internet_address_parse_string(data);
+#else /* HAVE_GMIME_2_4 */
+    message->headers->to_list = internet_address_list_parse_string(data);
+#endif /* HAVE_GMIME_2_4 */
     g_free(data);
 
     /* the original body my have some data to be returned as commands... */
@@ -624,7 +634,11 @@
 {
     gchar *value;
 
+#ifndef HAVE_GMIME_2_4
     if (list == NULL)
+#else /* HAVE_GMIME_2_4 */
+    if (list == NULL || internet_address_list_length(list) == 0)
+#endif /* HAVE_GMIME_2_4 */
 	return;
 
     if (!(bm->shown_headers == HEADERS_ALL ||
Index: balsa/src/store-address.c
===================================================================
--- balsa/src/store-address.c	(revision 8017)
+++ balsa/src/store-address.c	(working copy)
@@ -59,13 +59,22 @@
                                        StoreAddressInfo * info);
 static void store_address_add_address(StoreAddressInfo * info,
                                       const gchar * label,
+#ifndef HAVE_GMIME_2_4
                                       const InternetAddress * address,
                                       const InternetAddress * group);
+#else /* HAVE_GMIME_2_4 */
+                                      InternetAddress * address,
+                                      InternetAddress * group);
+#endif /* HAVE_GMIME_2_4 */
 static void store_address_add_lbaddress(StoreAddressInfo * info,
                                         const LibBalsaAddress *address);
 static void store_address_add_list(StoreAddressInfo * info,
                                    const gchar * label,
+#ifndef HAVE_GMIME_2_4
 				   const InternetAddressList * list);
+#else /* HAVE_GMIME_2_4 */
+				   InternetAddressList * list);
+#endif /* HAVE_GMIME_2_4 */
 
 /* 
  * public interface: balsa_store_address
@@ -348,8 +357,13 @@
  * make a new page in the notebook */
 static void
 store_address_add_address(StoreAddressInfo * info,
+#ifndef HAVE_GMIME_2_4
                           const gchar * lab, const InternetAddress * ia,
 			  const InternetAddress * group)
+#else /* HAVE_GMIME_2_4 */
+                          const gchar * lab, InternetAddress * ia,
+			  InternetAddress * group)
+#endif /* HAVE_GMIME_2_4 */
 {
     gchar *text;
     LibBalsaAddress *address;
@@ -366,7 +380,11 @@
     address = libbalsa_address_new();
     address->full_name =
         g_strdup(ia->name ? ia->name : group ? group->name : NULL);
+#ifndef HAVE_GMIME_2_4
     address->address_list = g_list_prepend(NULL, g_strdup(ia->value.addr));
+#else /* HAVE_GMIME_2_4 */
+    address->address_list = g_list_prepend(NULL, g_strdup(INTERNET_ADDRESS_MAILBOX (ia)->addr));
+#endif /* HAVE_GMIME_2_4 */
     ew = libbalsa_address_get_edit_widget(address, entries, NULL, NULL);
     g_object_unref(address);
 
@@ -409,20 +427,47 @@
 static void
 store_address_add_list(StoreAddressInfo * info,
                        const gchar * label,
+#ifndef HAVE_GMIME_2_4
                        const InternetAddressList * list)
+#else /* HAVE_GMIME_2_4 */
+                       InternetAddressList * list)
+#endif /* HAVE_GMIME_2_4 */
 {
+#ifndef HAVE_GMIME_2_4
     for (; list; list = list->next) {
         InternetAddress *ia = list->address;
 
         if (ia->type == INTERNET_ADDRESS_NAME)
+#else /* HAVE_GMIME_2_4 */
+    int i, j;
+    
+    for (i = 0; i < internet_address_list_length (list); i++) {
+        InternetAddress *ia = internet_address_list_get_address (list, i);
+	
+        if (INTERNET_ADDRESS_IS_MAILBOX (ia))
+#endif /* HAVE_GMIME_2_4 */
             store_address_add_address(info, label, ia, NULL);
+#ifndef HAVE_GMIME_2_4
         else if (ia->type == INTERNET_ADDRESS_GROUP) {
             InternetAddressList *member;
+#else /* HAVE_GMIME_2_4 */
+        else {
+            InternetAddressList *members = INTERNET_ADDRESS_GROUP (ia)->members;
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
             for (member = ia->value.members; member; member = member->next) {
                 InternetAddress *member_address = member->address;
+#else /* HAVE_GMIME_2_4 */
+            for (j = 0; j < internet_address_list_length (members); j++) {
+                InternetAddress *member_address = internet_address_list_get_address (members, j);
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
                 if (member_address->type == INTERNET_ADDRESS_NAME)
+#else /* HAVE_GMIME_2_4 */
+                if (INTERNET_ADDRESS_IS_MAILBOX (member_address))
+#endif /* HAVE_GMIME_2_4 */
                     store_address_add_address(info, label, member_address,
                                               ia);
             }
Index: balsa/src/sendmsg-window.c
===================================================================
--- balsa/src/sendmsg-window.c	(revision 8017)
+++ balsa/src/sendmsg-window.c	(working copy)
@@ -890,26 +890,46 @@
 static gint
 delete_handler(BalsaSendmsg * bsmsg)
 {
+#ifndef HAVE_GMIME_2_4
     InternetAddressList *l =
         libbalsa_address_view_get_list(bsmsg->recipient_view, "To:");
     const gchar *tmp = l && l->address && l->address->name ?
         l->address->name : _("(No name)");
+#else /* HAVE_GMIME_2_4 */
+    InternetAddressList *list;
+    const InternetAddress *ia;
+    const gchar *tmp;
+#endif /* HAVE_GMIME_2_4 */
     gint reply;
     GtkWidget *d;
 
     if (balsa_app.debug)
+#ifndef HAVE_GMIME_2_4
         printf("delete_event_cb\n");
+#else /* HAVE_GMIME_2_4 */
+        printf("%s\n", __func__);
+#endif /* HAVE_GMIME_2_4 */
 
     if (bsmsg->state == SENDMSG_STATE_CLEAN)
         return FALSE;
 
+#ifdef HAVE_GMIME_2_4
+    list = libbalsa_address_view_get_list(bsmsg->recipient_view, "To:");
+    ia = internet_address_list_get_address(list, 0);
+    tmp = ia && ia->name ? ia->name : _("(No name)");
+
+#endif /* HAVE_GMIME_2_4 */
     d = gtk_message_dialog_new(GTK_WINDOW(bsmsg->window),
                                GTK_DIALOG_DESTROY_WITH_PARENT,
                                GTK_MESSAGE_QUESTION,
                                GTK_BUTTONS_YES_NO,
                                _("The message to '%s' is modified.\n"
                                  "Save message to Draftbox?"), tmp);
+#ifndef HAVE_GMIME_2_4
     internet_address_list_destroy(l);
+#else /* HAVE_GMIME_2_4 */
+    g_object_unref(list);
+#endif /* HAVE_GMIME_2_4 */
     gtk_dialog_set_default_response(GTK_DIALOG(d), GTK_RESPONSE_YES);
     gtk_dialog_add_button(GTK_DIALOG(d),
                           GTK_STOCK_CANCEL, GTK_RESPONSE_CANCEL);
@@ -1243,7 +1263,11 @@
                 libbalsa_address_view_get_list(bsmsg->recipient_view,
                                                address_types[type]);
             gchar *p = internet_address_list_to_string(list, FALSE);
+#ifndef HAVE_GMIME_2_4
             internet_address_list_destroy(list);
+#else /* HAVE_GMIME_2_4 */
+            g_object_unref(list);
+#endif /* HAVE_GMIME_2_4 */
             fprintf(tmp, "%s %s\n", _(address_types[type]), p);
             g_free(p);
         }
@@ -1455,6 +1479,7 @@
 #endif
 
     if (bsmsg->ident->bcc) {
+#ifndef HAVE_GMIME_2_4
         InternetAddressList *l,
                             *old_ident_list, *new_ident_list,
                             *old_list, *new_list = NULL;
@@ -1474,20 +1499,68 @@
                     break;
             if (!m)     /* We didn't find this address. */
                 new_list = internet_address_list_append(new_list, ia);
+#else /* HAVE_GMIME_2_4 */
+        InternetAddressList *bcc_list, *ident_list;
+	int i, j;
+
+        bcc_list =
+            libbalsa_address_view_get_list(bsmsg->recipient_view, "Bcc:");
+
+        ident_list = internet_address_list_parse_string(bsmsg->ident->bcc);
+        if (ident_list) {
+            /* Remove any Bcc addresses that came from the old identity
+             * from the list. */
+            gint ident_list_len = internet_address_list_length(ident_list);
+
+            for (i = 0; i < internet_address_list_length(bcc_list); i++) {
+                InternetAddress *ia =
+                    internet_address_list_get_address (bcc_list, i);
+
+                for (j = 0; j < ident_list_len; j++) {
+                    InternetAddress *ia2 =
+                        internet_address_list_get_address(ident_list, j);
+                    if (libbalsa_ia_rfc2821_equal(ia, ia2))
+                        break;
+                }
+
+                if (j < ident_list_len) {
+                    /* This address was found in the identity. */
+                    internet_address_list_remove_at(bcc_list, i);
+                    --i;
+                }
+            }
+            g_object_unref(ident_list);
+#endif /* HAVE_GMIME_2_4 */
         }
+#ifndef HAVE_GMIME_2_4
         internet_address_list_destroy(old_list);
         internet_address_list_destroy(old_ident_list);
+#endif /* ! HAVE_GMIME_2_4 */
 
         /* Add the new Bcc addresses, if any: */
+#ifndef HAVE_GMIME_2_4
         new_ident_list = internet_address_parse_string(ident->bcc);
         new_list = internet_address_list_concat(new_list, new_ident_list);
         internet_address_list_destroy(new_ident_list);
+#else /* HAVE_GMIME_2_4 */
+        ident_list = internet_address_list_parse_string(ident->bcc);
+        if (ident_list) {
+            internet_address_list_append(bcc_list, ident_list);
+            g_object_unref(ident_list);
+        }
+#endif /* HAVE_GMIME_2_4 */
 
         /* Set the resulting list: */
+#ifndef HAVE_GMIME_2_4
         libbalsa_address_view_set_from_list(bsmsg->recipient_view,
                                             "Bcc:",
                                             new_list);
         internet_address_list_destroy(new_list);
+#else /* HAVE_GMIME_2_4 */
+        libbalsa_address_view_set_from_list(bsmsg->recipient_view, "Bcc:",
+                                            bcc_list);
+        g_object_unref(bcc_list);
+#endif /* HAVE_GMIME_2_4 */
     }
     
     /* change the subject to use the reply/forward strings */
@@ -1980,12 +2053,16 @@
 	if (!subject)
 	    headers->subject = g_strdup(_("(no subject)"));
 	else
+#ifndef HAVE_GMIME_2_4
 #if HAVE_GMIME_2_2_5
 	    headers->subject = g_mime_utils_header_decode_text(subject);
 #else  /* HAVE_GMIME_2_2_5 */
 	    headers->subject =
 		g_mime_utils_header_decode_text((guchar *) subject);
 #endif /* HAVE_GMIME_2_2_5 */
+#else /* ! HAVE_GMIME_2_4 */
+	    headers->subject = g_mime_utils_header_decode_text(subject);
+#endif /* ! HAVE_GMIME_2_4 */
     }
     libbalsa_utf8_sanitize(&headers->subject,
 			   balsa_app.convert_unknown_8bit,
@@ -3372,7 +3449,11 @@
 
     gtk_tree_store_append(store, &iter, parent);
     if (body->mime_part)
+#ifndef HAVE_GMIME_2_4
 	disp_type = g_mime_part_get_content_disposition(GMIME_PART(body->mime_part));
+#else /* HAVE_GMIME_2_4 */
+	disp_type = g_mime_object_get_disposition(body->mime_part);
+#endif /* HAVE_GMIME_2_4 */
     else
 	disp_type = NULL;
     preselect = !disp_type || *disp_type == '\0' ||
@@ -3794,7 +3875,11 @@
 	    g_free(from);
 	}
 
+#ifndef HAVE_GMIME_2_4
 	if (headers->to_list) {
+#else /* HAVE_GMIME_2_4 */
+	if (internet_address_list_length(headers->to_list) > 0) {
+#endif /* HAVE_GMIME_2_4 */
 	    gchar *to_list =
 		internet_address_list_to_string(headers->to_list,
 			                        FALSE);
@@ -3802,7 +3887,11 @@
 	    g_free(to_list);
 	}
 
+#ifndef HAVE_GMIME_2_4
 	if (headers->cc_list) {
+#else /* HAVE_GMIME_2_4 */
+	if (internet_address_list_length(headers->cc_list) > 0) {
+#endif /* HAVE_GMIME_2_4 */
 	    gchar *cc_list = 
 		internet_address_list_to_string(headers->cc_list,
 			                        FALSE);
@@ -4221,18 +4310,63 @@
  * particular identity, other than the default.  The to_list of the
  * original message needs to be set in order for it to work.
  **/
+#ifdef HAVE_GMIME_2_4
+/* First a helper; groups cannot be nested, and are not allowed in the
+ * From: list. */
+#endif /* HAVE_GMIME_2_4 */
 static gboolean
+#ifndef HAVE_GMIME_2_4
 guess_identity(BalsaSendmsg* bsmsg, LibBalsaMessage * message)
+#else /* HAVE_GMIME_2_4 */
+guess_identity_from_list(BalsaSendmsg * bsmsg, InternetAddressList * list,
+                         gboolean allow_group)
+#endif /* HAVE_GMIME_2_4 */
 {
+#ifndef HAVE_GMIME_2_4
     const gchar *address_string;
     GList *ilist;
     LibBalsaIdentity *ident;
     const gchar *tmp;
+#else /* HAVE_GMIME_2_4 */
+    gint i;
+#endif /* HAVE_GMIME_2_4 */
 
+#ifdef HAVE_GMIME_2_4
+    for (i = 0; i < internet_address_list_length(list); i++) {
+        InternetAddress *ia = internet_address_list_get_address(list, i);
 
+        if (INTERNET_ADDRESS_IS_GROUP(ia)) {
+            InternetAddressList *members =
+                INTERNET_ADDRESS_GROUP(ia)->members;
+            if (allow_group
+                && guess_identity_from_list(bsmsg, members, FALSE))
+                return TRUE;
+        } else {
+            GList *l;
+#endif /* HAVE_GMIME_2_4 */
+
+#ifdef HAVE_GMIME_2_4
+            for (l = balsa_app.identities; l; l = l->next) {
+                LibBalsaIdentity *ident = LIBBALSA_IDENTITY(l->data);
+                if (libbalsa_ia_rfc2821_equal(ia, ident->ia)) {
+                    bsmsg->ident = ident;
+                    return TRUE;
+                }
+            }
+        }
+    }
+
+    return FALSE;
+}
+
+static gboolean
+guess_identity(BalsaSendmsg* bsmsg, LibBalsaMessage * message)
+{
+#endif /* HAVE_GMIME_2_4 */
     if (!message  || !message->headers || !balsa_app.identities)
         return FALSE; /* use default */
 
+#ifndef HAVE_GMIME_2_4
     if (bsmsg->type == SEND_CONTINUE) {
  	if (message->headers->from) {
  	    /*
@@ -4292,6 +4426,21 @@
  	    }
  	}
     }
+#else /* HAVE_GMIME_2_4 */
+    if (bsmsg->type == SEND_CONTINUE)
+        return guess_identity_from_list(bsmsg, message->headers->from,
+                                        FALSE);
+
+    if (bsmsg->type != SEND_NORMAL)
+	/* bsmsg->type == SEND_REPLY || bsmsg->type == SEND_REPLY_ALL ||
+	*  bsmsg->type == SEND_REPLY_GROUP || bsmsg->type == SEND_FORWARD_ATTACH ||
+	*  bsmsg->type == SEND_FORWARD_INLINE */
+        return guess_identity_from_list(bsmsg, message->headers->to_list,
+                                        TRUE)
+            || guess_identity_from_list(bsmsg, message->headers->cc_list,
+                                        TRUE);
+
+#endif /* HAVE_GMIME_2_4 */
     return FALSE;
 }
 
@@ -4483,6 +4632,7 @@
 static void
 sw_cc_add_list(InternetAddressList **new_cc, InternetAddressList * list)
 {
+#ifndef HAVE_GMIME_2_4
     for (; list; list = list->next) {
         InternetAddress *ia;
 
@@ -4496,6 +4646,23 @@
                     break;
             if (!ident)
                 *new_cc = internet_address_list_append(*new_cc, ia);
+#else /* HAVE_GMIME_2_4 */
+    int i;
+    
+    for (i = 0; i < internet_address_list_length(list); i++) {
+        InternetAddress *ia = internet_address_list_get_address (list, i);
+	GList *ident;
+	
+	/* do not insert any of my identities into the cc: list */
+	for (ident = balsa_app.identities; ident; ident = ident->next)
+	    if (libbalsa_ia_rfc2821_equal
+		(ia, LIBBALSA_IDENTITY(ident->data)->ia))
+		break;
+	if (!ident) {
+            if (*new_cc == NULL)
+                *new_cc = internet_address_list_new();
+	    internet_address_list_add(*new_cc, ia);
+#endif /* HAVE_GMIME_2_4 */
         }
     }
 }
@@ -4755,7 +4922,12 @@
     libbalsa_address_view_set_from_list(bsmsg->recipient_view,
                                         "Cc:",
                                         new_cc);
+#ifndef HAVE_GMIME_2_4
     internet_address_list_destroy(new_cc);
+#else /* HAVE_GMIME_2_4 */
+    if (new_cc)
+        g_object_unref(new_cc);
+#endif /* HAVE_GMIME_2_4 */
 }
 
 static void
@@ -5493,7 +5665,12 @@
 
     message = libbalsa_message_new();
 
+#ifndef HAVE_GMIME_2_4
     message->headers->from = internet_address_list_prepend(NULL, ident->ia);
+#else /* HAVE_GMIME_2_4 */
+    message->headers->from = internet_address_list_new ();
+    internet_address_list_add(message->headers->from, ident->ia);
+#endif /* HAVE_GMIME_2_4 */
 
     tmp = gtk_editable_get_chars(GTK_EDITABLE(bsmsg->subject[1]), 0, -1);
     strip_chars(tmp, "\r\n");
@@ -5713,9 +5890,14 @@
 {
     InternetAddressList * ia_list;
     gboolean can_encrypt;
+#ifndef HAVE_GMIME_2_4
     InternetAddressList * from_list;
     InternetAddressList * cc_list;
+#endif /* ! HAVE_GMIME_2_4 */
     gpgme_protocol_t protocol;
+#ifdef HAVE_GMIME_2_4
+    gint len;
+#endif /* HAVE_GMIME_2_4 */
 
     /* check if the user wants to see the message */
     if (!bsmsg->ident->warn_send_plain)
@@ -5726,24 +5908,52 @@
 	return TRUE;
 
     /* we can not encrypt if we have bcc recipients */
+#ifndef HAVE_GMIME_2_4
     if ((ia_list = libbalsa_address_view_get_list(bsmsg->recipient_view, "Bcc:"))) {
 	internet_address_list_destroy(ia_list);
 	return TRUE;
     }
+#else /* HAVE_GMIME_2_4 */
+    ia_list = libbalsa_address_view_get_list(bsmsg->recipient_view, "Bcc:");
+    len = internet_address_list_length(ia_list);
+    g_object_unref(ia_list);
+    if (len > 0)
+        return TRUE;
+#endif /* HAVE_GMIME_2_4 */
 
     /* collect all to and cc recipients */
+#ifndef HAVE_GMIME_2_4
     ia_list = libbalsa_address_view_get_list(bsmsg->recipient_view, "To:");
     cc_list = libbalsa_address_view_get_list(bsmsg->recipient_view, "Cc:");
     from_list = internet_address_list_prepend(NULL, bsmsg->ident->ia);
+#endif /* ! HAVE_GMIME_2_4 */
     protocol = bsmsg->gpg_mode & LIBBALSA_PROTECT_SMIMEV3 ?
 	GPGME_PROTOCOL_CMS : GPGME_PROTOCOL_OpenPGP;
+#ifndef HAVE_GMIME_2_4
     can_encrypt = libbalsa_can_encrypt_for_all(from_list, protocol) &
 	libbalsa_can_encrypt_for_all(ia_list, protocol) &
 	libbalsa_can_encrypt_for_all(cc_list, protocol);
     internet_address_list_destroy(from_list);
     internet_address_list_destroy(ia_list);
     internet_address_list_destroy(cc_list);
+#else /* HAVE_GMIME_2_4 */
 
+    ia_list = libbalsa_address_view_get_list(bsmsg->recipient_view, "To:");
+    can_encrypt = libbalsa_can_encrypt_for_all(ia_list, protocol);
+    g_object_unref(ia_list);
+    if (can_encrypt) {
+        ia_list = libbalsa_address_view_get_list(bsmsg->recipient_view, "Cc:");
+        can_encrypt = libbalsa_can_encrypt_for_all(ia_list, protocol);
+        g_object_unref(ia_list);
+    }
+    if (can_encrypt) {
+        ia_list = internet_address_list_new();
+        internet_address_list_add(ia_list, bsmsg->ident->ia);
+        can_encrypt = libbalsa_can_encrypt_for_all(ia_list, protocol);
+        g_object_unref(ia_list);
+    }
+#endif /* HAVE_GMIME_2_4 */
+
     /* ask the user if we could encrypt this message */
     if (can_encrypt) {
 	GtkWidget *dialog;
@@ -6757,7 +6967,11 @@
     if (mailing_list_address) {
         libbalsa_address_view_set_from_list(bsmsg->recipient_view, "To:",
                                             mailing_list_address);
+#ifndef HAVE_GMIME_2_4
         internet_address_list_destroy(mailing_list_address);
+#else /* HAVE_GMIME_2_4 */
+        g_object_unref(mailing_list_address);
+#endif /* HAVE_GMIME_2_4 */
         return;
     }
 
@@ -6891,6 +7105,9 @@
 
     list = libbalsa_address_view_get_list(bsmsg->recipient_view, "To:");
     to_string = internet_address_list_to_string(list, FALSE);
+#ifdef HAVE_GMIME_2_4
+    g_object_unref(list);
+#endif /* HAVE_GMIME_2_4 */
     title = g_strdup_printf(title_format, to_string,
                             gtk_entry_get_text(GTK_ENTRY(bsmsg->subject[1])));
     g_free(to_string);
Index: balsa/src/save-restore.c
===================================================================
--- balsa/src/save-restore.c	(revision 8017)
+++ balsa/src/save-restore.c	(working copy)
@@ -1766,7 +1766,11 @@
             libbalsa_conf_get_string_with_default("MailingListAddress",
                                                   &def);
         view->mailing_list_address =
+#ifndef HAVE_GMIME_2_4
             def ? NULL : internet_address_parse_string(address);
+#else /* HAVE_GMIME_2_4 */
+            def ? NULL : internet_address_list_parse_string(address);
+#endif /* HAVE_GMIME_2_4 */
         g_free(address);
 
         view->identity_name = libbalsa_conf_get_string("Identity");
Index: balsa/src/balsa-message.c
===================================================================
--- balsa/src/balsa-message.c	(revision 8017)
+++ balsa/src/balsa-message.c	(working copy)
@@ -1022,14 +1022,26 @@
 balsa_message_sender_to_gchar(InternetAddressList * list, gint which)
 {
     if (!list)
+#ifndef HAVE_GMIME_2_4
 	return g_strdup(_("(No sender)"));
     if (which < 0)
 	return internet_address_list_to_string(list, FALSE);
     while (which > 0 && list->next) {
 	list = list->next;
 	--which;
+#else /* HAVE_GMIME_2_4 */
+        return g_strdup(_("(No sender)"));
+    else if (which < 0)
+        return internet_address_list_to_string(list, FALSE);
+    else {
+        InternetAddress *ia =
+            internet_address_list_get_address(list, which);
+        return internet_address_to_string(ia, FALSE);
+#endif /* HAVE_GMIME_2_4 */
     }
+#ifndef HAVE_GMIME_2_4
     return internet_address_to_string(list->address, FALSE);
+#endif /* ! HAVE_GMIME_2_4 */
 }
 
 static void
@@ -2041,7 +2053,11 @@
 		 (g_mime_content_type_is_type(type, "application", "pkcs7-signature") ||
 		  g_mime_content_type_is_type(type, "application", "x-pkcs7-signature"))))
                 add_body(bm, body);
+#ifndef HAVE_GMIME_2_4
 	    g_mime_content_type_destroy(type);
+#else /* HAVE_GMIME_2_4 */
+	    g_object_unref(type);
+#endif /* HAVE_GMIME_2_4 */
 #else
             if (libbalsa_message_body_is_inline(body) ||
 		bm->force_inline ||
@@ -2078,7 +2094,11 @@
     } else { /* default to multipart/mixed */
 	body = add_multipart_mixed(bm, body->parts);
     }
+#ifndef HAVE_GMIME_2_4
     g_mime_content_type_destroy(type);
+#else /* HAVE_GMIME_2_4 */
+    g_object_unref(type);
+#endif /* HAVE_GMIME_2_4 */
 
     return body;
 }
@@ -2269,21 +2289,39 @@
 }
 
 static const InternetAddress *
+#ifndef HAVE_GMIME_2_4
 bm_get_mailbox(const InternetAddressList * list)
+#else /* HAVE_GMIME_2_4 */
+bm_get_mailbox(InternetAddressList * list)
+#endif /* HAVE_GMIME_2_4 */
 {
     InternetAddress *ia;
 
     if (!list)
+#ifndef HAVE_GMIME_2_4
 	return NULL;
+#else /* HAVE_GMIME_2_4 */
+        return NULL;
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
     ia = list->address;
     if (!ia || ia->type == INTERNET_ADDRESS_NONE)
 	return NULL;
+#else /* HAVE_GMIME_2_4 */
+    ia = internet_address_list_get_address(list, 0);
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
     while (ia->type == INTERNET_ADDRESS_GROUP && ia->value.members)
 	ia = ia->value.members->address;
     if (!ia || ia->type == INTERNET_ADDRESS_NONE)
 	return NULL;
+#else /* HAVE_GMIME_2_4 */
+    while (ia && INTERNET_ADDRESS_IS_GROUP(ia))
+        ia = internet_address_list_get_address(INTERNET_ADDRESS_GROUP(ia)->
+                                               members, 0);
+#endif /* HAVE_GMIME_2_4 */
 
     return ia;
 }
@@ -2292,10 +2330,19 @@
 handle_mdn_request(GtkWindow *parent, LibBalsaMessage *message)
 {
     gboolean suspicious, found;
+#ifndef HAVE_GMIME_2_4
     const InternetAddressList *use_from;
     const InternetAddressList *list;
+#else /* HAVE_GMIME_2_4 */
+    InternetAddressList *use_from;
+    InternetAddressList *list;
+    InternetAddress *from, *dn;
+#endif /* HAVE_GMIME_2_4 */
     BalsaMDNReply action;
     LibBalsaMessage *mdn;
+#ifdef HAVE_GMIME_2_4
+    gint i, len;
+#endif /* HAVE_GMIME_2_4 */
 
     /* Check if the dispnotify_to address is equal to the (in this order,
        if present) reply_to, from or sender address. */
@@ -2307,28 +2354,58 @@
         use_from = message->sender;
     else
         use_from = NULL;
+#ifdef HAVE_GMIME_2_4
+
+#endif /* HAVE_GMIME_2_4 */
     /* note: neither Disposition-Notification-To: nor Reply-To:, From: or
        Sender: may be address groups */
+#ifndef HAVE_GMIME_2_4
     suspicious =
 	!libbalsa_ia_rfc2821_equal(message->headers->dispnotify_to->address,
 				   use_from->address);
+#else /* HAVE_GMIME_2_4 */
+    from =
+        use_from ? internet_address_list_get_address(use_from, 0) : NULL;
+    dn = internet_address_list_get_address(message->headers->dispnotify_to,
+                                           0);
+    suspicious = !libbalsa_ia_rfc2821_equal(dn, from);
+#endif /* HAVE_GMIME_2_4 */
     
     if (!suspicious) {
         /* Try to find "my" address first in the to, then in the cc list */
+#ifndef HAVE_GMIME_2_4
         list = message->headers->to_list;
+#endif /* ! HAVE_GMIME_2_4 */
         found = FALSE;
+#ifndef HAVE_GMIME_2_4
         while (list && !found) {
+#else /* HAVE_GMIME_2_4 */
+
+        list = message->headers->to_list;
+        len = list ? internet_address_list_length(list) : 0;
+        for (i = 0; i < len && !found; i++)
+#endif /* HAVE_GMIME_2_4 */
             found = libbalsa_ia_rfc2821_equal(balsa_app.current_ident->ia,
 					      bm_get_mailbox(list));
+#ifndef HAVE_GMIME_2_4
             list = list->next;
         }
+#endif /* ! HAVE_GMIME_2_4 */
         if (!found) {
             list = message->headers->cc_list;
+#ifndef HAVE_GMIME_2_4
             while (list && !found) {
                 found = libbalsa_ia_rfc2821_equal(balsa_app.current_ident->ia,
 						  bm_get_mailbox(list));
                 list = list->next;
             }
+#else /* HAVE_GMIME_2_4 */
+            len = list ? internet_address_list_length(list) : 0;
+            for (i = 0; i < len && !found; i++)
+                found =
+                    libbalsa_ia_rfc2821_equal(balsa_app.current_ident->ia,
+                                              bm_get_mailbox(list));
+#endif /* HAVE_GMIME_2_4 */
         }
         suspicious = !found;
     }
@@ -2350,7 +2427,11 @@
     if (action == BALSA_MDN_REPLY_ASKME) {
         gchar *sender;
         gchar *reply_to;
+#ifndef HAVE_GMIME_2_4
         sender = internet_address_to_string (use_from->address, FALSE);
+#else /* HAVE_GMIME_2_4 */
+        sender = from ? internet_address_to_string (from, FALSE) : NULL;
+#endif /* HAVE_GMIME_2_4 */
         reply_to = 
             internet_address_list_to_string (message->headers->dispnotify_to,
 		                             FALSE);
@@ -2393,14 +2474,26 @@
 
     /* create a message with the header set from the incoming message */
     message = libbalsa_message_new();
+#ifndef HAVE_GMIME_2_4
     dummy = internet_address_to_string(balsa_app.current_ident->ia, FALSE);
     message->headers->from = internet_address_parse_string(dummy);
     g_free (dummy);
+#else /* HAVE_GMIME_2_4 */
+    message->headers->from = internet_address_list_new();
+    internet_address_list_add(message->headers->from,
+                              balsa_app.current_ident->ia);
+#endif /* HAVE_GMIME_2_4 */
     message->headers->date = time(NULL);
     libbalsa_message_set_subject(message, "Message Disposition Notification");
+#ifndef HAVE_GMIME_2_4
     message->headers->to_list =
 	internet_address_list_prepend(NULL, for_msg->headers->
 		                      dispnotify_to->address);
+#else /* HAVE_GMIME_2_4 */
+    message->headers->to_list = internet_address_list_new();
+    internet_address_list_append(message->headers->to_list,
+                                 for_msg->headers->dispnotify_to);
+#endif /* HAVE_GMIME_2_4 */
 
     /* RFC 2298 requests this mime type... */
     message->subtype = g_strdup("report");
@@ -2440,7 +2533,13 @@
 	g_string_append_printf(report, "Original-Recipient: %s\n",
 			       original_rcpt);	
     g_string_append_printf(report, "Final-Recipient: rfc822; %s\n",
+#ifndef HAVE_GMIME_2_4
 			   balsa_app.current_ident->ia->value.addr);
+#else /* HAVE_GMIME_2_4 */
+                           INTERNET_ADDRESS_MAILBOX(balsa_app.
+                                                    current_ident->ia)->
+                           addr);
+#endif /* HAVE_GMIME_2_4 */
     if (for_msg->message_id)
         g_string_append_printf(report, "Original-Message-ID: <%s>\n",
                                for_msg->message_id);
Index: balsa/libinit_balsa/assistant_page_user.c
===================================================================
--- balsa/libinit_balsa/assistant_page_user.c	(revision 8017)
+++ balsa/libinit_balsa/assistant_page_user.c	(working copy)
@@ -246,6 +246,9 @@
     const gchar *host, *mailbox;
     gchar *uhoh;
     LibBalsaIdentity *ident;
+#ifdef HAVE_GMIME_2_4
+    InternetAddress *ia;
+#endif /* HAVE_GMIME_2_4 */
 #if ENABLE_ESMTP
     LibBalsaSmtpServer *smtp_server;
 #endif /* ENABLE_ESMTP */
@@ -292,9 +295,16 @@
     } else {
         ident = balsa_app.current_ident;
     }
+#ifndef HAVE_GMIME_2_4
     internet_address_set_name(ident->ia, mailbox);
     internet_address_set_addr(ident->ia,
                               gtk_entry_get_text(GTK_ENTRY(user->email)));
+#else /* HAVE_GMIME_2_4 */
+    ia = internet_address_mailbox_new(mailbox,
+                                      gtk_entry_get_text(GTK_ENTRY
+                                                         (user->email)));
+    libbalsa_identity_set_address(ident, ia);
+#endif /* HAVE_GMIME_2_4 */
 
     /* outgoing mail */
 #if ENABLE_ESMTP
Index: configure.in
===================================================================
--- balsa/configure.in	(revision 8017)
+++ balsa/configure.in	(working copy)
@@ -51,6 +51,13 @@
 	with_gnome=yes
 ])
 
+AC_ARG_WITH([gmime],
+            AC_HELP_STRING([--with-gmime=VERSION],
+                           [version of GMime to link against]),
+            [ with_gmime=$withval ],
+            [ with_gmime=2.4 ]
+)
+
 dnl ###########################################################################
 dnl Configure locking
 dnl ###########################################################################
@@ -350,7 +357,6 @@
 PKG_CHECK_MODULES(BALSA, [
 glib-2.0
 gtk+-2.0 >= 2.4
-gmime-2.0 >= 2.1.9
 $gnome_extras
 $gnome_print_extras
 ])
@@ -359,7 +365,6 @@
    libgnome-2.0 libgnomeui-2.0 
    glib-2.0
    gtk+-2.0 >= 2.4
-   gmime-2.0 >= 2.1.9
 ])
 
 dnl ##########################################################################
@@ -780,6 +785,45 @@
 fi
 AM_CONDITIONAL([BUILD_WITH_GTKSOURCEVIEW2], [test x$with_gtksourceview = x2 ])
 
+# GMime configuration
+#
+if test $with_gmime == 2.4 ; then
+    if $PKG_CONFIG --exists gmime-2.4 ; then
+        if $PKG_CONFIG --atleast-version=2.3.8 gmime-2.4 ; then
+            PKG_CHECK_MODULES(GMIME, [ gmime-2.4 ])
+            AC_DEFINE(HAVE_GMIME_2_4, 1,
+                      [Defined when GMime-2.4 is available.])
+	    AC_MSG_NOTICE([Note: using GMime Version 2.4])
+        else
+            AC_MSG_ERROR([*** Your GMime-2.4 installation is too old])
+        fi
+    else
+        AC_MSG_ERROR([*** You requested GMime-2.4 but it was not found.])
+    fi
+else
+    if test $with_gmime == 2.0 ; then
+        if $PKG_CONFIG --atleast-version=2.1.9 gmime-2.0 ; then
+            PKG_CHECK_MODULES(GMIME, [ gmime-2.0 ])
+            if $PKG_CONFIG --atleast-version=2.2.5 gmime-2.0 ; then
+                AC_DEFINE(HAVE_GMIME_2_2_5,1,
+                          [Defined when GMime is at least version 2.2.5.])
+            fi
+            if $PKG_CONFIG --atleast-version=2.2.7 gmime-2.0 ; then
+                AC_DEFINE(HAVE_GMIME_2_2_7,1,
+                          [Defined when GMime is at least version 2.2.7.])
+            fi
+	    AC_MSG_NOTICE([Note: using GMime Version 2.0])
+        else
+            AC_MSG_ERROR([*** Your GMime installation is too old])
+        fi
+    else
+        AC_MSG_ERROR([*** Unrecognized GMime version])
+    fi
+fi
+BALSA_CFLAGS="$BALSA_CFLAGS $GMIME_CFLAGS"
+BALSA_LIBS="$BALSA_LIBS $GMIME_LIBS"
+BALSA_AB_LIBS="$BALSA_AB_LIBS $GMIME_LIBS"
+
 dnl #####################################################################
 dnl 5. Headers.
 dnl #####################################################################
@@ -935,16 +979,6 @@
 dnl things that it fixes, for eg. user installs, package builds etc.
 dnl AC_PATH_PROG(GTK_UPDATE_ICON_CACHE, gtk-update-icon-cache)
 
-dnl check GMime version
-if $PKG_CONFIG --atleast-version=2.2.5 gmime-2.0 ; then
-   AC_DEFINE(HAVE_GMIME_2_2_5,1,[Defined when GMime is at least version
-                                 2.2.5.])
-fi
-if $PKG_CONFIG --atleast-version=2.2.7 gmime-2.0 ; then
-   AC_DEFINE(HAVE_GMIME_2_2_7,1,[Defined when GMime is at least version
-                                 2.2.7.])
-fi
-
 dnl #####################################################################
 dnl 8. Output
 dnl #####################################################################
@@ -975,6 +1009,7 @@
 echo "    Installing into prefix: $prefix"
 echo "      Using multithreading: $use_threads"
 echo "   Enable compile warnings: $set_more_warnings"
+echo "                 Use GMime: $with_gmime"
 echo "                Use ESMTP : $with_esmtp"
 echo " Use WebKit (experimental): $use_webkit"
 echo "               Use GtkHTML: $use_gtkhtml"
Index: libbalsa/abook-completion.c
===================================================================
--- balsa/libbalsa/abook-completion.c	(revision 8017)
+++ balsa/libbalsa/abook-completion.c	(working copy)
@@ -46,7 +46,11 @@
 
     ret = g_new0(CompletionData, 1);
 
+#ifndef HAVE_GMIME_2_4
     internet_address_ref(ia);
+#else /* HAVE_GMIME_2_4 */
+    g_object_ref(ia);
+#endif /* HAVE_GMIME_2_4 */
     ret->ia = ia;
 
     string = g_string_new(nick_name);
@@ -78,7 +82,11 @@
 void
 completion_data_free(CompletionData * data)
 {
+#ifndef HAVE_GMIME_2_4
     internet_address_unref(data->ia);
+#else /* HAVE_GMIME_2_4 */
+    g_object_unref(data->ia);
+#endif /* HAVE_GMIME_2_4 */
     g_free(data->string);
     g_free(data);
 }
Index: balsa/libbalsa/address-book-rubrica.c
===================================================================
--- balsa/libbalsa/address-book-rubrica.c	(revision 8017)
+++ balsa/libbalsa/address-book-rubrica.c	(working copy)
@@ -236,8 +236,12 @@
 	 g_completion_complete(ab_text->name_complete, (gchar *) prefix,
 			       new_prefix); list; list = list->next) {
 	InternetAddress *ia = ((CompletionData *) list->data)->ia;
+#ifndef HAVE_GMIME_2_4
 	internet_address_ref(ia);
 	res = g_list_prepend(res, ia);
+#else /* HAVE_GMIME_2_4 */
+	res = g_list_prepend(res, g_object_ref(ia));
+#endif /* HAVE_GMIME_2_4 */
     }
 
     return g_list_reverse(res);
@@ -469,28 +473,51 @@
 	    && LIBBALSA_ADDRESS_BOOK(ab_rubrica)->dist_list_mode) {
 	    /* Create a group address. */
 	    InternetAddress *ia =
+#ifndef HAVE_GMIME_2_4
 		internet_address_new_group(address->full_name);
+#else /* HAVE_GMIME_2_4 */
+		internet_address_group_new(address->full_name);
+            InternetAddressGroup *group = (InternetAddressGroup *) ia;
+#endif /* HAVE_GMIME_2_4 */
 
 	    for (l = address->address_list; l; l = l->next) {
 		InternetAddress *member =
+#ifndef HAVE_GMIME_2_4
 		    internet_address_new_name(NULL, l->data);
 		internet_address_add_member(ia, member);
 		internet_address_unref(member);
+#else /* HAVE_GMIME_2_4 */
+		    internet_address_mailbox_new(NULL, l->data);
+		internet_address_group_add_member(group, member);
+		g_object_unref(member);
+#endif /* HAVE_GMIME_2_4 */
 	    }
 	    cmp_data = completion_data_new(ia, address->nick_name);
 	    completion_list = g_list_prepend(completion_list, cmp_data);
+#ifndef HAVE_GMIME_2_4
 	    internet_address_unref(ia);
+#else /* HAVE_GMIME_2_4 */
+	    g_object_unref(ia);
+#endif /* HAVE_GMIME_2_4 */
 	} else {
 	    /* Create name addresses. */
 	    GList *l;
 
 	    for (l = address->address_list; l; l = l->next) {
 		InternetAddress *ia =
+#ifndef HAVE_GMIME_2_4
 		    internet_address_new_name(address->full_name, l->data);
+#else /* HAVE_GMIME_2_4 */
+		    internet_address_mailbox_new(address->full_name, l->data);
+#endif /* HAVE_GMIME_2_4 */
 		cmp_data = completion_data_new(ia, address->nick_name);
 		completion_list =
 		    g_list_prepend(completion_list, cmp_data);
+#ifndef HAVE_GMIME_2_4
 		internet_address_unref(ia);
+#else /* HAVE_GMIME_2_4 */
+		g_object_unref(ia);
+#endif /* HAVE_GMIME_2_4 */
 	    }
 	}
     }
Index: balsa/libbalsa/gmime-gpgme-context.c
===================================================================
--- balsa/libbalsa/gmime-gpgme-context.c	(revision 8017)
+++ balsa/libbalsa/gmime-gpgme-context.c	(working copy)
@@ -62,9 +62,17 @@
 				GMimeStream * istream,
 				GMimeStream * ostream, GError ** err);
 
+#ifndef HAVE_GMIME_2_4
 static int g_mime_gpgme_decrypt(GMimeCipherContext * ctx,
 				GMimeStream * istream,
 				GMimeStream * ostream, GError ** err);
+#else /* HAVE_GMIME_2_4 */
+static GMimeSignatureValidity *g_mime_gpgme_decrypt(GMimeCipherContext *
+                                                    ctx,
+                                                    GMimeStream * istream,
+                                                    GMimeStream * ostream,
+                                                    GError ** err);
+#endif /* HAVE_GMIME_2_4 */
 
 
 /* internal passphrase callback */
@@ -634,7 +642,11 @@
  * Decrypt istream to ostream. In RFC 2440 mode, also try to check an included
  * signature (if any).
  */
+#ifndef HAVE_GMIME_2_4
 static int
+#else /* HAVE_GMIME_2_4 */
+static GMimeSignatureValidity *
+#endif /* HAVE_GMIME_2_4 */
 g_mime_gpgme_decrypt(GMimeCipherContext * context, GMimeStream * istream,
 		     GMimeStream * ostream, GError ** error)
 {
@@ -649,10 +661,18 @@
 	NULL,			/* seek method */
 	cb_data_release		/* release method */
     };
+#ifdef HAVE_GMIME_2_4
+    GMimeSignatureValidity *validity;
+#endif /* HAVE_GMIME_2_4 */
 
     /* some paranoia checks */
+#ifndef HAVE_GMIME_2_4
     g_return_val_if_fail(ctx, -1);
     g_return_val_if_fail(ctx->gpgme_ctx, -1);
+#else /* HAVE_GMIME_2_4 */
+    g_return_val_if_fail(ctx, NULL);
+    g_return_val_if_fail(ctx->gpgme_ctx, NULL);
+#endif /* HAVE_GMIME_2_4 */
     gpgme_ctx = ctx->gpgme_ctx;
     protocol = gpgme_get_protocol(gpgme_ctx);
 
@@ -672,13 +692,21 @@
 	 gpgme_data_new_from_cbs(&crypt, &cbs,
 				 istream)) != GPG_ERR_NO_ERROR) {
 	g_set_error_from_gpgme(error, err, _("could not get data from stream"));
+#ifndef HAVE_GMIME_2_4
 	return -1;
+#else /* HAVE_GMIME_2_4 */
+	return NULL;
+#endif /* HAVE_GMIME_2_4 */
     }
     if ((err = gpgme_data_new_from_cbs(&plain, &cbs, ostream)) !=
 	GPG_ERR_NO_ERROR) {
 	g_set_error_from_gpgme(error, err, _("could not create new data object"));
 	gpgme_data_release(crypt);
+#ifndef HAVE_GMIME_2_4
 	return -1;
+#else /* HAVE_GMIME_2_4 */
+	return NULL;
+#endif /* HAVE_GMIME_2_4 */
     }
 
     /* try to decrypt */
@@ -688,7 +716,11 @@
 	g_set_error_from_gpgme(error, err, _("decryption failed"));
 	gpgme_data_release(plain);
 	gpgme_data_release(crypt);
+#ifndef HAVE_GMIME_2_4
 	return -1;
+#else /* HAVE_GMIME_2_4 */
+	return NULL;
+#endif /* HAVE_GMIME_2_4 */
     }
     gpgme_data_release(plain);
     gpgme_data_release(crypt);
@@ -696,7 +728,27 @@
     /* try to get information about the signature (if any) */
     ctx->sig_state = g_mime_gpgme_sigstat_new_from_gpgme_ctx(gpgme_ctx);
 
+#ifndef HAVE_GMIME_2_4
     return 0;
+#else /* HAVE_GMIME_2_4 */
+    validity = g_mime_signature_validity_new();
+    if (ctx->sig_state) {
+	switch (ctx->sig_state->status)
+	    {
+	    case GPG_ERR_NO_ERROR:
+		g_mime_signature_validity_set_status(validity, GMIME_SIGNATURE_STATUS_GOOD);
+		break;
+	    case GPG_ERR_NOT_SIGNED:
+		g_mime_signature_validity_set_status(validity, GMIME_SIGNATURE_STATUS_UNKNOWN);
+		break;
+	    default:
+		g_mime_signature_validity_set_status(validity, GMIME_SIGNATURE_STATUS_BAD);
+	    }
+    } else
+	g_mime_signature_validity_set_status(validity, GMIME_SIGNATURE_STATUS_UNKNOWN);
+
+    return validity;
+#endif /* HAVE_GMIME_2_4 */
 }
 
 
Index: balsa/libbalsa/mailbox_mh.c
===================================================================
--- balsa/libbalsa/mailbox_mh.c	(revision 8017)
+++ balsa/libbalsa/mailbox_mh.c	(working copy)
@@ -1094,9 +1094,15 @@
     }
     out_stream = g_mime_stream_fs_new(fd);
 
+#ifndef HAVE_GMIME_2_4
     crlffilter = g_mime_filter_crlf_new(GMIME_FILTER_CRLF_DECODE,
                                         GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
     in_stream = g_mime_stream_filter_new_with_stream(stream);
+#else /* HAVE_GMIME_2_4 */
+    crlffilter = g_mime_filter_crlf_new(FALSE,
+                                        FALSE);
+    in_stream = g_mime_stream_filter_new(stream);
+#endif /* HAVE_GMIME_2_4 */
     g_mime_stream_filter_add(GMIME_STREAM_FILTER(in_stream), crlffilter);
     g_object_unref(crlffilter);
 
Index: balsa/libbalsa/mailbox_mbox.c
===================================================================
--- balsa/libbalsa/mailbox_mbox.c	(revision 8017)
+++ balsa/libbalsa/mailbox_mbox.c	(working copy)
@@ -353,7 +353,11 @@
  */
 static void
 lbm_mbox_header_cb(GMimeParser * parser, const char *header,
+#ifndef HAVE_GMIME_2_4
                    const char *value, off_t offset,
+#else /* HAVE_GMIME_2_4 */
+                   const char *value, gint64 offset,
+#endif /* HAVE_GMIME_2_4 */
                    gpointer user_data)
 {
     struct message_info *msg_info = *(struct message_info **) user_data;
@@ -1787,7 +1791,11 @@
 
     message = libbalsa_message_new();
 
+#ifndef HAVE_GMIME_2_4
     header = g_mime_message_get_header (mime_message, "Status");
+#else /* HAVE_GMIME_2_4 */
+    header = g_mime_object_get_header (GMIME_OBJECT(mime_message), "Status");
+#endif /* HAVE_GMIME_2_4 */
     if (header) {
 	if (strchr(header, 'R') == NULL) /* not found == not READ */
 	    flags |= LIBBALSA_MESSAGE_FLAG_NEW;
@@ -1797,7 +1805,11 @@
 	    flags |= LIBBALSA_MESSAGE_FLAG_RECENT;
     } else
 	    flags |= LIBBALSA_MESSAGE_FLAG_NEW |  LIBBALSA_MESSAGE_FLAG_RECENT;
+#ifndef HAVE_GMIME_2_4
     header = g_mime_message_get_header (mime_message, "X-Status");
+#else /* HAVE_GMIME_2_4 */
+    header = g_mime_object_get_header (GMIME_OBJECT(mime_message), "X-Status");
+#endif /* HAVE_GMIME_2_4 */
     if (header) {
 	if (strchr(header, 'D') != NULL) /* found == DELETED */
 	    flags |= LIBBALSA_MESSAGE_FLAG_DELETED;
@@ -1821,10 +1833,18 @@
     /* Create headers with spaces in place of flags, if necessary, so we
      * can later update them in place. */
     lbm_mbox_status_hdr(flags, 2, new_header);
+#ifndef HAVE_GMIME_2_4
     g_mime_message_set_header(message, "Status", new_header->str);
+#else /* HAVE_GMIME_2_4 */
+    g_mime_object_set_header(GMIME_OBJECT(message), "Status", new_header->str);
+#endif /* HAVE_GMIME_2_4 */
     g_string_truncate(new_header, 0);
     lbm_mbox_x_status_hdr(flags, 3, new_header);
+#ifndef HAVE_GMIME_2_4
     g_mime_message_set_header(message, "X-Status", new_header->str);
+#else /* HAVE_GMIME_2_4 */
+    g_mime_object_set_header(GMIME_OBJECT(message), "X-Status", new_header->str);
+#endif /* HAVE_GMIME_2_4 */
     g_string_free(new_header, TRUE);
 }
 
@@ -1832,7 +1852,12 @@
  * Encode text parts as quoted-printable.
  */
 static void
+#ifndef HAVE_GMIME_2_4
 lbm_mbox_prepare_object(GMimeObject * mime_part)
+#else /* HAVE_GMIME_2_4 */
+lbm_mbox_prepare_object(GMimeObject * parent, GMimeObject * mime_part,
+                        gpointer data)
+#endif /* HAVE_GMIME_2_4 */
 {
     g_mime_object_remove_header(mime_part, "Content-Length");
 
@@ -1842,21 +1867,58 @@
             /* Do not break crypto. */
             return;
 
+#ifdef HAVE_GMIME_2_4
+        if (parent)
+            /* We have been called by g_mime_multipart_foreach, which
+             * recursively descends the multipart tree, so we must not
+             * start another descent. */
+            return;
+
+#endif /* HAVE_GMIME_2_4 */
+#ifndef HAVE_GMIME_2_4
         g_mime_multipart_foreach((GMimeMultipart *) mime_part,
                                  (GMimePartFunc) lbm_mbox_prepare_object,
                                  NULL);
+#else /* HAVE_GMIME_2_4 */
+        g_mime_multipart_foreach((GMimeMultipart *) mime_part,
+                                 lbm_mbox_prepare_object,
+                                 NULL);
+#endif /* HAVE_GMIME_2_4 */
     } else if (GMIME_IS_MESSAGE_PART(mime_part))
+#ifndef HAVE_GMIME_2_4
         lbm_mbox_prepare_object(GMIME_OBJECT
                                 (((GMimeMessagePart *) mime_part)->
                                  message));
+#else /* HAVE_GMIME_2_4 */
+        lbm_mbox_prepare_object(NULL, 
+                                GMIME_OBJECT
+                                (((GMimeMessagePart *) mime_part)->
+                                 message), NULL);
+#endif /* HAVE_GMIME_2_4 */
     else if (GMIME_IS_MESSAGE(mime_part))
+#ifndef HAVE_GMIME_2_4
         lbm_mbox_prepare_object(((GMimeMessage *) mime_part)->mime_part);
+#else /* HAVE_GMIME_2_4 */
+        lbm_mbox_prepare_object(NULL, 
+                                ((GMimeMessage *) mime_part)->mime_part,
+                                NULL);
+#endif /* HAVE_GMIME_2_4 */
     else if (!GMIME_IS_MESSAGE_PARTIAL(mime_part)) {
+#ifndef HAVE_GMIME_2_4
         GMimePartEncodingType encoding;
         const GMimeContentType *mime_type;
+#else /* HAVE_GMIME_2_4 */
+        GMimeContentEncoding encoding;
+        GMimeContentType *mime_type;
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
         encoding = g_mime_part_get_encoding(GMIME_PART(mime_part));
         if (encoding == GMIME_PART_ENCODING_BASE64)
+#else /* HAVE_GMIME_2_4 */
+        encoding = g_mime_part_get_content_encoding(GMIME_PART(mime_part));
+        if (encoding == GMIME_CONTENT_ENCODING_BASE64)
+#endif /* HAVE_GMIME_2_4 */
             return;
 
         mime_type = g_mime_object_get_content_type(mime_part);
@@ -1868,8 +1930,13 @@
                 return;
         }
 
+#ifndef HAVE_GMIME_2_4
         g_mime_part_set_encoding(GMIME_PART(mime_part),
                                  GMIME_PART_ENCODING_QUOTEDPRINTABLE);
+#else /* HAVE_GMIME_2_4 */
+        g_mime_part_set_content_encoding(GMIME_PART(mime_part),
+                                 GMIME_CONTENT_ENCODING_QUOTEDPRINTABLE);
+#endif /* HAVE_GMIME_2_4 */
     }
 }
 
@@ -1882,7 +1949,11 @@
     parser = g_mime_parser_new_with_stream(stream);
     object = GMIME_OBJECT(g_mime_parser_construct_message(parser));
     g_object_unref(parser);
+#ifndef HAVE_GMIME_2_4
     lbm_mbox_prepare_object(object);
+#else /* HAVE_GMIME_2_4 */
+    lbm_mbox_prepare_object(NULL, object, NULL);
+#endif /* HAVE_GMIME_2_4 */
 
     return object;
 }
@@ -1893,10 +1964,19 @@
     GMimeStream *fstream;
     GMimeFilter *filter;
     
+#ifndef HAVE_GMIME_2_4
     fstream = g_mime_stream_filter_new_with_stream(stream);
+#else /* HAVE_GMIME_2_4 */
+    fstream = g_mime_stream_filter_new(stream);
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
     filter = g_mime_filter_crlf_new(GMIME_FILTER_CRLF_DECODE,
 				    GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+    filter = g_mime_filter_crlf_new(FALSE,
+				    FALSE);
+#endif /* HAVE_GMIME_2_4 */
     g_mime_stream_filter_add(GMIME_STREAM_FILTER(fstream), filter);
     g_object_unref(filter);
 
Index: balsa/libbalsa/message.c
===================================================================
--- balsa/libbalsa/message.c	(revision 8017)
+++ balsa/libbalsa/message.c	(working copy)
@@ -144,7 +144,11 @@
     message->headers = NULL;
 
     if (message->sender) {
+#ifndef HAVE_GMIME_2_4
 	internet_address_list_destroy(message->sender);
+#else /* HAVE_GMIME_2_4 */
+	g_object_unref(message->sender);
+#endif /* HAVE_GMIME_2_4 */
 	message->sender = NULL;
     }
 
@@ -209,37 +213,65 @@
     headers->subject = NULL;
 
     if (headers->from) {
+#ifndef HAVE_GMIME_2_4
 	internet_address_list_destroy(headers->from);
+#else /* HAVE_GMIME_2_4 */
+	g_object_unref(headers->from);
+#endif /* HAVE_GMIME_2_4 */
 	headers->from = NULL;
     }
 
     if (headers->to_list) {
+#ifndef HAVE_GMIME_2_4
 	internet_address_list_destroy(headers->to_list);
+#else /* HAVE_GMIME_2_4 */
+	g_object_unref(headers->to_list);
+#endif /* HAVE_GMIME_2_4 */
 	headers->to_list = NULL;
     }
 
     if (headers->content_type) {
+#ifndef HAVE_GMIME_2_4
 	g_mime_content_type_destroy(headers->content_type);
+#else /* HAVE_GMIME_2_4 */
+	g_object_unref(headers->content_type);
+#endif /* HAVE_GMIME_2_4 */
 	headers->content_type = NULL;
     }
 
     if (headers->cc_list) {
+#ifndef HAVE_GMIME_2_4
 	internet_address_list_destroy(headers->cc_list);
+#else /* HAVE_GMIME_2_4 */
+	g_object_unref(headers->cc_list);
+#endif /* HAVE_GMIME_2_4 */
 	headers->cc_list = NULL;
     }
 
     if (headers->bcc_list) {
+#ifndef HAVE_GMIME_2_4
 	internet_address_list_destroy(headers->bcc_list);
+#else /* HAVE_GMIME_2_4 */
+	g_object_unref(headers->bcc_list);
+#endif /* HAVE_GMIME_2_4 */
 	headers->bcc_list = NULL;
     }
 
     if (headers->reply_to) {
+#ifndef HAVE_GMIME_2_4
 	internet_address_list_destroy(headers->reply_to);
+#else /* HAVE_GMIME_2_4 */
+	g_object_unref(headers->reply_to);
+#endif /* HAVE_GMIME_2_4 */
 	headers->reply_to = NULL;
     }
 
     if(headers->dispnotify_to) {
+#ifndef HAVE_GMIME_2_4
 	internet_address_list_destroy(headers->dispnotify_to);
+#else /* HAVE_GMIME_2_4 */
+	g_object_unref(headers->dispnotify_to);
+#endif /* HAVE_GMIME_2_4 */
 	headers->dispnotify_to = NULL;
     }
 
@@ -261,7 +293,11 @@
         return body->charset;
 
     if (GMIME_IS_PART(body->mime_part)) {
+#ifndef HAVE_GMIME_2_4
         const GMimeContentType *type;
+#else /* HAVE_GMIME_2_4 */
+        GMimeContentType *type;
+#endif /* HAVE_GMIME_2_4 */
 
         type = g_mime_object_get_content_type(body->mime_part);
         return g_mime_content_type_get_parameter(type, "charset");
@@ -465,6 +501,10 @@
 GList *
 libbalsa_message_user_hdrs_from_gmime(GMimeMessage * message)
 {
+#ifdef HAVE_GMIME_2_4
+    GMimeHeaderList *hdrlist;
+    GMimeHeaderIter iter;
+#endif /* HAVE_GMIME_2_4 */
     GList *res = NULL;
     const char *value;
 
@@ -479,7 +519,11 @@
        already present in LibBalsaMessage::references field.  FWIW,
        mailbox driver does not copy references to user_headers.
     */
+#ifndef HAVE_GMIME_2_4
     value = g_mime_message_get_header(message, "References");
+#else /* HAVE_GMIME_2_4 */
+    value = g_mime_object_get_header(GMIME_OBJECT(message), "References");
+#endif /* HAVE_GMIME_2_4 */
     if (value) {
 #if BALSA_NEEDS_SEPARATE_USER_HEADERS
 	GMimeReferences *references, *reference;
@@ -502,26 +546,51 @@
 #endif
     }
 
+#ifndef HAVE_GMIME_2_4
     value = g_mime_message_get_header(message, "In-Reply-To");
+#else /* HAVE_GMIME_2_4 */
+    value = g_mime_object_get_header(GMIME_OBJECT(message), "In-Reply-To");
+#endif /* HAVE_GMIME_2_4 */
     if (value) {
+#ifndef HAVE_GMIME_2_4
+#if HAVE_GMIME_2_2_5
         res =
-#if HAVE_GMIME_2_2_5
             g_list_prepend(res,
                            libbalsa_create_hdr_pair
                            ("In-Reply-To",
                             g_mime_utils_header_decode_text(value)));
 #else  /* HAVE_GMIME_2_2_5 */
+        res =
             g_list_prepend(res,
                            libbalsa_create_hdr_pair
                            ("In-Reply-To",
                             g_mime_utils_header_decode_text
                             ((unsigned char *) value)));
 #endif /* HAVE_GMIME_2_2_5 */
+#else /* ! HAVE_GMIME_2_4 */
+        res =
+            g_list_prepend(res,
+                           libbalsa_create_hdr_pair
+                           ("In-Reply-To",
+                            g_mime_utils_header_decode_text(value)));
+#endif /* ! HAVE_GMIME_2_4 */
     }
 
+#ifndef HAVE_GMIME_2_4
     g_mime_header_foreach(GMIME_OBJECT(message)->headers,
 			  prepend_header_misc, &res);
 
+#else /* HAVE_GMIME_2_4 */
+    hdrlist = g_mime_object_get_header_list (GMIME_OBJECT(message));
+    if (g_mime_header_list_get_iter (hdrlist, &iter)) {
+	do {
+	    prepend_header_misc (g_mime_header_iter_get_name (&iter),
+				 g_mime_header_iter_get_value (&iter),
+				 &res);
+	} while (g_mime_header_iter_next (&iter));
+    }
+    
+#endif /* HAVE_GMIME_2_4 */
     return g_list_reverse(res);
 }
 
@@ -696,7 +765,11 @@
 gboolean
 libbalsa_message_is_partial(LibBalsaMessage * message, gchar ** id)
 {
+#ifndef HAVE_GMIME_2_4
     const GMimeContentType *content_type;
+#else /* HAVE_GMIME_2_4 */
+    GMimeContentType *content_type;
+#endif /* HAVE_GMIME_2_4 */
 
     g_return_val_if_fail(LIBBALSA_IS_MESSAGE(message), FALSE);
 
@@ -807,9 +880,19 @@
 {
     g_return_if_fail(message);
 
+#ifndef HAVE_GMIME_2_4
     internet_address_list_destroy(message->headers->dispnotify_to);
     message->headers->dispnotify_to =
         ia ? internet_address_list_prepend(NULL, ia) : NULL;
+#else /* HAVE_GMIME_2_4 */
+    g_object_unref(message->headers->dispnotify_to);
+    if (ia) {
+	message->headers->dispnotify_to = internet_address_list_new ();
+	internet_address_list_add (message->headers->dispnotify_to, ia);
+    } else {
+	message->headers->dispnotify_to = NULL;
+    }
+#endif /* HAVE_GMIME_2_4 */
 }
 
 #ifndef MESSAGE_COPY_CONTENT
@@ -839,7 +922,11 @@
     const char *value;
     if (!msg->mime_msg)
 	return 0;
+#ifndef HAVE_GMIME_2_4
     value = g_mime_message_get_header(msg->mime_msg, "Lines");
+#else /* HAVE_GMIME_2_4 */
+    value = g_mime_object_get_header(msg->mime_msg, "Lines");
+#endif /* HAVE_GMIME_2_4 */
     if (!value)
 	return 0;
     return atoi(value);
@@ -851,7 +938,11 @@
     const char *value;
     if (!msg->mime_msg)
 	return 0;
+#ifndef HAVE_GMIME_2_4
     value = g_mime_message_get_header(msg->mime_msg, "Content-Length");
+#else /* HAVE_GMIME_2_4 */
+    value = g_mime_object_get_header(msg->mime_msg, "Content-Length");
+#endif /* HAVE_GMIME_2_4 */
     if (!value)
 	return 0;
     return atoi(value);
@@ -869,8 +960,13 @@
 /* Populate headers from mime_msg, but only the members that are needed
  * all the time. */
 static InternetAddressList *
+#ifndef HAVE_GMIME_2_4
 lb_message_recipients(GMimeMessage * message, const gchar * type)
+#else /* HAVE_GMIME_2_4 */
+lb_message_recipients(GMimeMessage * message, GMimeRecipientType type)
+#endif /* HAVE_GMIME_2_4 */
 {
+#ifndef HAVE_GMIME_2_4
     const InternetAddressList *list;
     InternetAddressList *copy = NULL;
 
@@ -879,6 +975,9 @@
         copy = internet_address_list_append(copy, list->address);
 
     return copy;
+#else /* HAVE_GMIME_2_4 */
+    return g_object_ref(g_mime_message_get_recipients(message, type));
+#endif /* HAVE_GMIME_2_4 */
 }
 
 static void
@@ -889,7 +988,11 @@
     g_return_if_fail(mime_msg != NULL);
 
     if (!headers->from)
+#ifndef HAVE_GMIME_2_4
         headers->from = internet_address_parse_string(mime_msg->from);
+#else /* HAVE_GMIME_2_4 */
+        headers->from = internet_address_list_parse_string(mime_msg->from);
+#endif /* HAVE_GMIME_2_4 */
 
     if (!headers->date)
 	g_mime_message_get_date(mime_msg, &headers->date, NULL);
@@ -904,7 +1007,11 @@
 	 *     g_mime_content_type_copy
 	 *         (g_mime_object_get_content_type(mime_msg->mime_part));
 	 */
+#ifndef HAVE_GMIME_2_4
 	const GMimeContentType *content_type;
+#else /* HAVE_GMIME_2_4 */
+	GMimeContentType *content_type;
+#endif /* HAVE_GMIME_2_4 */
 	gchar *str;
 	g_return_if_fail(headers->content_type == NULL);
 	content_type = g_mime_object_get_content_type(mime_msg->mime_part);
@@ -925,12 +1032,21 @@
 
     if (!headers->reply_to)
         headers->reply_to =
+#ifndef HAVE_GMIME_2_4
 	    internet_address_parse_string(mime_msg->reply_to);
+#else /* HAVE_GMIME_2_4 */
+	    internet_address_list_parse_string(mime_msg->reply_to);
+#endif /* HAVE_GMIME_2_4 */
 
     if (!headers->dispnotify_to)
         headers->dispnotify_to =
+#ifndef HAVE_GMIME_2_4
             internet_address_parse_string(g_mime_message_get_header
                                           (mime_msg,
+#else /* HAVE_GMIME_2_4 */
+            internet_address_list_parse_string(g_mime_object_get_header
+                                          (GMIME_OBJECT(mime_msg),
+#endif /* HAVE_GMIME_2_4 */
                                            "Disposition-Notification-To"));
 
     if (!headers->cc_list)
@@ -944,7 +1060,11 @@
     /* Get fcc from message */
     if (!headers->fcc_url)
 	headers->fcc_url =
+#ifndef HAVE_GMIME_2_4
 	    g_strdup(g_mime_message_get_header(mime_msg, "X-Balsa-Fcc"));
+#else /* HAVE_GMIME_2_4 */
+	    g_strdup(g_mime_object_get_header(GMIME_OBJECT(mime_msg), "X-Balsa-Fcc"));
+#endif /* HAVE_GMIME_2_4 */
 }
 
 /* Populate headers from the info in mime_msg. */
@@ -971,7 +1091,11 @@
     header = g_mime_message_get_subject(mime_msg);
     libbalsa_message_set_subject_from_header(message, header);
 
+#ifndef HAVE_GMIME_2_4
     header = g_mime_message_get_header(mime_msg, "Content-Length");
+#else /* HAVE_GMIME_2_4 */
+    header = g_mime_object_get_header(GMIME_OBJECT(mime_msg), "Content-Length");
+#endif /* HAVE_GMIME_2_4 */
     if (header)
 	message->length = atoi(header);
 #endif
@@ -979,11 +1103,19 @@
     if (header)
 	message->message_id = g_strdup(header);
 
+#ifndef HAVE_GMIME_2_4
     header = g_mime_message_get_header(mime_msg, "References");
+#else /* HAVE_GMIME_2_4 */
+    header = g_mime_object_get_header(GMIME_OBJECT(mime_msg), "References");
+#endif /* HAVE_GMIME_2_4 */
     if (header)
 	libbalsa_message_set_references_from_string(message, header);
 
+#ifndef HAVE_GMIME_2_4
     header = g_mime_message_get_header(mime_msg, "In-Reply-To");
+#else /* HAVE_GMIME_2_4 */
+    header = g_mime_object_get_header(GMIME_OBJECT(mime_msg), "In-Reply-To");
+#endif /* HAVE_GMIME_2_4 */
     if (header)
 	libbalsa_message_set_in_reply_to_from_string(message, header);
 
@@ -1092,11 +1224,15 @@
          * appropriate GMime decoder. */
         gchar *tmp = g_strdup(value);
         libbalsa_utf8_sanitize(&tmp, TRUE, NULL);
+#ifndef HAVE_GMIME_2_4
 #if HAVE_GMIME_2_2_5
+#endif /* ! HAVE_GMIME_2_4 */
         val = g_mime_utils_header_encode_text(tmp);
+#ifndef HAVE_GMIME_2_4
 #else  /* HAVE_GMIME_2_2_5 */
         val = g_mime_utils_header_encode_text((unsigned char *) tmp);
 #endif /* HAVE_GMIME_2_2_5 */
+#endif /* ! HAVE_GMIME_2_4 */
         g_free(tmp);
 #ifdef DEBUG
         g_print("%s: non-ascii \"%s\" header \"%s\" encoded as \"%s\"\n",
@@ -1120,11 +1256,19 @@
     } else
     if (message->headers->from == NULL &&
 	g_ascii_strcasecmp(name, "From") == 0) {
+#ifndef HAVE_GMIME_2_4
         message->headers->from = internet_address_parse_string(value);
+#else /* HAVE_GMIME_2_4 */
+        message->headers->from = internet_address_list_parse_string(value);
+#endif /* HAVE_GMIME_2_4 */
     } else
     if (message->headers->to_list == NULL &&
         g_ascii_strcasecmp(name, "To") == 0) {
+#ifndef HAVE_GMIME_2_4
 	message->headers->to_list = internet_address_parse_string(value);
+#else /* HAVE_GMIME_2_4 */
+	message->headers->to_list = internet_address_list_parse_string(value);
+#endif /* HAVE_GMIME_2_4 */
     } else
     if (g_ascii_strcasecmp(name, "In-Reply-To") == 0) {
 	libbalsa_message_set_in_reply_to_from_string(message, value);
@@ -1144,7 +1288,11 @@
     if (message->headers->dispnotify_to == NULL &&
 	g_ascii_strcasecmp(name, "Disposition-Notification-To") == 0) {
 	message->headers->dispnotify_to =
+#ifndef HAVE_GMIME_2_4
 	    internet_address_parse_string(value);
+#else /* HAVE_GMIME_2_4 */
+	    internet_address_list_parse_string(value);
+#endif /* HAVE_GMIME_2_4 */
     } else
 #ifdef MESSAGE_COPY_CONTENT
     if (g_ascii_strcasecmp(name, "Content-Length") == 0) {
@@ -1212,11 +1360,20 @@
      * fields, and finding the empty line that separates the body from
      * the header is simpler if it has no '\r' in it. */
     gmime_stream_filter =
+#ifndef HAVE_GMIME_2_4
         g_mime_stream_filter_new_with_stream(gmime_stream);
+#else /* HAVE_GMIME_2_4 */
+        g_mime_stream_filter_new(gmime_stream);
+#endif /* HAVE_GMIME_2_4 */
 
     gmime_filter_crlf =
+#ifndef HAVE_GMIME_2_4
         g_mime_filter_crlf_new(GMIME_FILTER_CRLF_DECODE,
                                GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+        g_mime_filter_crlf_new(FALSE,
+                               FALSE);
+#endif /* HAVE_GMIME_2_4 */
     g_mime_stream_filter_add(GMIME_STREAM_FILTER(gmime_stream_filter),
                                                  gmime_filter_crlf);
     g_object_unref(gmime_filter_crlf);
@@ -1345,13 +1502,19 @@
                                          const gchar * header)
 {
     if (header) {
+#ifndef HAVE_GMIME_2_4
+#if HAVE_GMIME_2_2_5
         gchar *subject =
-#if HAVE_GMIME_2_2_5
             g_mime_utils_header_decode_text(header);
 #else  /* HAVE_GMIME_2_2_5 */
+        gchar *subject =
             g_mime_utils_header_decode_text((const unsigned char *)
                                             header);
 #endif /* HAVE_GMIME_2_2_5 */
+#else /* ! HAVE_GMIME_2_4 */
+        gchar *subject =
+            g_mime_utils_header_decode_text(header);
+#endif /* ! HAVE_GMIME_2_4 */
         libbalsa_message_set_subject(message, subject);
         g_free(subject);
     }
Index: balsa/libbalsa/mime-stream-shared.c
===================================================================
--- balsa/libbalsa/mime-stream-shared.c	(revision 8017)
+++ balsa/libbalsa/mime-stream-shared.c	(working copy)
@@ -60,10 +60,18 @@
 static ssize_t lbmss_stream_write(GMimeStream * stream, const char *buf,
                                   size_t len);
 static int lbmss_stream_reset(GMimeStream * stream);
+#ifndef HAVE_GMIME_2_4
 static off_t lbmss_stream_seek(GMimeStream * stream, off_t offset,
+#else /* HAVE_GMIME_2_4 */
+static gint64 lbmss_stream_seek(GMimeStream * stream, gint64 offset,
+#endif /* HAVE_GMIME_2_4 */
                                GMimeSeekWhence whence);
 static GMimeStream *lbmss_stream_substream(GMimeStream * stream,
+#ifndef HAVE_GMIME_2_4
                                            off_t start, off_t end);
+#else /* HAVE_GMIME_2_4 */
+                                           gint64 start, gint64 end);
+#endif /* HAVE_GMIME_2_4 */
 
 static GMimeStreamFsClass *parent_class = NULL;
 static GMutex *lbmss_mutex;
@@ -192,8 +200,13 @@
     return GMIME_STREAM_CLASS(parent_class)->reset(stream);
 }
 
+#ifndef HAVE_GMIME_2_4
 static off_t
 lbmss_stream_seek(GMimeStream * stream, off_t offset,
+#else /* HAVE_GMIME_2_4 */
+static gint64
+lbmss_stream_seek(GMimeStream * stream, gint64 offset,
+#endif /* HAVE_GMIME_2_4 */
                   GMimeSeekWhence whence)
 {
     g_return_val_if_fail(lbmss_thread_has_lock(stream), -1);
@@ -201,7 +214,11 @@
 }
 
 static GMimeStream *
+#ifndef HAVE_GMIME_2_4
 lbmss_stream_substream(GMimeStream * stream, off_t start, off_t end)
+#else /* HAVE_GMIME_2_4 */
+lbmss_stream_substream(GMimeStream * stream, gint64 start, gint64 end)
+#endif /* HAVE_GMIME_2_4 */
 {
     LibBalsaMimeStreamShared *stream_shared;
     GMimeStreamFs *fstream;
@@ -235,7 +252,11 @@
 {
     LibBalsaMimeStreamShared *stream_shared;
     GMimeStreamFs *fstream;
+#ifndef HAVE_GMIME_2_4
     off_t start;
+#else /* HAVE_GMIME_2_4 */
+    gint64 start;
+#endif /* HAVE_GMIME_2_4 */
 
     stream_shared =
         g_object_new(LIBBALSA_TYPE_MIME_STREAM_SHARED, NULL, NULL);
Index: balsa/libbalsa/gmime-stream-gnome-vfs.c
===================================================================
--- balsa/libbalsa/gmime-stream-gnome-vfs.c	(revision 8017)
+++ balsa/libbalsa/gmime-stream-gnome-vfs.c	(working copy)
@@ -56,12 +56,25 @@
 static int stream_close(GMimeStream * stream);
 static gboolean stream_eos(GMimeStream * stream);
 static int stream_reset(GMimeStream * stream);
+#ifndef HAVE_GMIME_2_4
 static off_t stream_seek(GMimeStream * stream, off_t offset,
+#else /* HAVE_GMIME_2_4 */
+static gint64 stream_seek(GMimeStream * stream, gint64 offset,
+#endif /* HAVE_GMIME_2_4 */
 			 GMimeSeekWhence whence);
+#ifndef HAVE_GMIME_2_4
 static off_t stream_tell(GMimeStream * stream);
+#else /* HAVE_GMIME_2_4 */
+static gint64 stream_tell(GMimeStream * stream);
+#endif /* HAVE_GMIME_2_4 */
 static ssize_t stream_length(GMimeStream * stream);
+#ifndef HAVE_GMIME_2_4
 static GMimeStream *stream_substream(GMimeStream * stream, off_t start,
 				     off_t end);
+#else /* HAVE_GMIME_2_4 */
+static GMimeStream *stream_substream(GMimeStream * stream, gint64 start,
+				     gint64 end);
+#endif /* HAVE_GMIME_2_4 */
 
 
 static GMimeStreamClass *parent_class = NULL;
@@ -147,7 +160,11 @@
 	return -1;
 
     if (stream->bound_end != -1)
+#ifndef HAVE_GMIME_2_4
 	len = MIN(stream->bound_end - stream->position, (off_t) len);
+#else /* HAVE_GMIME_2_4 */
+	len = MIN(stream->bound_end - stream->position, (gint64) len);
+#endif /* HAVE_GMIME_2_4 */
 
     /* make sure we are at the right position */
     gnome_vfs_seek(gvfs->handle, GNOME_VFS_SEEK_START, stream->position);
@@ -178,7 +195,11 @@
 	return -1;
 
     if (stream->bound_end != -1)
+#ifndef HAVE_GMIME_2_4
 	len = MIN(stream->bound_end - stream->position, (off_t) len);
+#else /* HAVE_GMIME_2_4 */
+	len = MIN(stream->bound_end - stream->position, (gint64) len);
+#endif /* HAVE_GMIME_2_4 */
 
     /* make sure we are at the right position */
     gnome_vfs_seek(gvfs->handle, GNOME_VFS_SEEK_START, stream->position);
@@ -267,11 +288,20 @@
     return 0;
 }
 
+#ifndef HAVE_GMIME_2_4
 static off_t
 stream_seek(GMimeStream * stream, off_t offset, GMimeSeekWhence whence)
+#else /* HAVE_GMIME_2_4 */
+static gint64
+stream_seek(GMimeStream * stream, gint64 offset, GMimeSeekWhence whence)
+#endif /* HAVE_GMIME_2_4 */
 {
     GMimeStreamGvfs *gvfs = (GMimeStreamGvfs *) stream;
+#ifndef HAVE_GMIME_2_4
     off_t real;
+#else /* HAVE_GMIME_2_4 */
+    gint64 real;
+#endif /* HAVE_GMIME_2_4 */
     GnomeVFSFileSize gvfs_real;
 
     g_return_val_if_fail(gvfs->handle != NULL, -1);
@@ -323,7 +353,11 @@
         gnome_vfs_tell(gvfs->handle, &gvfs_real) != GNOME_VFS_OK)
 	return -1;
     else
+#ifndef HAVE_GMIME_2_4
         real = (off_t) gvfs_real;
+#else /* HAVE_GMIME_2_4 */
+        real = (gint64) gvfs_real;
+#endif /* HAVE_GMIME_2_4 */
 
     /* reset eos if appropriate */
     if ((stream->bound_end != -1 && real < stream->bound_end) ||
@@ -335,7 +369,11 @@
     return real;
 }
 
+#ifndef HAVE_GMIME_2_4
 static off_t
+#else /* HAVE_GMIME_2_4 */
+static gint64
+#endif /* HAVE_GMIME_2_4 */
 stream_tell(GMimeStream * stream)
 {
     return stream->position;
@@ -353,14 +391,26 @@
     if (gnome_vfs_seek(gvfs->handle, GNOME_VFS_SEEK_END, 0) != GNOME_VFS_OK ||
         gnome_vfs_tell(gvfs->handle, &bound_end) != GNOME_VFS_OK ||
         gnome_vfs_seek(gvfs->handle, GNOME_VFS_SEEK_START, stream->position) != GNOME_VFS_OK ||
+#ifndef HAVE_GMIME_2_4
         (off_t) bound_end < stream->bound_start)
+#else /* HAVE_GMIME_2_4 */
+        (gint64) bound_end < stream->bound_start)
+#endif /* HAVE_GMIME_2_4 */
         return -1;
 
+#ifndef HAVE_GMIME_2_4
     return (off_t) bound_end - stream->bound_start;
+#else /* HAVE_GMIME_2_4 */
+    return (ssize_t) bound_end - stream->bound_start;
+#endif /* HAVE_GMIME_2_4 */
 }
 
 static GMimeStream *
+#ifndef HAVE_GMIME_2_4
 stream_substream(GMimeStream * stream, off_t start, off_t end)
+#else /* HAVE_GMIME_2_4 */
+stream_substream(GMimeStream * stream, gint64 start, gint64 end)
+#endif /* HAVE_GMIME_2_4 */
 {
     GMimeStreamGvfs *gvfs;
 
@@ -392,7 +442,11 @@
         start = 0;
 
     gvfs = g_object_new(GMIME_TYPE_STREAM_GVFS, NULL);
+#ifndef HAVE_GMIME_2_4
     g_mime_stream_construct(GMIME_STREAM(gvfs), (off_t) start, -1);
+#else /* HAVE_GMIME_2_4 */
+    g_mime_stream_construct(GMIME_STREAM(gvfs), (gint64) start, -1);
+#endif /* HAVE_GMIME_2_4 */
     gvfs->owner = TRUE;
     gvfs->eos = FALSE;
     gvfs->handle = handle;
@@ -413,7 +467,11 @@
  * Returns a stream using @handle with bounds @start and @end.
  **/
 GMimeStream *
+#ifndef HAVE_GMIME_2_4
 g_mime_stream_gvfs_new_with_bounds(GnomeVFSHandle * handle, off_t start, off_t end)
+#else /* HAVE_GMIME_2_4 */
+g_mime_stream_gvfs_new_with_bounds(GnomeVFSHandle * handle, gint64 start, gint64 end)
+#endif /* HAVE_GMIME_2_4 */
 {
     GMimeStreamGvfs *gvfs;
 
Index: balsa/libbalsa/rfc3156.c
===================================================================
--- balsa/libbalsa/rfc3156.c	(revision 8017)
+++ balsa/libbalsa/rfc3156.c	(working copy)
@@ -129,14 +129,22 @@
     gboolean retval;
 
     if (body->mime_part) {
+#ifndef HAVE_GMIME_2_4
 	const GMimeContentType *content_type =
+#else /* HAVE_GMIME_2_4 */
+	GMimeContentType *content_type =
+#endif /* HAVE_GMIME_2_4 */
 	    g_mime_object_get_content_type(body->mime_part);
 	retval = g_mime_content_type_is_type(content_type, type, sub_type);
     } else {
 	GMimeContentType *content_type =
 	    g_mime_content_type_new_from_string(body->content_type);
 	retval = g_mime_content_type_is_type(content_type, type, sub_type);
+#ifndef HAVE_GMIME_2_4
 	g_mime_content_type_destroy(content_type);
+#else /* HAVE_GMIME_2_4 */
+	g_object_unref(content_type);
+#endif /* HAVE_GMIME_2_4 */
     }
 
     return retval;
@@ -390,6 +398,9 @@
 	result = 
 	    g_mime_multipart_encrypted_encrypt(mpe, *content,
 					       GMIME_CIPHER_CONTEXT(ctx),
+#ifdef HAVE_GMIME_2_4
+                                               FALSE, NULL,
+#endif /* HAVE_GMIME_2_4 */
 					       recipients, error);
     }
 #ifdef HAVE_SMIME
@@ -506,7 +517,11 @@
 
     /* check if the body is really a multipart/signed */
     if (!GMIME_IS_MULTIPART_SIGNED(body->mime_part)
+#ifndef HAVE_GMIME_2_4
         || (g_mime_multipart_get_number
+#else /* HAVE_GMIME_2_4 */
+        || (g_mime_multipart_get_count
+#endif /* HAVE_GMIME_2_4 */
             (((GMimeMultipart *) body->mime_part))) < 2)
         return FALSE;
     if (body->parts->next->sig_info)
@@ -701,7 +716,9 @@
 #endif
 
     libbalsa_message_body_set_mime_body(body, mime_obj);
+#ifndef HAVE_GMIME_2_4
     g_object_unref(G_OBJECT(mime_obj));
+#endif /* ! HAVE_GMIME_2_4 */
     if (ctx->sig_state && ctx->sig_state->status != GPG_ERR_NOT_SIGNED) {
 	g_object_ref(ctx->sig_state);
 	body->sig_info = ctx->sig_state;
@@ -918,7 +935,11 @@
     }
 
     /* decrypt */
+#ifndef HAVE_GMIME_2_4
     if (g_mime_part_rfc2440_decrypt(part, ctx, &error) == -1) {
+#else /* HAVE_GMIME_2_4 */
+    if (g_mime_part_rfc2440_decrypt(part, ctx, &error) == NULL) {
+#endif /* HAVE_GMIME_2_4 */
 	if (error) {
 	    if (error->code != GPG_ERR_CANCELED)
 		libbalsa_information(LIBBALSA_INFORMATION_ERROR, "%s: %s",
@@ -1751,16 +1772,37 @@
     gpgme_key_t key;
     gboolean result = TRUE;
     time_t now = time(NULL);
+#ifdef HAVE_GMIME_2_4
+    gint i;
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
     for (; result && recipients; recipients = recipients->next) {
         InternetAddress *ia = recipients->address;
+#else /* HAVE_GMIME_2_4 */
+    for (i = 0; result && i < internet_address_list_length(recipients);
+         i++) {
+        InternetAddress *ia =
+            internet_address_list_get_address(recipients, i);
+#endif /* HAVE_GMIME_2_4 */
 
 	/* check all entries in the list, handle groups recursively */
+#ifndef HAVE_GMIME_2_4
 	if (ia->type == INTERNET_ADDRESS_GROUP)
 	    result = have_pub_key_for(gpgme_ctx, ia->value.members);
 	else if (recipients->address->type == INTERNET_ADDRESS_NAME) {
 	    if (gpgme_op_keylist_start(gpgme_ctx, ia->value.addr, FALSE) !=
 		GPG_ERR_NO_ERROR)
+#else /* HAVE_GMIME_2_4 */
+	if (INTERNET_ADDRESS_IS_GROUP(ia))
+	    result =
+                have_pub_key_for(gpgme_ctx,
+                                 INTERNET_ADDRESS_GROUP(ia)->members);
+	else {
+	    if (gpgme_op_keylist_start(gpgme_ctx,
+                                       INTERNET_ADDRESS_MAILBOX(ia)->addr,
+                                       FALSE) != GPG_ERR_NO_ERROR)
+#endif /* HAVE_GMIME_2_4 */
 		return FALSE;
 
 	    result = FALSE;
Index: balsa/libbalsa/send.c
===================================================================
--- balsa/libbalsa/send.c	(revision 8017)
+++ balsa/libbalsa/send.c	(working copy)
@@ -294,7 +294,11 @@
 
     wrapper =
         g_mime_data_wrapper_new_with_stream(stream,
+#ifndef HAVE_GMIME_2_4
                                             GMIME_PART_ENCODING_DEFAULT);
+#else /* HAVE_GMIME_2_4 */
+                                            GMIME_CONTENT_ENCODING_DEFAULT);
+#endif /* HAVE_GMIME_2_4 */
     g_object_unref(stream);
 
     g_mime_part_set_content_object(mime_part, wrapper);
@@ -339,8 +343,13 @@
         mime_part = g_mime_part_new_with_type("text", "plain");
     }
 
+#ifndef HAVE_GMIME_2_4
     g_mime_part_set_content_disposition(mime_part, GMIME_DISPOSITION_INLINE);
     g_mime_part_set_encoding(mime_part, GMIME_PART_ENCODING_QUOTEDPRINTABLE);
+#else /* HAVE_GMIME_2_4 */
+    g_mime_object_set_disposition(GMIME_OBJECT(mime_part), GMIME_DISPOSITION_INLINE);
+    g_mime_part_set_content_encoding(mime_part, GMIME_CONTENT_ENCODING_QUOTEDPRINTABLE);
+#endif /* HAVE_GMIME_2_4 */
     g_mime_object_set_content_type_parameter(GMIME_OBJECT(mime_part),
                                              "charset",
                                              charset ? charset :
@@ -361,7 +370,11 @@
 	GMimeDataWrapper *wrapper;
 
 	stream = g_mime_stream_mem_new();
+#ifndef HAVE_GMIME_2_4
 	filter_stream = g_mime_stream_filter_new_with_stream(stream);
+#else /* HAVE_GMIME_2_4 */
+	filter_stream = g_mime_stream_filter_new(stream);
+#endif /* HAVE_GMIME_2_4 */
 	filter = g_mime_filter_charset_new("UTF-8", charset);
 	g_mime_stream_filter_add(GMIME_STREAM_FILTER(filter_stream), filter);
 	g_object_unref(G_OBJECT(filter));
@@ -371,7 +384,11 @@
 
         wrapper =
             g_mime_data_wrapper_new_with_stream(stream,
+#ifndef HAVE_GMIME_2_4
                                                 GMIME_PART_ENCODING_DEFAULT);
+#else /* HAVE_GMIME_2_4 */
+                                                GMIME_CONTENT_ENCODING_DEFAULT);
+#endif /* HAVE_GMIME_2_4 */
 	g_object_unref(stream);
 
 	g_mime_part_set_content_object(mime_part, wrapper);
@@ -398,14 +415,27 @@
     if (body->html_buffer && !postpone) {
         GMimeMultipart *mpa = g_mime_multipart_new_with_subtype("alternative");
 
+#ifndef HAVE_GMIME_2_4
         g_mime_multipart_add_part(mpa, GMIME_OBJECT(mime_part));
+#else /* HAVE_GMIME_2_4 */
+        g_mime_multipart_add(mpa, GMIME_OBJECT(mime_part));
+#endif /* HAVE_GMIME_2_4 */
         g_object_unref(G_OBJECT(mime_part));
 
         mime_part = g_mime_part_new_with_type("text", "html");
+#ifndef HAVE_GMIME_2_4
         g_mime_multipart_add_part(mpa, GMIME_OBJECT(mime_part));
+#else /* HAVE_GMIME_2_4 */
+        g_mime_multipart_add(mpa, GMIME_OBJECT(mime_part));
+#endif /* HAVE_GMIME_2_4 */
         g_object_unref(G_OBJECT(mime_part));
+#ifndef HAVE_GMIME_2_4
         g_mime_part_set_content_disposition(mime_part, GMIME_DISPOSITION_INLINE);
         g_mime_part_set_encoding(mime_part, GMIME_PART_ENCODING_QUOTEDPRINTABLE);
+#else /* HAVE_GMIME_2_4 */
+        g_mime_object_set_disposition(GMIME_OBJECT(mime_part), GMIME_DISPOSITION_INLINE);
+        g_mime_part_set_content_encoding(mime_part, GMIME_CONTENT_ENCODING_QUOTEDPRINTABLE);
+#endif /* HAVE_GMIME_2_4 */
         g_mime_object_set_content_type_parameter(GMIME_OBJECT(mime_part),
                                                  "charset", "UTF-8");
 	lbs_set_content(mime_part, body->html_buffer);
@@ -469,10 +499,18 @@
         return result;
 
     if (fccbox)
+#ifndef HAVE_GMIME_2_4
         g_mime_message_set_header(message->mime_msg, "X-Balsa-Fcc",
+#else /* HAVE_GMIME_2_4 */
+        g_mime_object_set_header(GMIME_OBJECT(message->mime_msg), "X-Balsa-Fcc",
+#endif /* HAVE_GMIME_2_4 */
                                   fccbox->url);
 #if ENABLE_ESMTP
+#ifndef HAVE_GMIME_2_4
     g_mime_message_set_header(message->mime_msg, "X-Balsa-SmtpServer",
+#else /* HAVE_GMIME_2_4 */
+    g_mime_object_set_header(GMIME_OBJECT(message->mime_msg), "X-Balsa-SmtpServer",
+#endif /* HAVE_GMIME_2_4 */
 	                      libbalsa_smtp_server_get_name(smtp_server));
 
     big_message = libbalsa_smtp_server_get_big_message(smtp_server);
@@ -492,9 +530,15 @@
                 /* RFC 2046, 5.2.2: "...it is specified that entities of
                  * type "message/partial" must always have a content-
                  * transfer-encoding of 7bit (the default)" */
+#ifndef HAVE_GMIME_2_4
                 g_mime_part_set_encoding(GMIME_PART
                                          (mime_msgs[i]->mime_part),
                                          GMIME_PART_ENCODING_7BIT);
+#else /* HAVE_GMIME_2_4 */
+                g_mime_part_set_content_encoding(GMIME_PART
+                                         (mime_msgs[i]->mime_part),
+                                         GMIME_CONTENT_ENCODING_7BIT);
+#endif /* HAVE_GMIME_2_4 */
                 libbalsa_set_message_id(mime_msgs[i]);
             }
             if (rc) {
@@ -597,13 +641,31 @@
 add_recipients(smtp_message_t message,
                InternetAddressList * recipient_list)
 {
+#ifndef HAVE_GMIME_2_4
     for (; recipient_list; recipient_list = recipient_list->next) {
         InternetAddress *ia = recipient_list->address;
+#else /* HAVE_GMIME_2_4 */
+    const InternetAddress *ia;
+    int i;
+    
+    if (recipient_list == NULL)
+	return;
+    
+    for (i = 0; i < internet_address_list_length (recipient_list); i++) {
+        ia = internet_address_list_get_address (recipient_list, i);
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
 	if (ia->type == INTERNET_ADDRESS_NAME)
 	    smtp_add_recipient (message, ia->value.addr);
 	else if (ia->type == INTERNET_ADDRESS_GROUP)
 	    add_recipients(message, ia->value.members);
+#else /* HAVE_GMIME_2_4 */
+	if (INTERNET_ADDRESS_IS_MAILBOX (ia))
+	    smtp_add_recipient (message, INTERNET_ADDRESS_MAILBOX (ia)->addr);
+	else
+	    add_recipients(message, INTERNET_ADDRESS_GROUP (ia)->members);
+#endif /* HAVE_GMIME_2_4 */
 
             /* XXX  - this is where to add DSN requests.  It would be
                cool if LibBalsaAddress could contain DSN options
@@ -611,6 +673,7 @@
     }
 }
 
+#ifndef HAVE_GMIME_2_4
 static guint
 lbs_list_n_addresses(InternetAddressList * recipient_list)
 {
@@ -631,6 +694,7 @@
     return n_addresses;
 }
 
+#endif /* ! HAVE_GMIME_2_4 */
 /* libbalsa_process_queue:
    treats given mailbox as a set of messages to send. Loads them up and
    launches sending thread/routine.
@@ -726,7 +790,11 @@
 	} else {
             gboolean has_open_recipients;
             guint n_bcc_recipients;
+#ifndef HAVE_GMIME_2_4
 	    InternetAddress *ia;
+#else /* HAVE_GMIME_2_4 */
+	    const InternetAddress *ia;
+#endif /* HAVE_GMIME_2_4 */
 
 	    libbalsa_message_change_flags(msg,
                                           LIBBALSA_MESSAGE_FLAG_FLAGGED, 0);
@@ -751,10 +819,19 @@
 
 		mem_stream = new_message->stream;
 		filter_stream =
+#ifndef HAVE_GMIME_2_4
 		    g_mime_stream_filter_new_with_stream(mem_stream);
+#else /* HAVE_GMIME_2_4 */
+		    g_mime_stream_filter_new(mem_stream);
+#endif /* HAVE_GMIME_2_4 */
 		filter =
+#ifndef HAVE_GMIME_2_4
 		    g_mime_filter_crlf_new( GMIME_FILTER_CRLF_ENCODE,
 					    GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+		    g_mime_filter_crlf_new( TRUE,
+					    FALSE);
+#endif /* HAVE_GMIME_2_4 */
 		g_mime_stream_filter_add(GMIME_STREAM_FILTER(filter_stream),
 					 filter);
 		g_object_unref(G_OBJECT(filter));
@@ -772,10 +849,22 @@
              * session for that one recipient, in which the Bcc: header
              * is preserved. */
             has_open_recipients =
+#ifndef HAVE_GMIME_2_4
                 lbs_list_n_addresses(msg->headers->to_list) > 0 ||
                 lbs_list_n_addresses(msg->headers->cc_list) > 0;
+#else /* HAVE_GMIME_2_4 */
+                libbalsa_address_n_mailboxes_in_list(msg->headers->
+                                                     to_list) > 0
+                || libbalsa_address_n_mailboxes_in_list(msg->headers->
+                                                        cc_list) > 0;
+#endif /* HAVE_GMIME_2_4 */
             n_bcc_recipients =
+#ifndef HAVE_GMIME_2_4
                 lbs_list_n_addresses(msg->headers->bcc_list);
+#else /* HAVE_GMIME_2_4 */
+                libbalsa_address_n_mailboxes_in_list(msg->headers->
+                                                     bcc_list);
+#endif /* HAVE_GMIME_2_4 */
             if (has_open_recipients && n_bcc_recipients == 1)
 		bcc_message = smtp_add_message (session);
 	    else
@@ -821,12 +910,22 @@
 
 	    /* Add the sender info */
             if (msg->headers->from
+#ifndef HAVE_GMIME_2_4
 		&& (ia = msg->headers->from->address)
 		&& ia->type != INTERNET_ADDRESS_NONE) {
+#else /* HAVE_GMIME_2_4 */
+		&& (ia = internet_address_list_get_address (msg->headers->from, 0))) {
+#endif /* HAVE_GMIME_2_4 */
 	        phrase = ia->name;
+#ifndef HAVE_GMIME_2_4
 		while (ia->type == INTERNET_ADDRESS_GROUP)
 		    ia = ia->value.members->address;
 	        mailbox = ia->value.addr;
+#else /* HAVE_GMIME_2_4 */
+		while (ia && INTERNET_ADDRESS_IS_GROUP (ia))
+		    ia = internet_address_list_get_address (INTERNET_ADDRESS_GROUP (ia)->members, 0);
+	        mailbox = ia ? INTERNET_ADDRESS_MAILBOX (ia)->addr : "";
+#endif /* HAVE_GMIME_2_4 */
             } else
                 phrase = mailbox = "";
 	    smtp_set_reverse_path (message, mailbox);
@@ -837,24 +936,44 @@
 	    }
 
 	    if (msg->headers->reply_to
+#ifndef HAVE_GMIME_2_4
 		&& (ia = msg->headers->reply_to->address)
                 && ia->type != INTERNET_ADDRESS_NONE) {
+#else /* HAVE_GMIME_2_4 */
+		&& (ia = internet_address_list_get_address (msg->headers->reply_to, 0))) {
+#endif /* HAVE_GMIME_2_4 */
 		phrase = ia->name;
+#ifndef HAVE_GMIME_2_4
 		while (ia->type == INTERNET_ADDRESS_GROUP)
 		    ia = ia->value.members->address;
 	        mailbox = ia->value.addr;
+#else /* HAVE_GMIME_2_4 */
+		while (ia && INTERNET_ADDRESS_IS_GROUP (ia))
+		    ia = internet_address_list_get_address (INTERNET_ADDRESS_GROUP (ia)->members, 0);
+	        mailbox = ia ? INTERNET_ADDRESS_MAILBOX (ia)->addr : "";
+#endif /* HAVE_GMIME_2_4 */
 		smtp_set_header (message, "Reply-To", phrase, mailbox);
 		if (bcc_message)
 		    smtp_set_header (bcc_message, "Reply-To", phrase, mailbox);
 	    }
 
 	    if (msg->headers->dispnotify_to
+#ifndef HAVE_GMIME_2_4
 		&& (ia = msg->headers->dispnotify_to->address)
 		&& ia->type != INTERNET_ADDRESS_NONE) {
+#else /* HAVE_GMIME_2_4 */
+		&& (ia = internet_address_list_get_address (msg->headers->dispnotify_to, 0))) {
+#endif /* HAVE_GMIME_2_4 */
 		phrase = ia->name;
+#ifndef HAVE_GMIME_2_4
 		while (ia->type == INTERNET_ADDRESS_GROUP)
 		    ia = ia->value.members->address;
 	        mailbox = ia->value.addr;
+#else /* HAVE_GMIME_2_4 */
+		while (ia && INTERNET_ADDRESS_IS_GROUP (ia))
+		    ia = internet_address_list_get_address (INTERNET_ADDRESS_GROUP (ia)->members, 0);
+	        mailbox = ia ? INTERNET_ADDRESS_MAILBOX (ia)->addr : "";
+#endif /* HAVE_GMIME_2_4 */
 		smtp_set_header (message, "Disposition-Notification-To",
 				 phrase, mailbox);
 		if (bcc_message)
@@ -1599,27 +1718,54 @@
 		g_string_append_c(str, ' ');
 	    g_string_append_printf(str, "<%s>", (gchar *) list->data);
 	} while ((list = list->next) != NULL);
+#ifndef HAVE_GMIME_2_4
 	g_mime_message_set_header(msg, "References", str->str);
+#else /* HAVE_GMIME_2_4 */
+	g_mime_object_set_header(GMIME_OBJECT(msg), "References", str->str);
+#endif /* HAVE_GMIME_2_4 */
 	g_string_free(str, TRUE);
     }
 
     if (message->in_reply_to)
 	/* There's no specific header function for In-Reply-To */
+#ifndef HAVE_GMIME_2_4
 	g_mime_message_set_header(msg, "In-Reply-To",
+#else /* HAVE_GMIME_2_4 */
+	g_mime_object_set_header(GMIME_OBJECT(msg), "In-Reply-To",
+#endif /* HAVE_GMIME_2_4 */
 				  message->in_reply_to->data);
 }
 
 #ifdef HAVE_GPGME
 static GList *
+#ifndef HAVE_GMIME_2_4
 get_mailbox_names(GList *list, const InternetAddressList *address_list)
+#else /* HAVE_GMIME_2_4 */
+get_mailbox_names(GList *list, InternetAddressList *address_list)
+#endif /* HAVE_GMIME_2_4 */
 {
+#ifndef HAVE_GMIME_2_4
     for (; address_list; address_list = address_list->next) {
 	InternetAddress *ia = address_list->address;
+#else /* HAVE_GMIME_2_4 */
+    gint i;
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
 	if (ia->type == INTERNET_ADDRESS_NAME)
 	    list = g_list_append(list, g_strdup(ia->value.addr));
 	else if (ia->type == INTERNET_ADDRESS_GROUP)
 	    list = get_mailbox_names(list, ia->value.members);
+#else /* HAVE_GMIME_2_4 */
+    for (i = 0; i < internet_address_list_length(address_list); i++) {
+	InternetAddress *ia =
+            internet_address_list_get_address(address_list, i);
+
+	if (INTERNET_ADDRESS_IS_MAILBOX(ia))
+	    list = g_list_append(list, g_strdup(((InternetAddressMailbox *) ia)->addr));
+	else 
+	    list = get_mailbox_names(list, ((InternetAddressGroup *) ia)->members);
+#endif /* HAVE_GMIME_2_4 */
     }
 
     return list;
@@ -1680,6 +1826,9 @@
     GMimeObject *mime_root = NULL;
     GMimeMessage *mime_message;
     LibBalsaMessageBody *body;
+#ifdef HAVE_GMIME_2_4
+    InternetAddressList *recipients;
+#endif /* HAVE_GMIME_2_4 */
     gchar *tmp;
     GList *list;
     GtkWindow * parent;
@@ -1707,8 +1856,13 @@
 		    g_mime_content_type_new("message", "external-body");
 		mime_part=g_mime_object_new_type("message", "external-body");
 		g_mime_object_set_content_type(mime_part, content_type);
+#ifndef HAVE_GMIME_2_4
 		g_mime_part_set_encoding(GMIME_PART(mime_part),
 			                 GMIME_PART_ENCODING_7BIT);
+#else /* HAVE_GMIME_2_4 */
+		g_mime_part_set_content_encoding(GMIME_PART(mime_part),
+			                 GMIME_CONTENT_ENCODING_7BIT);
+#endif /* HAVE_GMIME_2_4 */
 		if (body->filename && !strncmp(body->filename, "URL", 3)) {
 		    g_mime_object_set_content_type_parameter(mime_part,
 					     "access-type", "URL");
@@ -1781,13 +1935,22 @@
 		mime_part =
 		    GMIME_OBJECT(g_mime_part_new_with_type(mime_type[0],
 				                           mime_type[1]));
+#ifndef HAVE_GMIME_2_4
 		g_mime_part_set_content_disposition(GMIME_PART(mime_part),
+#else /* HAVE_GMIME_2_4 */
+		g_mime_object_set_disposition(mime_part,
+#endif /* HAVE_GMIME_2_4 */
 			body->attach_mode == LIBBALSA_ATTACH_AS_INLINE ?
 			GMIME_DISPOSITION_INLINE : GMIME_DISPOSITION_ATTACHMENT);
 		if(strcasecmp(mime_type[0],"text") != 0)
 		{
+#ifndef HAVE_GMIME_2_4
 		    g_mime_part_set_encoding(GMIME_PART(mime_part),
 			    GMIME_PART_ENCODING_BASE64);
+#else /* HAVE_GMIME_2_4 */
+		    g_mime_part_set_content_encoding(GMIME_PART(mime_part),
+			    GMIME_CONTENT_ENCODING_BASE64);
+#endif /* HAVE_GMIME_2_4 */
 		} else {
 		    /* is text */
 		    g_mime_object_set_content_type_parameter(mime_part,
@@ -1815,7 +1978,11 @@
 		    return LIBBALSA_MESSAGE_CREATE_ERROR;
 		}
 		content = g_mime_data_wrapper_new_with_stream(stream,
+#ifndef HAVE_GMIME_2_4
 			GMIME_PART_ENCODING_DEFAULT);
+#else /* HAVE_GMIME_2_4 */
+			GMIME_CONTENT_ENCODING_DEFAULT);
+#endif /* HAVE_GMIME_2_4 */
 		g_object_unref(stream);
 		g_mime_part_set_content_object(GMIME_PART(mime_part),
 			                       content);
@@ -1847,8 +2014,13 @@
 	}
 
 	if (mime_root) {
+#ifndef HAVE_GMIME_2_4
 	    g_mime_multipart_add_part(GMIME_MULTIPART(mime_root),
 				      GMIME_OBJECT(mime_part));
+#else /* HAVE_GMIME_2_4 */
+	    g_mime_multipart_add(GMIME_MULTIPART(mime_root),
+				 GMIME_OBJECT(mime_part));
+#endif /* HAVE_GMIME_2_4 */
 	    g_object_unref(G_OBJECT(mime_part));
 	} else {
 	    mime_root = mime_part;
@@ -1906,6 +2078,7 @@
     g_mime_message_set_date(mime_message, message->headers->date,
                             get_tz_offset(&message->headers->date));
 
+#ifndef HAVE_GMIME_2_4
     tmp = internet_address_list_to_string(message->headers->to_list, TRUE);
     g_mime_message_add_recipients_from_string(mime_message,
 					      GMIME_RECIPIENT_TYPE_TO, tmp);
@@ -1921,11 +2094,33 @@
 					      GMIME_RECIPIENT_TYPE_BCC, tmp);
     g_free(tmp);
 
+#else /* HAVE_GMIME_2_4 */
+    recipients = g_mime_message_get_recipients(mime_message,
+                                               GMIME_RECIPIENT_TYPE_TO);
+    internet_address_list_append(recipients, message->headers->to_list);
+    
+    recipients = g_mime_message_get_recipients(mime_message,
+                                               GMIME_RECIPIENT_TYPE_CC);
+    internet_address_list_append(recipients, message->headers->cc_list);
+    
+    recipients = g_mime_message_get_recipients(mime_message,
+                                               GMIME_RECIPIENT_TYPE_BCC);
+    internet_address_list_append(recipients, message->headers->bcc_list);
+    
+#endif /* HAVE_GMIME_2_4 */
     if (message->headers->dispnotify_to) {
+#ifndef HAVE_GMIME_2_4
         tmp = internet_address_to_string(message->headers->dispnotify_to->
                                          address, TRUE);
+#else /* HAVE_GMIME_2_4 */
+        tmp = internet_address_list_to_string(message->headers->dispnotify_to, TRUE);
+#endif /* HAVE_GMIME_2_4 */
 	if (tmp) {
+#ifndef HAVE_GMIME_2_4
 	    g_mime_message_add_header(mime_message,
+#else /* HAVE_GMIME_2_4 */
+	    g_mime_object_append_header(GMIME_OBJECT(mime_message),
+#endif /* HAVE_GMIME_2_4 */
 				      "Disposition-Notification-To", tmp);
 	    g_free(tmp);
 	}
@@ -1934,14 +2129,22 @@
     for (list = message->headers->user_hdrs; list; list = list->next) {
 	gchar **pair = list->data;
 	g_strchug(pair[1]);
+#ifndef HAVE_GMIME_2_4
 	g_mime_message_add_header(mime_message, pair[0], pair[1]);
+#else /* HAVE_GMIME_2_4 */
+	g_mime_object_append_header(GMIME_OBJECT(mime_message), pair[0], pair[1]);
+#endif /* HAVE_GMIME_2_4 */
 #if DEBUG_USER_HEADERS
         printf("adding header '%s:%s'\n", pair[0], pair[1]);
 #endif
     }
 
     tmp = g_strdup_printf("Balsa %s", VERSION);
+#ifndef HAVE_GMIME_2_4
     g_mime_message_add_header(mime_message, "X-Mailer", tmp);
+#else /* HAVE_GMIME_2_4 */
+    g_mime_object_append_header(GMIME_OBJECT(mime_message), "X-Mailer", tmp);
+#endif /* HAVE_GMIME_2_4 */
     g_free(tmp);
 
     message->mime_msg = mime_message;
@@ -1972,7 +2175,11 @@
 	gint i;
 
 	for (i = 0; extra_headers[i] && extra_headers[i + 1]; i += 2)
+#ifndef HAVE_GMIME_2_4
 	    g_mime_message_set_header(message->mime_msg, extra_headers[i],
+#else /* HAVE_GMIME_2_4 */
+	    g_mime_object_set_header(GMIME_OBJECT(message->mime_msg), extra_headers[i],
+#endif /* HAVE_GMIME_2_4 */
 				      extra_headers[i + 1]);
     }
 
@@ -2066,11 +2273,17 @@
 static const gchar *
 lb_send_from(LibBalsaMessage *message)
 {
+#ifndef HAVE_GMIME_2_4
     InternetAddress *ia = message->headers->from->address;
+#else /* HAVE_GMIME_2_4 */
+    InternetAddress *ia =
+        internet_address_list_get_address(message->headers->from, 0);
+#endif /* HAVE_GMIME_2_4 */
 
     if (message->force_key_id)
         return message->force_key_id;
     
+#ifndef HAVE_GMIME_2_4
     if (ia->type == INTERNET_ADDRESS_NONE)
 	return NULL;
     
@@ -2079,8 +2292,17 @@
 
     if (ia->type == INTERNET_ADDRESS_NONE)
 	return NULL;
+#else /* HAVE_GMIME_2_4 */
+    while (INTERNET_ADDRESS_IS_GROUP(ia))
+        ia = internet_address_list_get_address(((InternetAddressGroup *)
+                                                ia)->members, 0);
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
     return ia->value.addr;
+#else /* HAVE_GMIME_2_4 */
+    return ((InternetAddressMailbox *) ia)->addr;
+#endif /* HAVE_GMIME_2_4 */
 }
 
 static LibBalsaMsgCreateResult
@@ -2114,7 +2336,11 @@
 			                        message->headers->cc_list);
 		encrypt_for = get_mailbox_names(encrypt_for,
 					        message->headers->from);
+#ifndef HAVE_GMIME_2_4
 		if (message->headers->bcc_list)
+#else /* HAVE_GMIME_2_4 */
+		if (internet_address_list_length(message->headers->bcc_list) > 0)
+#endif /* HAVE_GMIME_2_4 */
 		    libbalsa_information(LIBBALSA_INFORMATION_WARNING,
 					 _("This message will not be encrypted for the BCC: recipient(s)."));
 
@@ -2195,7 +2421,11 @@
 						message->headers->cc_list);
 		encrypt_for = g_list_append(encrypt_for,
 					    g_strdup(lb_send_from(message)));
+#ifndef HAVE_GMIME_2_4
 		if (message->headers->bcc_list)
+#else /* HAVE_GMIME_2_4 */
+		if (internet_address_list_length(message->headers->bcc_list) > 0)
+#endif /* HAVE_GMIME_2_4 */
 		    libbalsa_information(LIBBALSA_INFORMATION_WARNING,
 					 _("This message will not be encrypted for the BCC: recipient(s)."));
 
Index: balsa/libbalsa/gmime-stream-gnome-vfs.h
===================================================================
--- balsa/libbalsa/gmime-stream-gnome-vfs.h	(revision 8017)
+++ balsa/libbalsa/gmime-stream-gnome-vfs.h	(working copy)
@@ -61,8 +61,13 @@
 
 GMimeStream *g_mime_stream_gvfs_new(GnomeVFSHandle * handle);
 GMimeStream *g_mime_stream_gvfs_new_with_bounds(GnomeVFSHandle * handle,
+#ifndef HAVE_GMIME_2_4
                                                 off_t start,
 						off_t end);
+#else /* HAVE_GMIME_2_4 */
+                                                gint64 start,
+						gint64 end);
+#endif /* HAVE_GMIME_2_4 */
 
 gboolean g_mime_stream_gvfs_get_owner(GMimeStreamGvfs * stream);
 void g_mime_stream_gvfs_set_owner(GMimeStreamGvfs * stream,
@@ -136,8 +141,13 @@
 
 GMimeStream *g_mime_stream_gvfs_new(GnomeVFSHandle * handle);
 GMimeStream *g_mime_stream_gvfs_new_with_bounds(GnomeVFSHandle * handle,
+#ifndef HAVE_GMIME_2_4
                                                 off_t start,
 						off_t end);
+#else /* HAVE_GMIME_2_4 */
+                                                gint64 start,
+						gint64 end);
+#endif /* HAVE_GMIME_2_4 */
 
 gboolean g_mime_stream_gvfs_get_owner(GMimeStreamGvfs * stream);
 void g_mime_stream_gvfs_set_owner(GMimeStreamGvfs * stream,
@@ -211,8 +221,13 @@
 
 GMimeStream *g_mime_stream_gvfs_new(GnomeVFSHandle * handle);
 GMimeStream *g_mime_stream_gvfs_new_with_bounds(GnomeVFSHandle * handle,
+#ifndef HAVE_GMIME_2_4
                                                 off_t start,
 						off_t end);
+#else /* HAVE_GMIME_2_4 */
+                                                gint64 start,
+						gint64 end);
+#endif /* HAVE_GMIME_2_4 */
 
 gboolean g_mime_stream_gvfs_get_owner(GMimeStreamGvfs * stream);
 void g_mime_stream_gvfs_set_owner(GMimeStreamGvfs * stream,
Index: balsa/libbalsa/mailbox_maildir.c
===================================================================
--- balsa/libbalsa/mailbox_maildir.c	(revision 8017)
+++ balsa/libbalsa/mailbox_maildir.c	(working copy)
@@ -911,10 +911,19 @@
 	return FALSE;
     out_stream = g_mime_stream_fs_new(fd);
 
+#ifndef HAVE_GMIME_2_4
     in_stream = g_mime_stream_filter_new_with_stream(stream);
+#else /* HAVE_GMIME_2_4 */
+    in_stream = g_mime_stream_filter_new(stream);
+#endif /* HAVE_GMIME_2_4 */
     crlffilter =
+#ifndef HAVE_GMIME_2_4
         g_mime_filter_crlf_new(GMIME_FILTER_CRLF_DECODE,
                                GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+        g_mime_filter_crlf_new(FALSE,
+                               FALSE);
+#endif /* HAVE_GMIME_2_4 */
     g_mime_stream_filter_add(GMIME_STREAM_FILTER(in_stream), crlffilter);
     g_object_unref(crlffilter);
  
Index: balsa/libbalsa/address-view.c
===================================================================
--- balsa/libbalsa/address-view.c	(revision 8017)
+++ balsa/libbalsa/address-view.c	(working copy)
@@ -227,7 +227,11 @@
     if (*prefix)
         match = lbav_get_matching_addresses(address_view, prefix, type);
     lbav_append_addresses(address_view, completion, match, prefix);
+#ifndef HAVE_GMIME_2_4
     g_list_foreach(match, (GFunc) internet_address_unref, NULL);
+#else /* HAVE_GMIME_2_4 */
+    g_list_foreach(match, (GFunc) g_object_unref, NULL);
+#endif /* HAVE_GMIME_2_4 */
     g_list_free(match);
 }
 
@@ -369,10 +373,20 @@
     GtkTreeModel *model =
         gtk_tree_view_get_model(GTK_TREE_VIEW(address_view));
     GtkListStore *address_store = GTK_LIST_STORE(model);
+#ifdef HAVE_GMIME_2_4
+    InternetAddress *ia;
+    gchar *name;
+#endif /* HAVE_GMIME_2_4 */
     guint type;
+#ifndef HAVE_GMIME_2_4
 
+#else /* HAVE_GMIME_2_4 */
+    int i;
+    
+#endif /* HAVE_GMIME_2_4 */
     gtk_tree_model_get(model, iter, ADDRESS_TYPE_COL, &type, -1);
 
+#ifndef HAVE_GMIME_2_4
     while (list) {
         InternetAddress *ia = list->address;
 
@@ -393,6 +407,25 @@
         }
 
         if ((list = list->next))
+#else /* HAVE_GMIME_2_4 */
+    for (i = 0; i < internet_address_list_length (list); i++) {
+        ia = internet_address_list_get_address (list, i);;
+	name = internet_address_to_string (ia, FALSE);
+	
+	libbalsa_utf8_sanitize(&name, address_view->fallback, NULL);
+	lbav_clean_text(name);
+	
+	gtk_list_store_set(address_store, iter,
+			   ADDRESS_TYPE_COL, type,
+			   ADDRESS_TYPESTRING_COL,
+			   _(lbav_type_string(address_view, type)),
+			   ADDRESS_NAME_COL, name,
+			   ADDRESS_ICON_COL, lbav_close_icon,
+			   -1);
+	g_free(name);
+	
+	if (i + 1 < internet_address_list_length (list))
+#endif /* HAVE_GMIME_2_4 */
             gtk_list_store_insert_after(address_store, iter, iter);
     }
 }
@@ -407,12 +440,25 @@
 lbav_add_from_string(LibBalsaAddressView * address_view,
                      GtkTreeIter * iter, const gchar * string)
 {
+#ifndef HAVE_GMIME_2_4
     InternetAddressList *list = internet_address_parse_string(string);
+#else /* HAVE_GMIME_2_4 */
+    InternetAddressList *list = internet_address_list_parse_string(string);
+    gboolean retval = internet_address_list_length(list) > 0;
+#endif /* HAVE_GMIME_2_4 */
 
     lbav_add_from_list(address_view, iter, list);
+#ifndef HAVE_GMIME_2_4
     internet_address_list_destroy(list);
+#else /* HAVE_GMIME_2_4 */
+    g_object_unref(list);
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
     return list != NULL;
+#else /* HAVE_GMIME_2_4 */
+    return retval;
+#endif /* HAVE_GMIME_2_4 */
 }
 
 /*
@@ -533,6 +579,7 @@
     }
 }
 
+#ifndef HAVE_GMIME_2_4
 /*
  *     Count addresses in an InternetAddressList
  */
@@ -551,6 +598,7 @@
     }
 }
 
+#endif /* ! HAVE_GMIME_2_4 */
 /*
  *     Find an address_type
  */
@@ -765,7 +813,11 @@
                 gtk_cell_editable_editing_done(GTK_CELL_EDITABLE(entry));
                 g_free(the_addr);
             }
+#ifndef HAVE_GMIME_2_4
             g_list_foreach(match, (GFunc) internet_address_unref, NULL);
+#else /* HAVE_GMIME_2_4 */
+            g_list_foreach(match, (GFunc) g_object_unref, NULL);
+#endif /* HAVE_GMIME_2_4 */
             g_list_free(match);
         }
     }
@@ -1190,7 +1242,11 @@
 
     lbav_remove(address_view, type);
 
+#ifndef HAVE_GMIME_2_4
     if (list) {
+#else /* HAVE_GMIME_2_4 */
+    if (list && internet_address_list_length(list) > 0) {
+#endif /* HAVE_GMIME_2_4 */
         GtkTreeModel *model =
             gtk_tree_view_get_model(GTK_TREE_VIEW(address_view));
         GtkListStore *address_store = GTK_LIST_STORE(model);
@@ -1213,28 +1269,47 @@
 gint
 libbalsa_address_view_n_addresses(LibBalsaAddressView * address_view)
 {
+#ifndef HAVE_GMIME_2_4
     gint addresses;
+#else /* HAVE_GMIME_2_4 */
+    gint addresses = 0;
+#endif /* HAVE_GMIME_2_4 */
     guint type;
 
     g_return_val_if_fail(LIBBALSA_IS_ADDRESS_VIEW(address_view), -1);
 
+#ifndef HAVE_GMIME_2_4
     addresses = 0;
+#endif /* ! HAVE_GMIME_2_4 */
     for (type = 0; type < address_view->n_types; type++) {
         InternetAddressList *list =
             libbalsa_address_view_get_list(address_view,
                                            lbav_type_string(address_view,
                                                             type));
+#ifndef HAVE_GMIME_2_4
         lbav_count_addresses_in_list(list, &addresses);
         internet_address_list_destroy(list);
+#else /* HAVE_GMIME_2_4 */
+        addresses += libbalsa_address_n_mailboxes_in_list(list);
+        g_object_unref(list);
+#endif /* HAVE_GMIME_2_4 */
     }
 
     return addresses;
 }
 
+#ifndef HAVE_GMIME_2_4
 /*
  *     Create InternetAddressList corresponding to the view content.
  *     The list must be destroyed using internet_address_list_destroy().
  */
+#else /* HAVE_GMIME_2_4 */
+/*
+ *     Create InternetAddressList corresponding to the view content.
+ *     The list, which is NULL only on error, must be destroyed using
+ *     g_object_unref().
+ */
+#endif /* HAVE_GMIME_2_4 */
 InternetAddressList *
 libbalsa_address_view_get_list(LibBalsaAddressView * address_view,
                                const gchar * address_type)
@@ -1252,7 +1327,11 @@
                          || type < address_view->n_types, NULL);
 
     model = gtk_tree_view_get_model(GTK_TREE_VIEW(address_view));
+#ifndef HAVE_GMIME_2_4
     address_list = NULL;
+#else /* HAVE_GMIME_2_4 */
+    address_list = internet_address_list_new();
+#endif /* HAVE_GMIME_2_4 */
     for (valid = gtk_tree_model_get_iter_first(model, &iter);
          valid; valid = gtk_tree_model_iter_next(model, &iter)) {
         guint this_type;
@@ -1263,6 +1342,7 @@
                            ADDRESS_NAME_COL, &name, -1);
 
         if (this_type == type && name && *name) {
+#ifndef HAVE_GMIME_2_4
             InternetAddressList *l, *tmp_list =
                 internet_address_parse_string(name);
             for (l = tmp_list; l; l = l->next) {
@@ -1272,6 +1352,12 @@
                         internet_address_list_append(address_list, ia);
             }
             internet_address_list_destroy(tmp_list);
+#else /* HAVE_GMIME_2_4 */
+            InternetAddressList *tmp_list =
+                internet_address_list_parse_string(name);
+            internet_address_list_append(address_list, tmp_list);
+            g_object_unref(tmp_list);
+#endif /* HAVE_GMIME_2_4 */
         }
         g_free(name);
     }
Index: balsa/libbalsa/gmime-part-rfc2440.c
===================================================================
--- balsa/libbalsa/gmime-part-rfc2440.c	(revision 8017)
+++ balsa/libbalsa/gmime-part-rfc2440.c	(working copy)
@@ -40,14 +40,25 @@
     /* try to get the content stream */
     wrapper = g_mime_part_get_content_object(part);
     g_return_val_if_fail(wrapper, GMIME_PART_RFC2440_NONE);
+#ifdef HAVE_GMIME_2_4
+
+#endif /* HAVE_GMIME_2_4 */
     stream = g_mime_data_wrapper_get_stream(wrapper);
+#ifndef HAVE_GMIME_2_4
     g_object_unref(wrapper);
     if (!stream)
         return retval;
     if ((slen = g_mime_stream_length(stream)) == -1) {
         g_object_unref(stream);
+#else /* HAVE_GMIME_2_4 */
+    if (!stream || (slen = g_mime_stream_length(stream)) < 0)
+#endif /* HAVE_GMIME_2_4 */
 	return retval;
+#ifndef HAVE_GMIME_2_4
     }
+#else /* HAVE_GMIME_2_4 */
+
+#endif /* HAVE_GMIME_2_4 */
     g_mime_stream_reset(stream);
 
     /* check if the complete stream fits in the buffer */
@@ -87,7 +98,9 @@
 	}
     }
 
+#ifndef HAVE_GMIME_2_4
     g_object_unref(stream);
+#endif /* ! HAVE_GMIME_2_4 */
     return retval;
 }
 
@@ -122,7 +135,9 @@
     wrapper = g_mime_part_get_content_object(part);
     g_return_val_if_fail(wrapper, -1); /* Incomplete part. */
     stream = g_mime_data_wrapper_get_stream(wrapper);
+#ifndef HAVE_GMIME_2_4
     g_object_unref(wrapper);
+#endif /* ! HAVE_GMIME_2_4 */
     g_mime_stream_reset(stream);
 
     /* construct the stream for the crypto output */
@@ -134,15 +149,25 @@
     ctx->singlepart_mode = TRUE;
     if (recipients == NULL)
 	result =
+#ifndef HAVE_GMIME_2_4
 	    g_mime_cipher_sign(GMIME_CIPHER_CONTEXT(ctx), sign_userid,
+#else /* HAVE_GMIME_2_4 */
+	    g_mime_cipher_context_sign(GMIME_CIPHER_CONTEXT(ctx), sign_userid,
+#endif /* HAVE_GMIME_2_4 */
 			       GMIME_CIPHER_HASH_DEFAULT, stream,
 			       cipherstream, err);
     else
 	result =
+#ifndef HAVE_GMIME_2_4
 	    g_mime_cipher_encrypt(GMIME_CIPHER_CONTEXT(ctx),
+#else /* HAVE_GMIME_2_4 */
+	    g_mime_cipher_context_encrypt(GMIME_CIPHER_CONTEXT(ctx),
+#endif /* HAVE_GMIME_2_4 */
 				  sign_userid != NULL, sign_userid,
 				  recipients, stream, cipherstream, err);
+#ifndef HAVE_GMIME_2_4
     g_object_unref(stream);
+#endif /* ! HAVE_GMIME_2_4 */
     if (result == -1) {
 	g_object_unref(cipherstream);
 	return -1;
@@ -178,15 +203,33 @@
      * and set the charset to us-ascii instead, as gpg added it's own armor.
      */
     if (recipients == NULL) {
+#ifndef HAVE_GMIME_2_4
 	if (g_mime_part_get_encoding(part) != GMIME_PART_ENCODING_BASE64)
 	    g_mime_part_set_encoding(part,
 				     GMIME_PART_ENCODING_QUOTEDPRINTABLE);
+#else /* HAVE_GMIME_2_4 */
+	if (g_mime_part_get_content_encoding(part) != GMIME_CONTENT_ENCODING_BASE64)
+	    g_mime_part_set_content_encoding(part,
+				     GMIME_CONTENT_ENCODING_QUOTEDPRINTABLE);
+#endif /* HAVE_GMIME_2_4 */
 	g_mime_data_wrapper_set_encoding(wrapper,
+#ifndef HAVE_GMIME_2_4
 					 GMIME_PART_ENCODING_DEFAULT);
+#else /* HAVE_GMIME_2_4 */
+					 GMIME_CONTENT_ENCODING_DEFAULT);
+#endif /* HAVE_GMIME_2_4 */
     } else {
+#ifndef HAVE_GMIME_2_4
 	g_mime_part_set_encoding(part, GMIME_PART_ENCODING_7BIT);
+#else /* HAVE_GMIME_2_4 */
+	g_mime_part_set_content_encoding(part, GMIME_CONTENT_ENCODING_7BIT);
+#endif /* HAVE_GMIME_2_4 */
 	g_mime_data_wrapper_set_encoding(wrapper,
+#ifndef HAVE_GMIME_2_4
 					 GMIME_PART_ENCODING_7BIT);
+#else /* HAVE_GMIME_2_4 */
+					 GMIME_CONTENT_ENCODING_7BIT);
+#endif /* HAVE_GMIME_2_4 */
 	g_mime_object_set_content_type_parameter(GMIME_OBJECT(part),
 						 "charset", "US-ASCII");
     }
@@ -210,7 +253,11 @@
 g_mime_part_rfc2440_verify(GMimePart * part,
 			   GMimeGpgmeContext * ctx, GError ** err)
 {
+#ifndef HAVE_GMIME_2_4
     GMimeStream *stream, *plainstream, *wrapper_stream;
+#else /* HAVE_GMIME_2_4 */
+    GMimeStream *stream, *plainstream;
+#endif /* HAVE_GMIME_2_4 */
     GMimeDataWrapper * wrapper;
     GMimeSignatureValidity *valid;
 
@@ -222,12 +269,18 @@
     /* get the raw content */
     wrapper = g_mime_part_get_content_object(GMIME_PART(part));
     g_return_val_if_fail(wrapper, NULL); /* Incomplete part. */
+#ifndef HAVE_GMIME_2_4
     wrapper_stream = g_mime_data_wrapper_get_stream(wrapper);
+#endif /* ! HAVE_GMIME_2_4 */
     stream = g_mime_stream_mem_new();
     g_mime_data_wrapper_write_to_stream(wrapper, stream);
+#ifndef HAVE_GMIME_2_4
     g_object_unref(wrapper_stream);
+#endif /* ! HAVE_GMIME_2_4 */
     g_mime_stream_reset(stream);
+#ifndef HAVE_GMIME_2_4
     g_object_unref(wrapper);
+#endif /* ! HAVE_GMIME_2_4 */
 
     /* construct the stream for the checked output */
     plainstream = g_mime_stream_mem_new();
@@ -235,10 +288,16 @@
     /* verify the signature */
     ctx->singlepart_mode = TRUE;
     valid =
+#ifndef HAVE_GMIME_2_4
 	g_mime_cipher_verify(GMIME_CIPHER_CONTEXT(ctx),
+#else /* HAVE_GMIME_2_4 */
+	g_mime_cipher_context_verify(GMIME_CIPHER_CONTEXT(ctx),
+#endif /* HAVE_GMIME_2_4 */
 			     GMIME_CIPHER_HASH_DEFAULT, stream,
 			     plainstream, err);
+#ifndef HAVE_GMIME_2_4
     g_object_unref(stream);
+#endif /* ! HAVE_GMIME_2_4 */
 
     /* upon success, replace the signed content by the checked one */
     if (valid) {
@@ -263,26 +322,49 @@
  * verified and the result is placed in ctx by the underlying gpgme
  * context.
  */
+#ifndef HAVE_GMIME_2_4
 int
+#else /* HAVE_GMIME_2_4 */
+GMimeSignatureValidity *
+#endif /* HAVE_GMIME_2_4 */
 g_mime_part_rfc2440_decrypt(GMimePart * part,
 			    GMimeGpgmeContext * ctx, GError ** err)
 {
     GMimeStream *stream, *plainstream;
     GMimeDataWrapper * wrapper;
+#ifndef HAVE_GMIME_2_4
     gint result;
+#else /* HAVE_GMIME_2_4 */
+    GMimeSignatureValidity *result;
+#endif /* HAVE_GMIME_2_4 */
     gchar *headbuf = g_malloc0(1024);
 
+#ifndef HAVE_GMIME_2_4
     g_return_val_if_fail(GMIME_IS_PART(part), -1);
     g_return_val_if_fail(GMIME_IS_GPGME_CONTEXT(ctx), -1);
+#else /* HAVE_GMIME_2_4 */
+    g_return_val_if_fail(GMIME_IS_PART(part), NULL);
+    g_return_val_if_fail(GMIME_IS_GPGME_CONTEXT(ctx), NULL);
+#endif /* HAVE_GMIME_2_4 */
     g_return_val_if_fail(GMIME_CIPHER_CONTEXT(ctx)->encrypt_protocol !=
+#ifndef HAVE_GMIME_2_4
 			 NULL, -1);
+#else /* HAVE_GMIME_2_4 */
+			 NULL, NULL);
+#endif /* HAVE_GMIME_2_4 */
 
     /* get the raw content */
     wrapper = g_mime_part_get_content_object(part);
+#ifndef HAVE_GMIME_2_4
     g_return_val_if_fail(wrapper, -1); /* Incomplete part. */
+#else /* HAVE_GMIME_2_4 */
+    g_return_val_if_fail(wrapper, NULL); /* Incomplete part. */
+#endif /* HAVE_GMIME_2_4 */
     stream = g_mime_stream_mem_new();
     g_mime_data_wrapper_write_to_stream(wrapper, stream);
+#ifndef HAVE_GMIME_2_4
     g_object_unref(wrapper);
+#endif /* ! HAVE_GMIME_2_4 */
 
     g_mime_stream_reset(stream);
     g_mime_stream_read(stream, headbuf, 1023);
@@ -293,19 +375,32 @@
 
     /* decrypt and (if possible) verify the input */
     result =
+#ifndef HAVE_GMIME_2_4
 	g_mime_cipher_decrypt(GMIME_CIPHER_CONTEXT(ctx), stream,
+#else /* HAVE_GMIME_2_4 */
+	g_mime_cipher_context_decrypt(GMIME_CIPHER_CONTEXT(ctx), stream,
+#endif /* HAVE_GMIME_2_4 */
 			      plainstream, err);
 
+#ifndef HAVE_GMIME_2_4
     if (result == 0) {
+#else /* HAVE_GMIME_2_4 */
+    if (result != NULL) {
+#endif /* HAVE_GMIME_2_4 */
 	GMimeStream *filter_stream;
 	GMimeStream *out_stream;
 	GMimeFilter *filter;
 	GMimeDataWrapper *wrapper = g_mime_data_wrapper_new();
 
 	/* strip crlf off encrypted stuff coming from Winbloze crap */
+#ifndef HAVE_GMIME_2_4
 	filter_stream = g_mime_stream_filter_new_with_stream(plainstream);
 	filter = g_mime_filter_crlf_new(GMIME_FILTER_CRLF_DECODE,
 					GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+	filter_stream = g_mime_stream_filter_new(plainstream);
+	filter = g_mime_filter_crlf_new(FALSE, FALSE);
+#endif /* HAVE_GMIME_2_4 */
 	g_mime_stream_filter_add(GMIME_STREAM_FILTER(filter_stream), filter);
 	g_object_unref(filter);
 
@@ -313,12 +408,18 @@
 	out_stream = g_mime_stream_mem_new();
 	g_mime_data_wrapper_set_stream(wrapper, out_stream);
 	g_mime_part_set_content_object(part, wrapper);
+#ifndef HAVE_GMIME_2_4
 	g_object_unref(wrapper);
+#endif /* ! HAVE_GMIME_2_4 */
 	g_mime_stream_reset(filter_stream);
 	g_mime_stream_write_to_stream(filter_stream, out_stream);
 	g_object_unref(filter_stream);
 
+#ifndef HAVE_GMIME_2_4
 	g_mime_part_set_encoding(part, GMIME_PART_ENCODING_8BIT);
+#else /* HAVE_GMIME_2_4 */
+	g_mime_part_set_content_encoding(part, GMIME_CONTENT_ENCODING_8BIT);
+#endif /* HAVE_GMIME_2_4 */
 
 	/*
  	 * Set the charset of the decrypted content to the RFC 2440 "Charset:"
Index: balsa/libbalsa/gmime-part-rfc2440.h
===================================================================
--- balsa/libbalsa/gmime-part-rfc2440.h	(revision 8017)
+++ balsa/libbalsa/gmime-part-rfc2440.h	(working copy)
@@ -56,8 +56,14 @@
 GMimeSignatureValidity *g_mime_part_rfc2440_verify(GMimePart * part,
 						   GMimeGpgmeContext * ctx,
 						   GError ** err);
+#ifndef HAVE_GMIME_2_4
 gint g_mime_part_rfc2440_decrypt(GMimePart * part,
 				 GMimeGpgmeContext * ctx, GError ** err);
+#else /* HAVE_GMIME_2_4 */
+GMimeSignatureValidity *g_mime_part_rfc2440_decrypt(GMimePart * part,
+                                                    GMimeGpgmeContext *
+                                                    ctx, GError ** err);
+#endif /* HAVE_GMIME_2_4 */
 
 #ifdef __cplusplus
 }
Index: balsa/libbalsa/address-book-text.c
===================================================================
--- balsa/libbalsa/address-book-text.c	(revision 8017)
+++ balsa/libbalsa/address-book-text.c	(working copy)
@@ -246,7 +246,11 @@
     if (!lbab_text_group_addresses || !lbab_text_group_addresses->next)
         return;
 
+#ifndef HAVE_GMIME_2_4
     ia = internet_address_new_group(group_name);
+#else /* HAVE_GMIME_2_4 */
+    ia = internet_address_group_new(group_name);
+#endif /* HAVE_GMIME_2_4 */
     for (l = lbab_text_group_addresses; l; l = l->next) {
         GList *mailbox;
         LibBalsaAddress *address = LIBBALSA_ADDRESS(l->data);
@@ -254,16 +258,27 @@
         for (mailbox = address->address_list; mailbox;
              mailbox = mailbox->next) {
             InternetAddress *member =
+#ifndef HAVE_GMIME_2_4
                 internet_address_new_name(address->full_name,
                                           mailbox->data);
             internet_address_add_member(ia, member);
             internet_address_unref(member);
+#else /* HAVE_GMIME_2_4 */
+                internet_address_mailbox_new(address->full_name,
+					     mailbox->data);
+            internet_address_group_add_member(ia, member);
+            g_object_unref(member);
+#endif /* HAVE_GMIME_2_4 */
         }
     }
     g_slist_free(lbab_text_group_addresses);
 
     cmp_data = completion_data_new(ia, NULL);
+#ifndef HAVE_GMIME_2_4
     internet_address_unref(ia);
+#else /* HAVE_GMIME_2_4 */
+    g_object_unref(ia);
+#endif /* HAVE_GMIME_2_4 */
     *completion_list = g_list_prepend(*completion_list, cmp_data);
 }
 #endif                          /* MAKE_GROUP_BY_ORGANIZATION */
@@ -352,28 +367,50 @@
             && LIBBALSA_ADDRESS_BOOK(ab_text)->dist_list_mode) {
             /* Create a group address. */
             InternetAddress *ia =
+#ifndef HAVE_GMIME_2_4
                 internet_address_new_group(address->full_name);
+#else /* HAVE_GMIME_2_4 */
+                internet_address_group_new(address->full_name);
+#endif /* HAVE_GMIME_2_4 */
 
             for (l = address->address_list; l; l = l->next) {
                 InternetAddress *member =
+#ifndef HAVE_GMIME_2_4
                     internet_address_new_name(NULL, l->data);
                 internet_address_add_member(ia, member);
                 internet_address_unref(member);
+#else /* HAVE_GMIME_2_4 */
+                    internet_address_mailbox_new(NULL, l->data);
+                internet_address_group_add_member((InternetAddressGroup *)ia, member);
+                g_object_unref(member);
+#endif /* HAVE_GMIME_2_4 */
             }
             cmp_data = completion_data_new(ia, address->nick_name);
             completion_list = g_list_prepend(completion_list, cmp_data);
+#ifndef HAVE_GMIME_2_4
             internet_address_unref(ia);
+#else /* HAVE_GMIME_2_4 */
+            g_object_unref(ia);
+#endif /* HAVE_GMIME_2_4 */
         } else {
             /* Create name addresses. */
             GList *l;
 
             for (l = address->address_list; l; l = l->next) {
                 InternetAddress *ia =
+#ifndef HAVE_GMIME_2_4
                     internet_address_new_name(address->full_name, l->data);
+#else /* HAVE_GMIME_2_4 */
+                    internet_address_mailbox_new(address->full_name, l->data);
+#endif /* HAVE_GMIME_2_4 */
                 cmp_data = completion_data_new(ia, address->nick_name);
                 completion_list =
                     g_list_prepend(completion_list, cmp_data);
+#ifndef HAVE_GMIME_2_4
                 internet_address_unref(ia);
+#else /* HAVE_GMIME_2_4 */
+                g_object_unref(ia);
+#endif /* HAVE_GMIME_2_4 */
             }
         }
 
@@ -728,7 +765,11 @@
          g_completion_complete(ab_text->name_complete, (gchar *) prefix,
                                new_prefix); list; list = list->next) {
         InternetAddress *ia = ((CompletionData *) list->data)->ia;
+#ifndef HAVE_GMIME_2_4
         internet_address_ref(ia);
+#else /* HAVE_GMIME_2_4 */
+        g_object_ref(ia);
+#endif /* HAVE_GMIME_2_4 */
         res = g_list_prepend(res, ia);
     }
 
Index: balsa/libbalsa/mailbox_imap.c
===================================================================
--- balsa/libbalsa/mailbox_imap.c	(revision 8017)
+++ balsa/libbalsa/mailbox_imap.c	(working copy)
@@ -1798,10 +1798,13 @@
     if (!addr || (addr->name==NULL && addr->addr_spec==NULL))
        return NULL;
 
+#ifndef HAVE_GMIME_2_4
     address = internet_address_new();
 
+#endif /* ! HAVE_GMIME_2_4 */
     /* it will be owned by the caller */
 
+#ifndef HAVE_GMIME_2_4
     if (addr->name) {
 	gchar *tmp =
 #if HAVE_GMIME_2_2_5
@@ -1812,7 +1815,9 @@
 	internet_address_set_name(address, tmp);
 	g_free(tmp);
     }
+#endif /* ! HAVE_GMIME_2_4 */
     if (addr->addr_spec) {
+#ifndef HAVE_GMIME_2_4
 	gchar *tmp =
 #if HAVE_GMIME_2_2_5
 	    g_mime_utils_header_decode_text(addr->addr_spec);
@@ -1821,16 +1826,42 @@
 #endif /* HAVE_GMIME_2_2_5 */
 	internet_address_set_addr(address, tmp);
 	g_free(tmp);
+#else /* HAVE_GMIME_2_4 */
+        gchar *tmp = g_mime_utils_header_decode_text(addr->addr_spec);
+        address = internet_address_mailbox_new(NULL, tmp);
+        g_free(tmp);
+        if (addr->name) {
+            tmp = g_mime_utils_header_decode_text(addr->name);
+            internet_address_set_name(address, tmp);
+            g_free(tmp);
+        }
+#endif /* HAVE_GMIME_2_4 */
     } else {
         /* Begin group */
+#ifndef HAVE_GMIME_2_4
         internet_address_set_group
             (address,
+#else /* HAVE_GMIME_2_4 */
+        gchar *tmp = g_mime_utils_header_decode_text(addr->name);
+        address = internet_address_group_new(tmp);
+        g_free(tmp);
+
+        internet_address_group_set_members
+            (INTERNET_ADDRESS_GROUP(address),
+#endif /* HAVE_GMIME_2_4 */
              internet_address_new_list_from_imap_address_list(addr->next));
         /* Skip to end of group */
+#ifndef HAVE_GMIME_2_4
         while (addr->next && (addr->name || addr->addr_spec))
+#else /* HAVE_GMIME_2_4 */
+        while (addr && addr->addr_spec)
+#endif /* HAVE_GMIME_2_4 */
             addr = addr->next;
         *list = addr;
     }
+#ifdef HAVE_GMIME_2_4
+    
+#endif /* HAVE_GMIME_2_4 */
     return address;
 }
 
@@ -1838,13 +1869,22 @@
 internet_address_new_list_from_imap_address_list(ImapAddress *list)
 {
     InternetAddress *addr;
+#ifndef HAVE_GMIME_2_4
     InternetAddressList *res = NULL;
+#else /* HAVE_GMIME_2_4 */
+    InternetAddressList *res = internet_address_list_new();
+#endif /* HAVE_GMIME_2_4 */
 
     for (; list; list = list->next) {
        addr = internet_address_new_from_imap_address(&list);
        if (addr) {
+#ifndef HAVE_GMIME_2_4
            res = internet_address_list_append(res, addr);
 	   internet_address_unref(addr);
+#else /* HAVE_GMIME_2_4 */
+           internet_address_list_add(res, addr);
+	   g_object_unref(addr);
+#endif /* HAVE_GMIME_2_4 */
        }
     }
     return res;
@@ -1867,13 +1907,19 @@
 	internet_address_new_list_from_imap_address_list(envelope->bcc);
 
     if(is_embedded) {
+#ifndef HAVE_GMIME_2_4
+#if HAVE_GMIME_2_2_5
         headers->subject =
-#if HAVE_GMIME_2_2_5
             g_mime_utils_header_decode_text(envelope->subject);
 #else  /* HAVE_GMIME_2_2_5 */
+        headers->subject =
             g_mime_utils_header_decode_text((unsigned char *) envelope->
                                             subject);
 #endif /* HAVE_GMIME_2_2_5 */
+#else /* ! HAVE_GMIME_2_4 */
+        headers->subject =
+            g_mime_utils_header_decode_text(envelope->subject);
+#endif /* ! HAVE_GMIME_2_4 */
         libbalsa_utf8_sanitize(&headers->subject, TRUE, NULL);
     }
 }
@@ -1991,12 +2037,18 @@
     str = imap_body_get_dsp_param(imap_body, "filename");
     if(!str) str = imap_body_get_param(imap_body, "name");
     if(str) {
+#ifndef HAVE_GMIME_2_4
+#if HAVE_GMIME_2_2_5
         lbbody->filename  =
-#if HAVE_GMIME_2_2_5
 	    g_mime_utils_header_decode_text(str);
 #else  /* HAVE_GMIME_2_2_5 */
+        lbbody->filename  =
 	    g_mime_utils_header_decode_text((unsigned char *) str);
 #endif /* HAVE_GMIME_2_2_5 */
+#else /* ! HAVE_GMIME_2_4 */
+        lbbody->filename  =
+	    g_mime_utils_header_decode_text(str);
+#endif /* ! HAVE_GMIME_2_4 */
         libbalsa_utf8_sanitize(&lbbody->filename, TRUE, NULL);
     }
     lbbody->charset   = g_strdup(imap_body_get_param(imap_body, "charset"));
@@ -2038,11 +2090,19 @@
             return FALSE;
 
         stream = g_mime_stream_fs_new(fd);
+#ifndef HAVE_GMIME_2_4
         fstream = g_mime_stream_filter_new_with_stream(stream);
+#else /* HAVE_GMIME_2_4 */
+        fstream = g_mime_stream_filter_new(stream);
+#endif /* HAVE_GMIME_2_4 */
         g_object_unref(stream);
 
+#ifndef HAVE_GMIME_2_4
         filter = g_mime_filter_crlf_new(GMIME_FILTER_CRLF_DECODE,
                                         GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+        filter = g_mime_filter_crlf_new(FALSE, FALSE);
+#endif /* HAVE_GMIME_2_4 */
         g_mime_stream_filter_add(GMIME_STREAM_FILTER(fstream), filter);
         g_object_unref(filter);
 
@@ -2442,7 +2502,11 @@
                 part->mime_part = GMIME_OBJECT(g_mime_multipart_new());
             g_mime_object_set_content_type(part->mime_part, type);
         } else {
+#ifndef HAVE_GMIME_2_4
             g_mime_content_type_destroy(type);
+#else /* HAVE_GMIME_2_4 */
+            g_object_unref(type);
+#endif /* HAVE_GMIME_2_4 */
             if (!lbm_imap_get_msg_part_from_cache(msg, part, err))
                 return FALSE;
         }
@@ -2451,8 +2515,13 @@
     if (parent_part) {
         /* GMime will unref and so will we. */
         g_object_ref(part->mime_part);
+#ifndef HAVE_GMIME_2_4
 	g_mime_multipart_add_part(GMIME_MULTIPART(parent_part),
                                   part->mime_part);
+#else /* HAVE_GMIME_2_4 */
+	g_mime_multipart_add(GMIME_MULTIPART(parent_part),
+			     part->mime_part);
+#endif /* HAVE_GMIME_2_4 */
     }
 
     if (GMIME_IS_MULTIPART_SIGNED(part->mime_part)
@@ -2581,11 +2650,20 @@
 	if (flags & LIBBALSA_MESSAGE_FLAG_REPLIED)
 	    IMSG_FLAG_SET(imap_flags, IMSGF_ANSWERED);
 
+#ifndef HAVE_GMIME_2_4
 	tmpstream = g_mime_stream_filter_new_with_stream(stream);
+#else /* HAVE_GMIME_2_4 */
+	tmpstream = g_mime_stream_filter_new(stream);
+#endif /* HAVE_GMIME_2_4 */
 
 	crlffilter =
+#ifndef HAVE_GMIME_2_4
 	    g_mime_filter_crlf_new(GMIME_FILTER_CRLF_ENCODE,
 				   GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+	    g_mime_filter_crlf_new(TRUE,
+				   FALSE);
+#endif /* HAVE_GMIME_2_4 */
 	g_mime_stream_filter_add(GMIME_STREAM_FILTER(tmpstream), crlffilter);
 	g_object_unref(crlffilter);
 
@@ -2706,11 +2784,20 @@
 	if (flags & LIBBALSA_MESSAGE_FLAG_REPLIED)
 	    IMSG_FLAG_SET(imap_flags, IMSGF_ANSWERED);
 
+#ifndef HAVE_GMIME_2_4
 	tmpstream = g_mime_stream_filter_new_with_stream(stream);
+#else /* HAVE_GMIME_2_4 */
+	tmpstream = g_mime_stream_filter_new(stream);
+#endif /* HAVE_GMIME_2_4 */
 
 	crlffilter =
+#ifndef HAVE_GMIME_2_4
 	    g_mime_filter_crlf_new(GMIME_FILTER_CRLF_ENCODE,
 				   GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+	    g_mime_filter_crlf_new(TRUE,
+				   FALSE);
+#endif /* HAVE_GMIME_2_4 */
 	g_mime_stream_filter_add(GMIME_STREAM_FILTER(tmpstream), crlffilter);
 	g_object_unref(crlffilter);
 
Index: balsa/libbalsa/mailbox_local.c
===================================================================
--- balsa/libbalsa/mailbox_local.c	(revision 8017)
+++ balsa/libbalsa/mailbox_local.c	(working copy)
@@ -1035,8 +1035,18 @@
     info->message_id = g_strdup(message->message_id);
     info->refs_for_threading =
         libbalsa_message_refs_for_threading(message);
+#ifndef HAVE_GMIME_2_4
     info->sender =
         internet_address_list_to_string(message->headers->from, FALSE);
+#else /* HAVE_GMIME_2_4 */
+
+    info->sender = NULL;
+    if (message->headers->from)
+        info->sender =
+            internet_address_list_to_string(message->headers->from, FALSE);
+    if (!info->sender)
+        info->sender = g_strdup("");
+#endif /* HAVE_GMIME_2_4 */
 }
 
 void
Index: balsa/libbalsa/libbalsa.c
===================================================================
--- balsa/libbalsa/libbalsa.c	(revision 8017)
+++ libbalsa/libbalsa.c	(working copy)
@@ -627,7 +627,16 @@
 libbalsa_abort_on_timeout(const char *host)
 {  /* It appears not to be entirely thread safe... Some locks do not
       get released as they should be. */
+#ifndef HAVE_GMIME_2_4
     return libbalsa_ask(ask_timeout_real, (void*)host) != 0; 
+#else /* HAVE_GMIME_2_4 */
+    char *hostname;
+
+    hostname = g_alloca (strlen (host) + 1);
+    strcpy (hostname, host);
+    
+    return libbalsa_ask(ask_timeout_real, hostname) != 0; 
+#endif /* HAVE_GMIME_2_4 */
 }
 
 
@@ -834,9 +843,17 @@
     GtkWidget *image = NULL;
 
     stream = g_mime_stream_mem_new();
+#ifndef HAVE_GMIME_2_4
     stream_filter = g_mime_stream_filter_new_with_stream(stream);
+#else /* HAVE_GMIME_2_4 */
+    stream_filter = g_mime_stream_filter_new(stream);
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
     filter = g_mime_filter_basic_new_type(GMIME_FILTER_BASIC_BASE64_DEC);
+#else /* HAVE_GMIME_2_4 */
+    filter = g_mime_filter_basic_new(GMIME_CONTENT_ENCODING_BASE64, FALSE);
+#endif /* HAVE_GMIME_2_4 */
     g_mime_stream_filter_add(GMIME_STREAM_FILTER(stream_filter), filter);
     g_object_unref(filter);
 
Index: balsa/libbalsa/address.c
===================================================================
--- balsa/libbalsa/address.c	(revision 8017)
+++ balsa/libbalsa/address.c	(working copy)
@@ -207,14 +207,22 @@
     gint len = strlen(str);
     gchar * newstr = g_malloc0(len + 1);
     int state = 0;
+#ifndef HAVE_GMIME_2_4
 #if HAVE_GMIME_2_2_5
     guint32 save;
 #else  /* HAVE_GMIME_2_2_5 */
     int save;
 #endif /* HAVE_GMIME_2_2_5 */
+#else /* ! HAVE_GMIME_2_4 */
+    guint32 save;
+#endif /* ! HAVE_GMIME_2_4 */
 
     /* qp decode the input string */
+#ifndef HAVE_GMIME_2_4
     g_mime_utils_quoted_decode_step((unsigned char *) str, len,
+#else /* HAVE_GMIME_2_4 */
+    g_mime_encoding_quoted_decode_step((unsigned char *) str, len,
+#endif /* HAVE_GMIME_2_4 */
 				    (unsigned char *) newstr, &state, &save);
 
     /* free input and return new string */
@@ -232,7 +240,11 @@
     guint32 save;
 
     /* base64 decode the input string */
+#ifndef HAVE_GMIME_2_4
     g_mime_utils_base64_decode_step((unsigned char *) str, len,
+#else /* HAVE_GMIME_2_4 */
+    g_mime_encoding_base64_decode_step((unsigned char *) str, len,
+#endif /* HAVE_GMIME_2_4 */
 				    (unsigned char *) newstr, &state, &save);
 
     /* free input and return new string */
@@ -553,9 +565,17 @@
     InternetAddress *ia;
     gchar *new_str;
 
+#ifndef HAVE_GMIME_2_4
     ia = internet_address_new_name(full_name, address);
+#else /* HAVE_GMIME_2_4 */
+    ia = internet_address_mailbox_new(full_name, address);
+#endif /* HAVE_GMIME_2_4 */
     new_str = internet_address_to_string(ia, FALSE);
+#ifndef HAVE_GMIME_2_4
     internet_address_unref(ia);
+#else /* HAVE_GMIME_2_4 */
+    g_object_unref(ia);
+#endif /* HAVE_GMIME_2_4 */
 
     return new_str;
 }
@@ -566,16 +586,30 @@
     InternetAddress *ia;
     gchar *res;
 
+#ifndef HAVE_GMIME_2_4
     ia = internet_address_new_group(full_name);
+#else /* HAVE_GMIME_2_4 */
+    ia = internet_address_group_new(full_name);
+#endif /* HAVE_GMIME_2_4 */
     for (; addr_list; addr_list = addr_list->next) {
 	InternetAddress *member;
 
+#ifndef HAVE_GMIME_2_4
 	member = internet_address_new_name(NULL, addr_list->data);
 	internet_address_add_member(ia, member);
 	internet_address_unref(member);
+#else /* HAVE_GMIME_2_4 */
+	member = internet_address_mailbox_new(NULL, addr_list->data);
+	internet_address_group_add_member(INTERNET_ADDRESS_GROUP(ia), member);
+	g_object_unref(member);
+#endif /* HAVE_GMIME_2_4 */
     }
     res = internet_address_to_string(ia, FALSE);
+#ifndef HAVE_GMIME_2_4
     internet_address_unref(ia);
+#else /* HAVE_GMIME_2_4 */
+    g_object_unref(ia);
+#endif /* HAVE_GMIME_2_4 */
 
     return res;
 }
@@ -613,24 +647,51 @@
 
 /* Helper */
 static const gchar *
+#ifndef HAVE_GMIME_2_4
 lba_get_name_or_mailbox(const InternetAddressList * address_list,
+#else /* HAVE_GMIME_2_4 */
+lba_get_name_or_mailbox(InternetAddressList * address_list,
+#endif /* HAVE_GMIME_2_4 */
                         gboolean get_name, gboolean in_group)
 {
     const gchar *retval = NULL;
+#ifdef HAVE_GMIME_2_4
+    InternetAddress *ia;
+    gint i, len;
+    
+    if (address_list == NULL)
+	return NULL;
+#endif /* HAVE_GMIME_2_4 */
 
+#ifndef HAVE_GMIME_2_4
     for (; address_list; address_list = address_list->next) {
         InternetAddress *ia = address_list->address;
+#else /* HAVE_GMIME_2_4 */
+    len = internet_address_list_length(address_list);
+    for (i = 0; i < len; i++) {
+        ia = internet_address_list_get_address (address_list, i);
+#endif /* HAVE_GMIME_2_4 */
 
         if (get_name && ia->name && *ia->name)
             return ia->name;
 
+#ifndef HAVE_GMIME_2_4
         if (ia->type == INTERNET_ADDRESS_NAME)
             retval = ia->value.addr;
         else if (ia->type == INTERNET_ADDRESS_GROUP) {
+#else /* HAVE_GMIME_2_4 */
+        if (INTERNET_ADDRESS_IS_MAILBOX (ia))
+            retval = INTERNET_ADDRESS_MAILBOX (ia)->addr;
+        else {
+#endif /* HAVE_GMIME_2_4 */
             if (in_group)
                 g_message("Ignoring nested group address");
             else
+#ifndef HAVE_GMIME_2_4
                 retval = lba_get_name_or_mailbox(ia->value.members,
+#else /* HAVE_GMIME_2_4 */
+                retval = lba_get_name_or_mailbox(INTERNET_ADDRESS_GROUP(ia)->members,
+#endif /* HAVE_GMIME_2_4 */
 			get_name, TRUE);
         }
         if (retval)
@@ -642,20 +703,54 @@
 
 /* Get either a name or a mailbox from an InternetAddressList. */
 const gchar *
+#ifndef HAVE_GMIME_2_4
 libbalsa_address_get_name_from_list(const InternetAddressList *
                                     address_list)
+#else /* HAVE_GMIME_2_4 */
+libbalsa_address_get_name_from_list(InternetAddressList *address_list)
+#endif /* HAVE_GMIME_2_4 */
 {
     return lba_get_name_or_mailbox(address_list, TRUE, FALSE);
 }
 
 /* Get a mailbox from an InternetAddressList. */
 const gchar *
+#ifndef HAVE_GMIME_2_4
 libbalsa_address_get_mailbox_from_list(const InternetAddressList *
                                        address_list)
+#else /* HAVE_GMIME_2_4 */
+libbalsa_address_get_mailbox_from_list(InternetAddressList *address_list)
+#endif /* HAVE_GMIME_2_4 */
 {
     return lba_get_name_or_mailbox(address_list, FALSE, FALSE);
 }
 
+#ifdef HAVE_GMIME_2_4
+/* Number of individual mailboxes in an InternetAddressList. */
+gint
+libbalsa_address_n_mailboxes_in_list(InternetAddressList * address_list)
+{
+    gint i, len, n_mailboxes = 0;
+
+    g_return_val_if_fail(IS_INTERNET_ADDRESS_LIST(address_list), -1);
+
+    len = internet_address_list_length(address_list);
+    for (i = 0; i < len; i++) {
+        const InternetAddress *ia =
+            internet_address_list_get_address(address_list, i);
+
+        if (INTERNET_ADDRESS_IS_MAILBOX(ia))
+            ++n_mailboxes;
+        else
+            n_mailboxes +=
+                libbalsa_address_n_mailboxes_in_list(INTERNET_ADDRESS_GROUP
+                                                     (ia)->members);
+    }
+
+    return n_mailboxes;
+}
+
+#endif /* HAVE_GMIME_2_4 */
 /* =================================================================== */
 /*                                UI PART                              */
 /* =================================================================== */
Index: balsa/libbalsa/address.h
===================================================================
--- balsa/libbalsa/address.h	(revision 8017)
+++ balsa/libbalsa/address.h	(working copy)
@@ -95,11 +95,23 @@
 void libbalsa_address_set_copy(LibBalsaAddress *dest, LibBalsaAddress *src);
 gchar *libbalsa_address_to_gchar(LibBalsaAddress * address, gint n);
 
+#ifndef HAVE_GMIME_2_4
 const gchar *libbalsa_address_get_name_from_list(const InternetAddressList
+#else /* HAVE_GMIME_2_4 */
+const gchar *libbalsa_address_get_name_from_list(InternetAddressList
+#endif /* HAVE_GMIME_2_4 */
                                                  * address_list);
+#ifndef HAVE_GMIME_2_4
 const gchar *libbalsa_address_get_mailbox_from_list(const
                                                     InternetAddressList *
+#else /* HAVE_GMIME_2_4 */
+const gchar *libbalsa_address_get_mailbox_from_list(InternetAddressList *
+#endif /* HAVE_GMIME_2_4 */
                                                     address_list);
+#ifdef HAVE_GMIME_2_4
+gint libbalsa_address_n_mailboxes_in_list(InternetAddressList *
+                                          address_list);
+#endif /* HAVE_GMIME_2_4 */
 
 /* =================================================================== */
 /*                                UI PART                              */
Index: balsa/libbalsa/html.c
===================================================================
--- balsa/libbalsa/html.c	(revision 8017)
+++ balsa/libbalsa/html.c	(working copy)
@@ -789,7 +789,11 @@
     array = g_byte_array_new();
     g_mime_stream_mem_set_byte_array(GMIME_STREAM_MEM(stream), array);
 
+#ifndef HAVE_GMIME_2_4
     filter_stream = g_mime_stream_filter_new_with_stream(stream);
+#else /* HAVE_GMIME_2_4 */
+    filter_stream = g_mime_stream_filter_new(stream);
+#endif /* HAVE_GMIME_2_4 */
     g_object_unref(stream);
 
     filter = g_mime_filter_enriched_new(flags);
Index: balsa/libbalsa/address-book-extern.c
===================================================================
--- balsa/libbalsa/address-book-extern.c	(revision 8017)
+++ balsa/libbalsa/address-book-extern.c	(working copy)
@@ -369,7 +369,11 @@
         if(!name || !*name)
             name = _("No-Name");
         *res = g_list_prepend(*res,
+#ifndef HAVE_GMIME_2_4
                               internet_address_new_name(name, email));
+#else /* HAVE_GMIME_2_4 */
+                              internet_address_mailbox_new(name, email));
+#endif /* HAVE_GMIME_2_4 */
     }
 }
 
Index: balsa/libbalsa/gmime-application-pkcs7.c
===================================================================
--- balsa/libbalsa/gmime-application-pkcs7.c	(revision 8017)
+++ balsa/libbalsa/gmime-application-pkcs7.c	(working copy)
@@ -19,9 +19,7 @@
  * 02111-1307, USA.
  */
 
-#ifdef HAVE_CONFIG_H
 #include <config.h>
-#endif
 
 #include <string.h>
 
@@ -50,7 +48,11 @@
 static void
 sign_prepare (GMimeObject *mime_part)
 {
+#ifndef HAVE_GMIME_2_4
     GMimePartEncodingType encoding;
+#else /* HAVE_GMIME_2_4 */
+    GMimeContentEncoding encoding;
+#endif /* HAVE_GMIME_2_4 */
     GMimeObject *subpart;
 	
     if (GMIME_IS_MULTIPART (mime_part)) {
@@ -71,11 +73,21 @@
 	subpart = GMIME_MESSAGE_PART (mime_part)->message->mime_part;
 	sign_prepare (subpart);
     } else {
+#ifndef HAVE_GMIME_2_4
 	encoding = g_mime_part_get_encoding (GMIME_PART (mime_part));
+#else /* HAVE_GMIME_2_4 */
+	encoding = g_mime_part_get_content_encoding (GMIME_PART (mime_part));
+#endif /* HAVE_GMIME_2_4 */
 		
+#ifndef HAVE_GMIME_2_4
 	if (encoding != GMIME_PART_ENCODING_BASE64)
 	    g_mime_part_set_encoding (GMIME_PART (mime_part),
 				      GMIME_PART_ENCODING_QUOTEDPRINTABLE);
+#else /* HAVE_GMIME_2_4 */
+	if (encoding != GMIME_CONTENT_ENCODING_BASE64)
+	    g_mime_part_set_content_encoding (GMIME_PART (mime_part),
+				      GMIME_CONTENT_ENCODING_QUOTEDPRINTABLE);
+#endif /* HAVE_GMIME_2_4 */
     }
 }
 
@@ -105,7 +117,11 @@
 	
     /* get the cleartext */
     stream = g_mime_stream_mem_new ();
+#ifndef HAVE_GMIME_2_4
     filtered_stream = g_mime_stream_filter_new_with_stream (stream);
+#else /* HAVE_GMIME_2_4 */
+    filtered_stream = g_mime_stream_filter_new (stream);
+#endif /* HAVE_GMIME_2_4 */
 	
     /* See RFC 2633, Sect. 3.1- the following op's are "SHOULD", so we do it */
     from_filter = g_mime_filter_from_new (GMIME_FILTER_FROM_MODE_ARMOR);
@@ -117,9 +133,15 @@
     g_object_unref (filtered_stream);
     g_mime_stream_reset (stream);
 	
+#ifndef HAVE_GMIME_2_4
     filtered_stream = g_mime_stream_filter_new_with_stream (stream);
     crlf_filter = g_mime_filter_crlf_new (GMIME_FILTER_CRLF_ENCODE,
 					  GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+    filtered_stream = g_mime_stream_filter_new (stream);
+    crlf_filter = g_mime_filter_crlf_new (TRUE,
+					  FALSE);
+#endif /* HAVE_GMIME_2_4 */
     g_mime_stream_filter_add (GMIME_STREAM_FILTER (filtered_stream), crlf_filter);
     g_object_unref (crlf_filter);
 	
@@ -127,7 +149,11 @@
     sig_data_stream = g_mime_stream_mem_new ();
 	
     /* get the signed content */
+#ifndef HAVE_GMIME_2_4
     if (g_mime_cipher_sign (ctx, userid, GMIME_CIPHER_HASH_DEFAULT, filtered_stream, sig_data_stream, err) == -1) {
+#else /* HAVE_GMIME_2_4 */
+    if (g_mime_cipher_context_sign (ctx, userid, GMIME_CIPHER_HASH_DEFAULT, filtered_stream, sig_data_stream, err) == -1) {
+#endif /* HAVE_GMIME_2_4 */
 	g_object_unref (filtered_stream);
 	g_object_unref (sig_data_stream);
 	g_object_unref (stream);
@@ -144,8 +170,13 @@
     g_object_unref(sig_data_stream);
     g_mime_part_set_content_object(GMIME_PART(pkcs7), wrapper);
     g_mime_part_set_filename(GMIME_PART(pkcs7), "smime.p7m");
+#ifndef HAVE_GMIME_2_4
     g_mime_part_set_encoding(GMIME_PART(pkcs7),
 			     GMIME_PART_ENCODING_BASE64);
+#else /* HAVE_GMIME_2_4 */
+    g_mime_part_set_content_encoding(GMIME_PART(pkcs7),
+			     GMIME_CONTENT_ENCODING_BASE64);
+#endif /* HAVE_GMIME_2_4 */
     g_object_unref(wrapper);
 
     /* set the content-type params for this part */
@@ -198,18 +229,30 @@
     ciphertext = g_mime_stream_mem_new ();
     g_mime_data_wrapper_write_to_stream (wrapper, ciphertext);
     g_mime_stream_reset(ciphertext);
+#ifndef HAVE_GMIME_2_4
     g_object_unref(wrapper);
+#endif /* ! HAVE_GMIME_2_4 */
 
     stream = g_mime_stream_mem_new();
+#ifndef HAVE_GMIME_2_4
     filtered_stream = g_mime_stream_filter_new_with_stream(stream);
     crlf_filter = g_mime_filter_crlf_new(GMIME_FILTER_CRLF_DECODE,
 					 GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+    filtered_stream = g_mime_stream_filter_new(stream);
+    crlf_filter = g_mime_filter_crlf_new(FALSE,
+					 FALSE);
+#endif /* HAVE_GMIME_2_4 */
     g_mime_stream_filter_add(GMIME_STREAM_FILTER(filtered_stream),
 			     crlf_filter);
     g_object_unref(crlf_filter);
 
     /* get the cleartext */
+#ifndef HAVE_GMIME_2_4
     *validity = g_mime_cipher_verify(ctx, GMIME_CIPHER_HASH_DEFAULT,
+#else /* HAVE_GMIME_2_4 */
+    *validity = g_mime_cipher_context_verify(ctx, GMIME_CIPHER_HASH_DEFAULT,
+#endif /* HAVE_GMIME_2_4 */
 				     ciphertext, filtered_stream, err);
     if (!*validity) {
 	g_object_unref(filtered_stream);
@@ -264,10 +307,19 @@
 	
     /* get the cleartext */
     stream = g_mime_stream_mem_new ();
+#ifndef HAVE_GMIME_2_4
     filtered_stream = g_mime_stream_filter_new_with_stream (stream);
+#else /* HAVE_GMIME_2_4 */
+    filtered_stream = g_mime_stream_filter_new (stream);
+#endif /* HAVE_GMIME_2_4 */
 	
+#ifndef HAVE_GMIME_2_4
     crlf_filter = g_mime_filter_crlf_new (GMIME_FILTER_CRLF_ENCODE,
 					  GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+    crlf_filter = g_mime_filter_crlf_new (TRUE,
+					  FALSE);
+#endif /* HAVE_GMIME_2_4 */
     g_mime_stream_filter_add (GMIME_STREAM_FILTER (filtered_stream), crlf_filter);
     g_object_unref (crlf_filter);
 	
@@ -280,7 +332,11 @@
 	
     /* encrypt the content stream */
     ciphertext = g_mime_stream_mem_new ();
+#ifndef HAVE_GMIME_2_4
     if (g_mime_cipher_encrypt (ctx, FALSE, NULL, recipients, stream, ciphertext, err) == -1) {
+#else /* HAVE_GMIME_2_4 */
+    if (g_mime_cipher_context_encrypt (ctx, FALSE, NULL, recipients, stream, ciphertext, err) == -1) {
+#endif /* HAVE_GMIME_2_4 */
 	g_object_unref (ciphertext);
 	g_object_unref (stream);
 	return -1;
@@ -295,7 +351,11 @@
     g_object_unref(ciphertext);
     g_mime_part_set_content_object(GMIME_PART(pkcs7), wrapper);
     g_mime_part_set_filename(GMIME_PART(pkcs7), "smime.p7m");
+#ifndef HAVE_GMIME_2_4
     g_mime_part_set_encoding(GMIME_PART(pkcs7), GMIME_PART_ENCODING_BASE64);
+#else /* HAVE_GMIME_2_4 */
+    g_mime_part_set_content_encoding(GMIME_PART(pkcs7), GMIME_CONTENT_ENCODING_BASE64);
+#endif /* HAVE_GMIME_2_4 */
     g_object_unref(wrapper);
 
     /* set the content-type params for this part */
@@ -344,18 +404,30 @@
     ciphertext = g_mime_stream_mem_new();
     g_mime_data_wrapper_write_to_stream (wrapper, ciphertext);
     g_mime_stream_reset(ciphertext);
+#ifndef HAVE_GMIME_2_4
     g_object_unref(wrapper);
+#endif /* ! HAVE_GMIME_2_4 */
 
     stream = g_mime_stream_mem_new();
+#ifndef HAVE_GMIME_2_4
     filtered_stream = g_mime_stream_filter_new_with_stream(stream);
     crlf_filter = g_mime_filter_crlf_new(GMIME_FILTER_CRLF_DECODE,
 					 GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+    filtered_stream = g_mime_stream_filter_new(stream);
+    crlf_filter = g_mime_filter_crlf_new(FALSE,
+					 FALSE);
+#endif /* HAVE_GMIME_2_4 */
     g_mime_stream_filter_add(GMIME_STREAM_FILTER(filtered_stream),
 			     crlf_filter);
     g_object_unref(crlf_filter);
 
     /* get the cleartext */
+#ifndef HAVE_GMIME_2_4
     if (g_mime_cipher_decrypt(ctx, ciphertext, filtered_stream, err) == -1) {
+#else /* HAVE_GMIME_2_4 */
+    if (g_mime_cipher_context_decrypt(ctx, ciphertext, filtered_stream, err) == NULL) {
+#endif /* HAVE_GMIME_2_4 */
 	g_object_unref(filtered_stream);
 	g_object_unref(ciphertext);
 	g_object_unref(stream);
Index: balsa/libbalsa/identity.c
===================================================================
--- balsa/libbalsa/identity.c	(revision 8017)
+++ balsa/libbalsa/identity.c	(working copy)
@@ -98,7 +98,11 @@
 libbalsa_identity_init(LibBalsaIdentity* ident)
 {
     ident->identity_name = NULL;
+#ifndef HAVE_GMIME_2_4
     ident->ia = internet_address_new();
+#else /* HAVE_GMIME_2_4 */
+    ident->ia = NULL;
+#endif /* HAVE_GMIME_2_4 */
     ident->replyto = NULL;
     ident->domain = NULL;
     ident->bcc = NULL;
@@ -135,7 +139,12 @@
 {
     LibBalsaIdentity *ident = LIBBALSA_IDENTITY(object);
 
+#ifndef HAVE_GMIME_2_4
     internet_address_unref(ident->ia);
+#else /* HAVE_GMIME_2_4 */
+    if (ident->ia)
+	g_object_unref(ident->ia);
+#endif /* HAVE_GMIME_2_4 */
     g_free(ident->identity_name);
     g_free(ident->replyto);
     g_free(ident->domain);
@@ -203,7 +212,12 @@
 {
     g_return_if_fail(ident != NULL);
 
+#ifndef HAVE_GMIME_2_4
     internet_address_unref(ident->ia);
+#else /* HAVE_GMIME_2_4 */
+    if (ident->ia)
+	g_object_unref(ident->ia);
+#endif /* HAVE_GMIME_2_4 */
     ident->ia = ia;
 }
 
@@ -1469,16 +1483,31 @@
     g_free(id->identity_name); id->identity_name = text;
     set_identity_name_in_tree(GTK_TREE_VIEW(tree), id, text);
 
+#ifndef HAVE_GMIME_2_4
     text = ident_dialog_get_text(dlg, "identity-fullname");
     g_return_val_if_fail(text != NULL, FALSE);
     ia = internet_address_new();
     internet_address_set_name(ia, text);
     g_free(text);
     
+#endif /* ! HAVE_GMIME_2_4 */
     text = ident_dialog_get_text(dlg, "identity-address");
+#ifndef HAVE_GMIME_2_4
     internet_address_set_addr(ia, text);
+#else /* HAVE_GMIME_2_4 */
+    g_return_val_if_fail(text != NULL, FALSE);
+    ia = internet_address_mailbox_new(NULL, text);
+#endif /* HAVE_GMIME_2_4 */
     g_free(text);
+#ifdef HAVE_GMIME_2_4
+
+    text = ident_dialog_get_text(dlg, "identity-fullname");
+    internet_address_set_name(ia, text);
+#endif /* HAVE_GMIME_2_4 */
     libbalsa_identity_set_address(id, ia);
+#ifdef HAVE_GMIME_2_4
+    g_free(text);
+#endif /* HAVE_GMIME_2_4 */
 
     g_free(id->replyto);
     id->replyto         = ident_dialog_get_text(dlg, "identity-replyto");
@@ -1850,10 +1879,19 @@
 
     ident_dialog_update(dialog);
     display_frame_set_field(dialog, "identity-name", ident->identity_name);
+#ifndef HAVE_GMIME_2_4
     display_frame_set_field(dialog, "identity-fullname", ident->ia->name);
     if (ident->ia->type == INTERNET_ADDRESS_NAME)
+#else /* HAVE_GMIME_2_4 */
+    display_frame_set_field(dialog, "identity-fullname", ident->ia ? ident->ia->name : NULL);
+    if (ident->ia && INTERNET_ADDRESS_IS_MAILBOX (ident->ia))
+#endif /* HAVE_GMIME_2_4 */
         display_frame_set_field(dialog, "identity-address", 
+#ifndef HAVE_GMIME_2_4
                                 ident->ia->value.addr);
+#else /* HAVE_GMIME_2_4 */
+                                INTERNET_ADDRESS_MAILBOX(ident->ia)->addr);
+#endif /* HAVE_GMIME_2_4 */
     else
         display_frame_set_field(dialog, "identity-address", NULL);
     
@@ -1964,9 +2002,18 @@
 libbalsa_identity_new_config(const gchar* name)
 {
     LibBalsaIdentity* ident;
+#ifdef HAVE_GMIME_2_4
+    gchar *fname, *email;
+#endif /* HAVE_GMIME_2_4 */
     gchar* tmpstr;
     
+#ifdef HAVE_GMIME_2_4
+    fname = libbalsa_conf_get_string("FullName");
+    email = libbalsa_conf_get_string("Address");
+    
+#endif /* HAVE_GMIME_2_4 */
     ident = LIBBALSA_IDENTITY(libbalsa_identity_new_with_name(name));
+#ifndef HAVE_GMIME_2_4
 
     tmpstr = libbalsa_conf_get_string("FullName");
     internet_address_set_name(ident->ia, tmpstr);
@@ -1975,6 +2022,11 @@
     tmpstr = libbalsa_conf_get_string("Address");
     internet_address_set_addr(ident->ia, tmpstr);
     g_free(tmpstr);
+#else /* HAVE_GMIME_2_4 */
+    ident->ia = internet_address_mailbox_new (fname, email);
+    g_free(fname);
+    g_free(email);
+#endif /* HAVE_GMIME_2_4 */
 
     ident->replyto = libbalsa_conf_get_string("ReplyTo");
     ident->domain = libbalsa_conf_get_string("Domain");
@@ -2025,10 +2077,19 @@
     g_return_if_fail(ident);
 
     libbalsa_conf_push_group(group);
+#ifndef HAVE_GMIME_2_4
     libbalsa_conf_set_string("FullName", ident->ia->name);
+#else /* HAVE_GMIME_2_4 */
+    libbalsa_conf_set_string("FullName", ident->ia ? ident->ia->name : NULL);
+#endif /* HAVE_GMIME_2_4 */
     
+#ifndef HAVE_GMIME_2_4
     if (ident->ia->type == INTERNET_ADDRESS_NAME)
         libbalsa_conf_set_string("Address", ident->ia->value.addr);
+#else /* HAVE_GMIME_2_4 */
+    if (ident->ia && INTERNET_ADDRESS_IS_MAILBOX (ident->ia))
+        libbalsa_conf_set_string("Address", INTERNET_ADDRESS_MAILBOX(ident->ia)->addr);
+#endif /* HAVE_GMIME_2_4 */
 
     libbalsa_conf_set_string("ReplyTo", ident->replyto);
     libbalsa_conf_set_string("Domain", ident->domain);
Index: balsa/libbalsa/mailbox.c
===================================================================
--- balsa/libbalsa/mailbox.c	(revision 8017)
+++ balsa/libbalsa/mailbox.c	(working copy)
@@ -285,29 +285,94 @@
 static gchar*
 get_from_field(LibBalsaMessage *message)
 {
+#ifndef HAVE_GMIME_2_4
     gboolean append_dots = FALSE;
+#else /* HAVE_GMIME_2_4 */
+    InternetAddressList *address_list = NULL;
+#endif /* HAVE_GMIME_2_4 */
     const gchar *name_str = NULL;
+#ifdef HAVE_GMIME_2_4
+    gboolean append_dots = FALSE;
+#endif /* HAVE_GMIME_2_4 */
     gchar *from;
+#ifndef HAVE_GMIME_2_4
     const InternetAddressList *address_list = NULL;
+#endif /* ! HAVE_GMIME_2_4 */
 
     g_return_val_if_fail(message->mailbox, NULL);
+#ifndef HAVE_GMIME_2_4
     if (message->mailbox->view &&
         message->mailbox->view->show == LB_MAILBOX_SHOW_TO) {
         if (message->headers && message->headers->to_list) {
+#else /* HAVE_GMIME_2_4 */
+
+    if (message->headers) {
+        if (message->mailbox->view &&
+            message->mailbox->view->show == LB_MAILBOX_SHOW_TO)
+#endif /* HAVE_GMIME_2_4 */
             address_list = message->headers->to_list;
+#ifndef HAVE_GMIME_2_4
             append_dots = internet_address_list_length(address_list) > 1;
         }
     } else {
         if (message->headers && message->headers->from)
+#else /* HAVE_GMIME_2_4 */
+        else
+#endif /* HAVE_GMIME_2_4 */
             address_list = message->headers->from;
     }
+#ifndef HAVE_GMIME_2_4
     name_str = libbalsa_address_get_name_from_list(address_list);
     if(!name_str)           /* !addy, or addy contained no name/address */
+#else /* HAVE_GMIME_2_4 */
+
+    if (address_list) {
+        gint i, len = internet_address_list_length(address_list);
+
+        for (i = 0; i < len && name_str == NULL; i++) {
+            InternetAddress *ia =
+                internet_address_list_get_address(address_list, i);
+            if (ia->name && *ia->name) {
+                name_str = ia->name;
+                if (i < len - 1)
+                    append_dots = TRUE;
+            } else if (INTERNET_ADDRESS_IS_MAILBOX(ia)) {
+                name_str = ((InternetAddressMailbox *) ia)->addr;
+                if (i < len - 1)
+                    append_dots = TRUE;
+            } else {
+                InternetAddressGroup *g = (InternetAddressGroup *) ia;
+                gint gi, glen =
+                    internet_address_list_length(g->members);
+                for (gi = 0; gi < glen && name_str == NULL; gi++) {
+                    InternetAddress *ia2 =
+                        internet_address_list_get_address(g->members, gi);
+                    if (ia2->name && *ia2->name) {
+                        name_str = ia2->name;
+                        if (gi < glen - 1)
+                            append_dots = TRUE;
+                    } else if (INTERNET_ADDRESS_IS_MAILBOX(ia2)) {
+                        name_str = ((InternetAddressMailbox *) ia2)->addr;
+                        if (gi < glen - 1)
+                            append_dots = TRUE;
+                    }
+                }
+            }
+        }
+    }
+
+    if (name_str == NULL)
+#endif /* HAVE_GMIME_2_4 */
         name_str = "";
+#ifndef HAVE_GMIME_2_4
     
+#endif /* ! HAVE_GMIME_2_4 */
     from = append_dots ? g_strconcat(name_str, ",...", NULL)
                        : g_strdup(name_str);
     libbalsa_utf8_sanitize(&from, TRUE, NULL);
+#ifdef HAVE_GMIME_2_4
+
+#endif /* HAVE_GMIME_2_4 */
     return from;
 }
 
@@ -2130,7 +2195,11 @@
 libbalsa_mailbox_view_free(LibBalsaMailboxView * view)
 {
     if (view->mailing_list_address)
+#ifndef HAVE_GMIME_2_4
         internet_address_list_destroy(view->mailing_list_address);
+#else /* HAVE_GMIME_2_4 */
+        g_object_unref(view->mailing_list_address);
+#endif /* HAVE_GMIME_2_4 */
     g_free(view->identity_name);
     g_free(view);
 }
@@ -3789,7 +3858,12 @@
  * message. */
 
 static void
+#ifndef HAVE_GMIME_2_4
 lbm_try_reassemble_func(GMimeObject * mime_part, gpointer data)
+#else /* HAVE_GMIME_2_4 */
+lbm_try_reassemble_func(GMimeObject * parent, GMimeObject * mime_part,
+                        gpointer data)
+#endif /* HAVE_GMIME_2_4 */
 {
     if (GMIME_IS_MESSAGE_PART(mime_part))
         mime_part = ((GMimeMessagePart *) mime_part)->message->mime_part;
@@ -3877,7 +3951,9 @@
             partial = NULL;
             g_mime_multipart_foreach((GMimeMultipart *)
                                      mime_message->mime_part,
+#ifndef HAVE_GMIME_2_4
                                      (GMimePartFunc)
+#endif /* ! HAVE_GMIME_2_4 */
                                      lbm_try_reassemble_func, &partial);
             if (partial
                 && strcmp(g_mime_message_partial_get_id(partial), id) == 0) {
Index: balsa/libbalsa/misc.c
===================================================================
--- balsa/libbalsa/misc.c	(revision 8017)
+++ balsa/libbalsa/misc.c	(working copy)
@@ -490,16 +490,25 @@
 libbalsa_set_fallback_codeset(LibBalsaCodeset codeset)
 {
     LibBalsaCodeset ret = sanitize_fallback_codeset;
+#ifndef HAVE_GMIME_2_4
 #if defined(HAVE_GMIME_2_2_7)
+#endif /* ! HAVE_GMIME_2_4 */
     const gchar *charsets[] = {
+#ifndef HAVE_GMIME_2_4
         g_strdup("UTF-8"),
         g_strdup(libbalsa_get_codeset_name(NULL, codeset)),
+#else /* HAVE_GMIME_2_4 */
+        "UTF-8",
+        libbalsa_get_codeset_name(NULL, codeset),
+#endif /* HAVE_GMIME_2_4 */
         NULL
     };
 
     g_mime_set_user_charsets(charsets);
+#ifndef HAVE_GMIME_2_4
     /* GMime will free the strings. */
 #endif                          /* HAVE_GMIME_2_2_7 */
+#endif /* ! HAVE_GMIME_2_4 */
 
     sanitize_fallback_codeset = codeset;
     return ret;
@@ -1066,23 +1075,46 @@
 			  const InternetAddress * b)
 {
     const gchar *a_atptr, *b_atptr;
+#ifdef HAVE_GMIME_2_4
+    const gchar *a_addr, *b_addr;
+#endif /* HAVE_GMIME_2_4 */
     gint a_atpos, b_atpos;
 
+#ifndef HAVE_GMIME_2_4
     if (!a || !b || a->type != INTERNET_ADDRESS_NAME ||
 	b->type != INTERNET_ADDRESS_NAME)
+#else /* HAVE_GMIME_2_4 */
+    if (!INTERNET_ADDRESS_IS_MAILBOX(a) || !INTERNET_ADDRESS_IS_MAILBOX(b))
+#endif /* HAVE_GMIME_2_4 */
         return FALSE;
 
     /* first find the "@" in the two addresses */
+#ifndef HAVE_GMIME_2_4
     a_atptr = strchr(a->value.addr, '@');
     b_atptr = strchr(b->value.addr, '@');
+#else /* HAVE_GMIME_2_4 */
+    a_addr = INTERNET_ADDRESS_MAILBOX(a)->addr;
+    b_addr = INTERNET_ADDRESS_MAILBOX(b)->addr;
+    a_atptr = strchr(a_addr, '@');
+    b_atptr = strchr(b_addr, '@');
+#endif /* HAVE_GMIME_2_4 */
     if (!a_atptr || !b_atptr)
         return FALSE;
+#ifndef HAVE_GMIME_2_4
     a_atpos = a_atptr - a->value.addr;
     b_atpos = b_atptr - b->value.addr;
+#else /* HAVE_GMIME_2_4 */
+    a_atpos = a_atptr - a_addr;
+    b_atpos = b_atptr - b_addr;
+#endif /* HAVE_GMIME_2_4 */
 
     /* now compare the strings */
     if (!a_atpos || !b_atpos || a_atpos != b_atpos || 
+#ifndef HAVE_GMIME_2_4
         strncmp(a->value.addr, b->value.addr, a_atpos) ||
+#else /* HAVE_GMIME_2_4 */
+        strncmp(a_addr, b_addr, a_atpos) ||
+#endif /* HAVE_GMIME_2_4 */
         g_ascii_strcasecmp(a_atptr, b_atptr))
         return FALSE;
     else
Index: balsa/libbalsa/body.c
===================================================================
--- balsa/libbalsa/body.c	(revision 8017)
+++ balsa/libbalsa/body.c	(working copy)
@@ -114,11 +114,15 @@
     subj = g_mime_message_get_subject(msg);
     if (subj) {
 	ehdr->subject =
+#ifndef HAVE_GMIME_2_4
 #if HAVE_GMIME_2_2_5
 	    g_mime_utils_header_decode_text(subj);
 #else
 	    g_mime_utils_header_decode_text((const unsigned char *) subj);
 #endif
+#else /* ! HAVE_GMIME_2_4 */
+	    g_mime_utils_header_decode_text(subj);
+#endif /* ! HAVE_GMIME_2_4 */
 	libbalsa_utf8_sanitize(&ehdr->subject, TRUE, NULL);
     } else 
 	ehdr->subject = g_strdup(_("(No subject)"));
@@ -147,7 +151,11 @@
 static void
 libbalsa_message_body_set_types(LibBalsaMessageBody * body)
 {
+#ifndef HAVE_GMIME_2_4
     const GMimeContentType *type;
+#else /* HAVE_GMIME_2_4 */
+    GMimeContentType *type;
+#endif /* HAVE_GMIME_2_4 */
 
     type = g_mime_object_get_content_type(body->mime_part);
     if      (g_mime_content_type_is_type(type, "audio", "*"))
@@ -191,7 +199,9 @@
             *next_part = libbalsa_message_body_new(body->message);
         libbalsa_message_body_set_mime_body(*next_part,
                                             embedded_message->mime_part);
+#ifndef HAVE_GMIME_2_4
         g_object_unref(embedded_message);
+#endif /* ! HAVE_GMIME_2_4 */
     }
 
     return *next_part ? &(*next_part)->next : next_part;
@@ -201,13 +211,27 @@
 libbalsa_message_body_set_multipart(LibBalsaMessageBody * body,
 				    LibBalsaMessageBody ** next_part)
 {
+#ifndef HAVE_GMIME_2_4
     GList *child;
 
     for (child = GMIME_MULTIPART(body->mime_part)->subparts; child;
 	 child = child->next) {
+#else /* HAVE_GMIME_2_4 */
+    GMimeMultipart *multipart = GMIME_MULTIPART(body->mime_part);
+    GMimeObject *part;
+    int count, i;
+    
+    count = g_mime_multipart_get_count (multipart);
+    for (i = 0; i < count; i++) {
+	part = g_mime_multipart_get_part (multipart, i);
+#endif /* HAVE_GMIME_2_4 */
 	if (!*next_part)
 	    *next_part = libbalsa_message_body_new(body->message);
+#ifndef HAVE_GMIME_2_4
 	libbalsa_message_body_set_mime_body(*next_part, child->data);
+#else /* HAVE_GMIME_2_4 */
+	libbalsa_message_body_set_mime_body(*next_part, part);
+#endif /* HAVE_GMIME_2_4 */
 	next_part = &(*next_part)->next;
     }
 
@@ -261,19 +285,34 @@
 libbalsa_message_body_get_parameter(LibBalsaMessageBody * body,
 				    const gchar * param)
 {
+#ifdef HAVE_GMIME_2_4
+    GMimeContentType *type;
+#endif /* HAVE_GMIME_2_4 */
     gchar *res = NULL;
 
     g_return_val_if_fail(body != NULL, NULL);
 
     if (body->mime_part) {
+#ifndef HAVE_GMIME_2_4
 	const GMimeContentType *type =
 	    g_mime_object_get_content_type(body->mime_part);
+#else /* HAVE_GMIME_2_4 */
+	type = g_mime_object_get_content_type(body->mime_part);
+#endif /* HAVE_GMIME_2_4 */
 	res = g_strdup(g_mime_content_type_get_parameter(type, param));
     } else if (body->content_type) {
+#ifndef HAVE_GMIME_2_4
 	GMimeContentType *type =
 	    g_mime_content_type_new_from_string(body->content_type);
+#else /* HAVE_GMIME_2_4 */
+	type = g_mime_content_type_new_from_string(body->content_type);
+#endif /* HAVE_GMIME_2_4 */
 	res = g_strdup(g_mime_content_type_get_parameter(type, param));
+#ifndef HAVE_GMIME_2_4
 	g_mime_content_type_destroy(type);
+#else /* HAVE_GMIME_2_4 */
+	g_object_unref(type);
+#endif /* HAVE_GMIME_2_4 */
     }
 
     return res;
@@ -416,7 +455,11 @@
 {
     if (!GMIME_IS_STREAM_FILTER(stream)) {
         GMimeStream *filtered_stream =
+#ifndef HAVE_GMIME_2_4
             g_mime_stream_filter_new_with_stream(stream);
+#else /* HAVE_GMIME_2_4 */
+            g_mime_stream_filter_new(stream);
+#endif /* HAVE_GMIME_2_4 */
         g_object_unref(stream);
         stream = filtered_stream;
     }
@@ -449,27 +496,58 @@
             g_mime_part_get_content_object(GMIME_PART(body->mime_part));
 	if(!wrapper) /* part is incomplete. */
 	    return NULL;
+#ifndef HAVE_GMIME_2_4
         stream = g_mime_data_wrapper_get_stream(wrapper);
+#else /* HAVE_GMIME_2_4 */
+        stream = g_object_ref(g_mime_data_wrapper_get_stream(wrapper));
+#endif /* HAVE_GMIME_2_4 */
         encoding = g_mime_data_wrapper_get_encoding(wrapper);
+#ifndef HAVE_GMIME_2_4
         g_object_unref(wrapper);
+#endif /* ! HAVE_GMIME_2_4 */
 
         switch (encoding) {
+#ifndef HAVE_GMIME_2_4
         case GMIME_PART_ENCODING_BASE64:
+#else /* HAVE_GMIME_2_4 */
+        case GMIME_CONTENT_ENCODING_BASE64:
+#endif /* HAVE_GMIME_2_4 */
             filter =
+#ifndef HAVE_GMIME_2_4
                 g_mime_filter_basic_new_type
                 (GMIME_FILTER_BASIC_BASE64_DEC);
+#else /* HAVE_GMIME_2_4 */
+                g_mime_filter_basic_new
+                (GMIME_CONTENT_ENCODING_BASE64, FALSE);
+#endif /* HAVE_GMIME_2_4 */
             stream =
                 libbalsa_message_body_stream_add_filter(stream, filter);
             break;
+#ifndef HAVE_GMIME_2_4
         case GMIME_PART_ENCODING_QUOTEDPRINTABLE:
+#else /* HAVE_GMIME_2_4 */
+        case GMIME_CONTENT_ENCODING_QUOTEDPRINTABLE:
+#endif /* HAVE_GMIME_2_4 */
             filter =
+#ifndef HAVE_GMIME_2_4
                 g_mime_filter_basic_new_type(GMIME_FILTER_BASIC_QP_DEC);
+#else /* HAVE_GMIME_2_4 */
+                g_mime_filter_basic_new(GMIME_CONTENT_ENCODING_QUOTEDPRINTABLE, FALSE);
+#endif /* HAVE_GMIME_2_4 */
             stream =
                 libbalsa_message_body_stream_add_filter(stream, filter);
             break;
+#ifndef HAVE_GMIME_2_4
         case GMIME_PART_ENCODING_UUENCODE:
+#else /* HAVE_GMIME_2_4 */
+        case GMIME_CONTENT_ENCODING_UUENCODE:
+#endif /* HAVE_GMIME_2_4 */
             filter =
+#ifndef HAVE_GMIME_2_4
                 g_mime_filter_basic_new_type(GMIME_FILTER_BASIC_UU_DEC);
+#else /* HAVE_GMIME_2_4 */
+                g_mime_filter_basic_new(GMIME_CONTENT_ENCODING_UUENCODE, FALSE);
+#endif /* HAVE_GMIME_2_4 */
             stream =
                 libbalsa_message_body_stream_add_filter(stream, filter);
             break;
@@ -493,7 +571,11 @@
         GMimeFilter *filter_windows;
 
         stream_null = g_mime_stream_null_new();
+#ifndef HAVE_GMIME_2_4
         stream_filter = g_mime_stream_filter_new_with_stream(stream_null);
+#else /* HAVE_GMIME_2_4 */
+        stream_filter = g_mime_stream_filter_new(stream_null);
+#endif /* HAVE_GMIME_2_4 */
         g_object_unref(stream_null);
 
         filter_windows = g_mime_filter_windows_new(charset);
@@ -622,13 +704,21 @@
 
             if (!GMIME_IS_STREAM_FILTER(stream)) {
                 GMimeStream *stream_filter =
+#ifndef HAVE_GMIME_2_4
                     g_mime_stream_filter_new_with_stream(stream);
+#else /* HAVE_GMIME_2_4 */
+                    g_mime_stream_filter_new(stream);
+#endif /* HAVE_GMIME_2_4 */
                 g_object_unref(stream);
                 stream = stream_filter;
             }
 
+#ifndef HAVE_GMIME_2_4
             filter = g_mime_filter_crlf_new(GMIME_FILTER_CRLF_DECODE,
                                             GMIME_FILTER_CRLF_MODE_CRLF_ONLY);
+#else /* HAVE_GMIME_2_4 */
+            filter = g_mime_filter_crlf_new(FALSE, FALSE);
+#endif /* HAVE_GMIME_2_4 */
             g_mime_stream_filter_add(GMIME_STREAM_FILTER(stream), filter);
             g_object_unref(filter);
         }
--- balsa/libbalsa/body.c	2009-01-19 12:14:59.000000000 +0100
+++ balsa/libbalsa/body.c	2009-01-19 12:30:07.000000000 +0100
@@ -483,7 +483,11 @@
 
     if (body->message->mailbox) {
         GMimeDataWrapper *wrapper;
+#ifndef HAVE_GMIME_2_4
         GMimePartEncodingType encoding;
+#else /* HAVE_GMIME_2_4 */
+         GMimeContentEncoding encoding;
+#endif /* HAVE_GMIME_2_4 */
         if(!libbalsa_mailbox_get_message_part(body->message, body, err))
             return NULL;
 	
--- balsa-2.3.27/libbalsa/address-book-gpe.c	2008-11-01 21:12:19.000000000 +0100
+++ balsa-2.3.27/libbalsa/address-book-gpe.c	2009-01-19 12:53:29.000000000 +0100
@@ -729,7 +729,12 @@
     if(!a->full_name)
         a->full_name = create_name(a->first_name, a->last_name);
     for(l=a->address_list; l; l = l->next) {
-        ia = internet_address_new_name(a->full_name, l->data);
+#ifndef HAVE_GMIME_2_4
+     	ia = internet_address_new_name(a->full_name, l->data);
+#else /* HAVE_GMIME_2_4 */
+    	ia = internet_address_mailbox_new(a->full_name, l->data);
+#endif /* HAVE_GMIME_2_4 */
+
         gc->res = g_list_prepend(gc->res, ia);
     }
     if(gc->new_prefix && !*gc->new_prefix)

