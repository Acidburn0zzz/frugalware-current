diff -Naur xf86-input-joystick-1.6.2/src/backend_bsd.c xf86-input-joystick-1.6.2.new/src/backend_bsd.c
--- xf86-input-joystick-1.6.2/src/backend_bsd.c	2011-04-20 20:57:00.000000000 +0200
+++ xf86-input-joystick-1.6.2.new/src/backend_bsd.c	2016-11-16 21:04:25.000000000 +0100
@@ -91,38 +91,38 @@
     report_desc_t rd;
     struct jstk_bsd_hid_data *bsddata;
 
-    if ((joystick->fd = open(joystick->device, O_RDWR | O_NDELAY, 0)) < 0) {
-        xf86Msg(X_ERROR, "Cannot open joystick '%s' (%s)\n", joystick->device,
-                strerror(errno));
-        return -1;
+    if (joystick->fd == -1) {
+        if ((joystick->fd = open(joystick->device, O_RDWR | O_NDELAY, 0)) < 0) {
+            xf86Msg(X_ERROR, "Cannot open joystick '%s' (%s)\n",
+                    joystick->device, strerror(errno));
+            return -1;
+        }
     }
 
     if ((rd = hid_get_report_desc(joystick->fd)) == 0) {
         xf86Msg(X_ERROR, "Joystick: hid_get_report_desc failed: %s\n",
                 strerror(errno));
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice_bsd(joystick);
         return -1;
     }
 
     if (ioctl(joystick->fd, USB_GET_REPORT_ID, &report_id) < 0) {
         xf86Msg(X_ERROR, "Joystick: ioctl USB_GET_REPORT_ID failed: %s\n",
                 strerror(errno));
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice_bsd(joystick);
         return -1;
     }
 
     bsddata = (struct jstk_bsd_hid_data*)
               malloc(sizeof(struct jstk_bsd_hid_data));
+    joystick->devicedata = (void*) bsddata;
+
     bsddata->dlen = hid_report_size(rd, hid_input, report_id);
 
     if ((bsddata->data_buf = malloc(bsddata->dlen)) == NULL) {
         fprintf(stderr, "error: couldn't malloc %d bytes\n", bsddata->dlen);
         hid_dispose_report_desc(rd);
-        free(bsddata);
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice_bsd(joystick);
         return -1;
     }
 
@@ -181,14 +181,11 @@
     if (!got_something) {
         free(bsddata->data_buf);
         xf86Msg(X_ERROR, "Joystick: Didn't find any usable axes.\n");
-        free(bsddata);
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice_bsd(joystick);
         return -1;
     }
 
     bsddata->hotdata = 0;
-    joystick->devicedata = (void*) bsddata;
     if (probe == TRUE) {
         xf86Msg(X_INFO, "Joystick: %d buttons, %d axes\n", 
                 joystick->num_buttons, joystick->num_axes);
@@ -214,14 +211,12 @@
 static void
 jstkCloseDevice_bsd(JoystickDevPtr joystick)
 {
-    if ((joystick->fd >= 0)) {
-      xf86CloseSerial(joystick->fd);
-      joystick->fd = -1;
-    }
+    jstkCloseDevice(joystick);
     if (joystick->devicedata != NULL) {
         if (((struct jstk_bsd_hid_data*)joystick->devicedata)->data_buf)
             free(((struct jstk_bsd_hid_data*)joystick->devicedata)->data_buf);
         free(joystick->devicedata);
+        joystick->devicedata = NULL;
     }
 }
 
diff -Naur xf86-input-joystick-1.6.2/src/backend_evdev.c xf86-input-joystick-1.6.2.new/src/backend_evdev.c
--- xf86-input-joystick-1.6.2/src/backend_evdev.c	2013-01-16 10:50:40.000000000 +0100
+++ xf86-input-joystick-1.6.2.new/src/backend_evdev.c	2016-11-16 21:04:25.000000000 +0100
@@ -90,25 +90,25 @@
     unsigned long key_bits[NBITS(KEY_MAX)];
     int axes, buttons, j;
 
-    if ((joystick->fd = open(joystick->device, O_RDONLY | O_NDELAY, 0)) < 0) {
-        xf86Msg(X_ERROR, "Cannot open joystick '%s' (%s)\n", 
-                joystick->device, strerror(errno));
-        return -1;
+    if (joystick->fd == -1) {
+        if ((joystick->fd = open(joystick->device, O_RDONLY | O_NDELAY, 0)) < 0) {
+            xf86Msg(X_ERROR, "Cannot open joystick '%s' (%s)\n",
+                    joystick->device, strerror(errno));
+            return -1;
+        }
     }
 
     if (ioctl(joystick->fd, EVIOCGVERSION, &driver_version) == -1) {
         xf86Msg(X_ERROR, "Joystick: ioctl EVIOCGVERSION on '%s' failed: %s\n", 
                 joystick->device, strerror(errno));
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice_evdev(joystick);
         return -1;
     }
 
     if (ioctl(joystick->fd, EVIOCGID, &id) == -1) {
         xf86Msg(X_ERROR, "Joystick: ioctl EVIOCGID on '%s' failed: %s\n",
                 joystick->device, strerror(errno));
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice_evdev(joystick);
         return -1;
     }
 
@@ -118,13 +118,14 @@
     {
         xf86Msg(X_ERROR, "Joystick: ioctl EVIOCGBIT on '%s' failed: %s\n",
                 joystick->device, strerror(errno));
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice_evdev(joystick);
         return -1;
     }
 
     evdevdata = (struct jstk_evdev_data*)
                 malloc(sizeof(struct jstk_evdev_data));
+    joystick->devicedata = (void*) evdevdata;
+
     for (axes=0; axes<ABS_MAX; axes++)
     {
         evdevdata->axis[axes].number = -1;
@@ -144,9 +145,7 @@
             if (ioctl(joystick->fd, EVIOCGABS(j), &absinfo) == -1) {
                 xf86Msg(X_ERROR, "Joystick: ioctl EVIOCGABS on '%s' failed: %s\n",
                         joystick->device, strerror(errno));
-                close(joystick->fd);
-                joystick->fd = -1;
-                free(evdevdata);
+                jstkCloseDevice_evdev(joystick);
                 return -1;
             }
             evdevdata->axis[j].number = axes; /* physical -> logical mapping */
@@ -163,8 +162,7 @@
     {
         xf86Msg(X_ERROR, "Joystick: ioctl EVIOCGBIT on '%s' failed: %s\n",
                 joystick->device, strerror(errno));
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice_evdev(joystick);
         return -1;
     }
     buttons = 0; /* Our logical index */
@@ -191,7 +189,6 @@
     joystick->open_proc = jstkOpenDevice_evdev;
     joystick->read_proc = jstkReadData_evdev;
     joystick->close_proc = jstkCloseDevice_evdev;
-    joystick->devicedata = (void*) evdevdata;
 
     if (buttons > MAXBUTTONS)
         buttons = MAXBUTTONS;
@@ -215,13 +212,10 @@
 static void
 jstkCloseDevice_evdev(JoystickDevPtr joystick)
 {
-    if ((joystick->fd >= 0)) {
-        xf86CloseSerial(joystick->fd);
-        if (joystick->devicedata) {
-            free(joystick->devicedata);
-            joystick->devicedata = NULL;
-        }
-        joystick->fd = -1;
+    jstkCloseDevice(joystick);
+    if (joystick->devicedata) {
+        free(joystick->devicedata);
+        joystick->devicedata = NULL;
     }
 }
 
diff -Naur xf86-input-joystick-1.6.2/src/backend_joystick.c xf86-input-joystick-1.6.2.new/src/backend_joystick.c
--- xf86-input-joystick-1.6.2/src/backend_joystick.c	2011-04-20 20:57:00.000000000 +0200
+++ xf86-input-joystick-1.6.2.new/src/backend_joystick.c	2016-11-16 21:04:25.000000000 +0100
@@ -49,7 +49,6 @@
 #include "backend_joystick.h"
 
 
-static void jstkCloseDevice_joystick(JoystickDevPtr joystick);
 static int jstkReadData_joystick(JoystickDevPtr joystick,
                                  JOYSTICKEVENT *event,
                                  int *number);
@@ -73,17 +72,18 @@
     unsigned char axes, buttons;
     int driver_version;
 
-    if ((joystick->fd = open(joystick->device, O_RDONLY | O_NDELAY, 0)) < 0) {
-        xf86Msg(X_ERROR, "Cannot open joystick '%s' (%s)\n", 
-                joystick->device, strerror(errno));
-        return -1;
+    if (joystick->fd == -1) {
+        if ((joystick->fd = open(joystick->device, O_RDONLY | O_NDELAY, 0)) < 0) {
+            xf86Msg(X_ERROR, "Cannot open joystick '%s' (%s)\n",
+                    joystick->device, strerror(errno));
+            return -1;
+        }
     }
 
     if (ioctl(joystick->fd, JSIOCGVERSION, &driver_version) == -1) {
         xf86Msg(X_ERROR, "Joystick: ioctl JSIOCGVERSION on '%s' failed: %s\n", 
                 joystick->device, strerror(errno));
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice(joystick);
         return -1;
     }
     if ((driver_version >> 16) < 1) {
@@ -96,24 +96,21 @@
     if (ioctl(joystick->fd, JSIOCGAXES, &axes) == -1) {
         xf86Msg(X_ERROR, "Joystick: ioctl JSIOCGAXES on '%s' failed: %s\n", 
                 joystick->device, strerror(errno));
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice(joystick);
         return -1;
     }
 
     if (ioctl(joystick->fd, JSIOCGBUTTONS, &buttons) == -1) {
         xf86Msg(X_ERROR, "Joystick: ioctl JSIOCGBUTTONS on '%s' failed: %s\n", 
                 joystick->device, strerror(errno));
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice(joystick);
         return -1;
     }
 
     if (ioctl(joystick->fd, JSIOCGNAME(128), joy_name) == -1) {
         xf86Msg(X_ERROR, "Joystick: ioctl JSIOCGNAME on '%s' failed: %s\n", 
                   joystick->device, strerror(errno));
-        close(joystick->fd);
-        joystick->fd = -1;
+        jstkCloseDevice(joystick);
         return -1;
     }
 
@@ -131,30 +128,11 @@
 
     joystick->open_proc = jstkOpenDevice_joystick;
     joystick->read_proc = jstkReadData_joystick;
-    joystick->close_proc = jstkCloseDevice_joystick;
+    joystick->close_proc = jstkCloseDevice;
     return joystick->fd;
 }
 
 
-/***********************************************************************
- *
- * jstkCloseDevice --
- *
- * close the handle.
- *
- ***********************************************************************
- */
-
-static void
-jstkCloseDevice_joystick(JoystickDevPtr joystick)
-{
-    if ((joystick->fd >= 0)) {
-        xf86CloseSerial(joystick->fd);
-        joystick->fd = -1;
-    }
-}
-
-
 /***********************************************************************
  *
  * jstkReadData --
diff -Naur xf86-input-joystick-1.6.2/src/jstk.c xf86-input-joystick-1.6.2.new/src/jstk.c
--- xf86-input-joystick-1.6.2/src/jstk.c	2012-10-03 19:17:26.000000000 +0200
+++ xf86-input-joystick-1.6.2.new/src/jstk.c	2016-11-16 21:04:38.000000000 +0100
@@ -34,6 +34,7 @@
 #include <xf86Xinput.h>
 #include <exevents.h>		/* Needed for InitValuator/Proximity stuff */
 #include <xf86Opt.h>
+#include <xf86_OSproc.h>
 
 #include <math.h>
 #include <xf86Module.h>
@@ -79,6 +80,9 @@
     int fd;
     fd = -1;
 
+    if (priv->joystick_device->flags & XI86_SERVER_FD)
+        priv->fd = priv->joystick_device->fd;
+
     if (probe == FALSE && priv->open_proc)
         return priv->open_proc(priv, probe);
 
@@ -98,6 +102,24 @@
     return fd;
 }
 
+/*
+ ***************************************************************************
+ *
+ * jstkCloseDevice --
+ *
+ * Called to close the device specified in priv, this is a helper for
+ * backend proc_close functions
+ *
+ ***************************************************************************
+ */
+void jstkCloseDevice(JoystickDevPtr priv)
+{
+    if ((priv->fd >= 0)) {
+      if (!(priv->joystick_device->flags & XI86_SERVER_FD))
+          xf86CloseSerial(priv->fd);
+      priv->fd = -1;
+    }
+}
 
 /*
  ***************************************************************************
@@ -125,7 +147,7 @@
             xf86Msg(X_WARNING, "JOYSTICK: Read failed. Deactivating device.\n");
 
             if (pInfo->fd >= 0)
-                RemoveEnabledDevice(pInfo->fd);
+                xf86RemoveEnabledDevice(pInfo);
             return;
         }
 
@@ -392,7 +414,7 @@
         if (jstkOpenDevice(priv, FALSE) != -1) {
             pJstk->public.on = TRUE;
             pInfo->fd = priv->fd;
-            AddEnabledDevice(pInfo->fd);
+            xf86AddEnabledDevice(pInfo);
         } else return !Success;
         break;
 
@@ -415,8 +437,9 @@
         }
 
         if (pInfo->fd >= 0)
-            RemoveEnabledDevice(pInfo->fd);
-        pInfo->fd = -1;
+            xf86RemoveEnabledDevice(pInfo);
+        if (!(pInfo->flags & XI86_SERVER_FD))
+            pInfo->fd = -1;
         if (priv->close_proc)
             priv->close_proc(priv);
         pJstk->public.on = FALSE;
@@ -462,7 +485,8 @@
     pInfo->read_input = jstkReadProc;
     pInfo->control_proc = NULL;
     pInfo->switch_mode = NULL;
-    pInfo->fd = -1;
+    if (!(pInfo->flags & XI86_SERVER_FD))
+        pInfo->fd = -1;
     pInfo->dev = NULL;
     pInfo->type_name = XI_JOYSTICK;
 
@@ -483,6 +507,7 @@
     priv->mouse_enabled = TRUE;
     priv->keys_enabled = TRUE;
     priv->amplify = 1.0f;
+    priv->joystick_device = pInfo;
     priv->keyboard_device = keyboard_device;
     priv->num_axes    = MAXAXES;
     priv->num_buttons = MAXBUTTONS;
@@ -659,7 +684,11 @@
     NULL,
     jstkCorePreInit,
     jstkCoreUnInit,
-    NULL
+    NULL,
+    NULL,
+#ifdef XI86_DRV_CAP_SERVER_FD
+    XI86_DRV_CAP_SERVER_FD
+#endif
 };
 
 /*
@@ -738,4 +767,3 @@
 };
 
 /* vim: set filetype=c.doxygen ts=4 et: */
-
diff -Naur xf86-input-joystick-1.6.2/src/jstk.h xf86-input-joystick-1.6.2.new/src/jstk.h
--- xf86-input-joystick-1.6.2/src/jstk.h	2012-10-06 16:00:57.000000000 +0200
+++ xf86-input-joystick-1.6.2.new/src/jstk.h	2016-11-16 21:04:25.000000000 +0100
@@ -55,6 +55,9 @@
 #define XI_JOYSTICK "JOYSTICK"
 #endif
 
+#ifndef XI86_SERVER_FD
+#define XI86_SERVER_FD 0x20
+#endif
 
 typedef enum _JOYSTICKEVENT {
     EVENT_NONE=0,
@@ -106,6 +109,7 @@
     jstkReadDataProc read_proc; /* Callback for reading data from the backend */
     void         *devicedata; /* Extra platform device dependend data */
     char         *device;     /* Name of the device */
+    InputInfoPtr joystick_device; /* Back pointer to the joystick device */
     InputInfoPtr keyboard_device; /* Slave device for keyboard events */
 
     OsTimerPtr   timer;       /* Timer for axis movement */
@@ -123,4 +127,6 @@
     BUTTON button[MAXBUTTONS];    /* Configuration per button */
 } JoystickDevRec;
 
+void jstkCloseDevice(JoystickDevPtr priv);
+
 #endif
diff -Naur xf86-input-joystick-1.6.2/src/jstk_key.c xf86-input-joystick-1.6.2.new/src/jstk_key.c
--- xf86-input-joystick-1.6.2/src/jstk_key.c	2011-11-13 20:34:02.000000000 +0100
+++ xf86-input-joystick-1.6.2.new/src/jstk_key.c	2016-11-16 21:04:25.000000000 +0100
@@ -200,7 +200,8 @@
     pInfo->read_input = NULL;
     pInfo->control_proc = NULL;
     pInfo->switch_mode = NULL;
-    pInfo->fd = -1;
+    if (!(pInfo->flags & XI86_SERVER_FD))
+        pInfo->fd = -1;
     pInfo->type_name = XI_JOYSTICK;
 
     /* parse keyboard-related options */
