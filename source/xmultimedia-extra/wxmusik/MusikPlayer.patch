--- src/Classes/MusikPlayer.cpp.old	2005-11-22 03:43:38.000000000 +0800
+++ src/Classes/MusikPlayer.cpp	2006-09-12 03:00:09.000000000 +0800
@@ -29,6 +29,7 @@
 #include "MUSIKEngine/MUSIKEngine/inc/imusikstreamout.h"
 //--- CMusikStreamArray ---//
 #include <wx/arrimpl.cpp>
+#include <errno.h>
 WX_DEFINE_OBJARRAY( CMusikStreamArray )
 
 
@@ -39,6 +40,55 @@
 	return newbuffer;
 }
 
+static CSongMetaData CurrentMetaData;
+
+static void UpdateLastFm(CMusikPlayer* player)
+{
+    static char* musikEnableLastfm = getenv("MUSIK_ENABLE_LASTFM");
+    if (musikEnableLastfm == NULL
+        || strlen(musikEnableLastfm) == 0
+        || atoi(musikEnableLastfm) <= 0)
+    {
+        return;
+    }
+    // Get max duration to determine if this music ends normally (ms)
+    int maxDuration = 0;
+    if (wxGetApp().Prefs.nFadeDuration > maxDuration) maxDuration = wxGetApp().Prefs.nFadeDuration;
+    if (wxGetApp().Prefs.nFadeSeekDuration > maxDuration) maxDuration = wxGetApp().Prefs.nFadeSeekDuration;
+    if (wxGetApp().Prefs.nFadePauseResumeDuration > maxDuration) maxDuration = wxGetApp().Prefs.nFadePauseResumeDuration;
+    if (wxGetApp().Prefs.nFadeStopDuration > maxDuration) maxDuration = wxGetApp().Prefs.nFadeStopDuration;
+    if (wxGetApp().Prefs.nFadeExitDuration > maxDuration) maxDuration = wxGetApp().Prefs.nFadeExitDuration;
+    maxDuration += 10 * 1000;
+    // Skip manually-skipped or cancelled music
+    if (!player->IsPlaying() || player->GetTimeLeft(UNIT_MILLISEC) > maxDuration)
+        return;
+    // Get temp file in lastfmsubmitd spool!
+    FILE* tmpfile = NULL;
+    char* tmpfname = tempnam("/var/spool/lastfm", "tmp");
+    tmpfile = fopen(tmpfname, "w");
+    if (! tmpfile)
+    {
+        printf("cannot open file \"%s\" for last.fm, error %d\n", tmpfname, errno);
+        return;
+    }
+    // Get time
+    time_t local_time = time(NULL);
+    struct tm utc_tm;
+    gmtime_r(&local_time, &utc_tm);
+    // Write last.fm info!
+    CSongMetaData &metaData = CurrentMetaData;
+    fprintf(tmpfile, "---\n");
+    fprintf(tmpfile, "album: \"%s\"\n", (const char*) metaData.Album);
+    fprintf(tmpfile, "title: \"%s\"\n", (const char*) metaData.Title);
+    fprintf(tmpfile, "length: %d:%.2d\n",
+            (metaData.nDuration_ms / 1000) / 60,
+            (metaData.nDuration_ms / 1000) % 60);
+    fprintf(tmpfile, "artist: \"%s\"\n", (const char*) metaData.Artist);
+    fprintf(tmpfile, "time: !timestamp %d-%.2d-%.2d %.2d:%.2d:%.2d\n",
+            utc_tm.tm_year+1900, utc_tm.tm_mon+1, utc_tm.tm_mday,
+            utc_tm.tm_hour, utc_tm.tm_min, utc_tm.tm_sec);
+    fclose(tmpfile);
+}
 
 BEGIN_EVENT_TABLE( CMusikPlayer, wxEvtHandler )
 	//---------------------------------------------------------//
@@ -467,6 +517,11 @@
 			Stop();
 			return false;
 	}
+
+    if (CurrentMetaData.nDuration_ms > 0 && (m_Playlist[nItem] != m_CurrentSong))
+        UpdateLastFm( this );
+    CurrentMetaData = pNewSong->MetaData;
+
 	bool bSongChanged = (m_Playlist[nItem] != m_CurrentSong) && IsPlaying() && (nStartPos == 0);
 	if(bSongChanged )
 	{
@@ -823,6 +878,7 @@
 	if(m_Stopping) return;
 	m_b_NETSTREAM_AbortConnect = true;
 	m_Stopping = true;
+    if (CurrentMetaData.nDuration_ms > 0) UpdateLastFm( this );
 	//-------------------------------------------------//
 	//--- set the fade type, let the thread worry	---//
 	//--- about cleaning any existing fades.		---//
