diff -Naur ogle-0.9.2.orig/configure ogle-0.9.2/configure
--- ogle-0.9.2.orig/configure	2005-07-06 12:19:34.000000000 +0200
+++ ogle-0.9.2/configure	2005-07-06 12:19:50.000000000 +0200
@@ -13063,7 +13063,7 @@
 
 #include <sys/asoundlib.h>
 #if defined(SND_LIB_MAJOR) && defined(SND_LIB_MINOR)
-#if SND_LIB_MAJOR>0 || (SND_LIB_MAJOR==0 && SND_LIB_MINOR==5)
+#if (SND_LIB_MAJOR==0 && SND_LIB_MINOR==5)
 AP_maGiC_VALUE
 #endif
 #endif
diff -Naur ogle-0.9.2.orig/libogleao/alsa_audio.c ogle-0.9.2/libogleao/alsa_audio.c
--- ogle-0.9.2.orig/libogleao/alsa_audio.c	2005-07-06 12:19:34.000000000 +0200
+++ ogle-0.9.2/libogleao/alsa_audio.c	2005-07-06 12:19:43.000000000 +0200
@@ -250,8 +250,8 @@
     
     snd_ctl_close(ctl_handle);
   
-  __diga_end:
   }
+  __diga_end:
   
   return 0;
 }
@@ -269,16 +269,51 @@
 	
   
   if(i->initialized) {
+    snd_pcm_state_t state;
+    char *name;
+
     DNOTE("%s", "alsa reinit\n");
    
     if((err = snd_pcm_drain(i->alsa_pcm)) < 0) {
       ERROR("drain failed: %s\n", snd_strerror(err));
+      state = snd_pcm_state(i->alsa_pcm);
+      ERROR("alsa state: %d\n", state);
     }
-    
+
     if((err = snd_pcm_prepare(i->alsa_pcm)) < 0) {
       ERROR("prepare failed: %s\n",
 	    snd_strerror(err));
-    }    
+      state = snd_pcm_state(i->alsa_pcm);
+      ERROR("alsa state: %d\n", state);
+      
+      name = strdup(snd_pcm_name(i->alsa_pcm));
+      ERROR("Trying to close/reopen alsa device: %s\n", name);
+      
+      
+      DNOTE("Closing alsa pcm device: %s\n", name ? name : "");
+      
+      snd_pcm_close(i->alsa_pcm);
+      
+      i->initialized = 0;
+      i->sample_rate = 0;
+      i->samples_written = 0;
+      i->sample_frame_size = 0;
+      
+      DNOTE("Reopening alsa pcm device: %s\n", name);
+      
+      if((err = snd_pcm_open(&(i->alsa_pcm), name, 
+			     SND_PCM_STREAM_PLAYBACK, SND_PCM_NONBLOCK)) < 0) {
+	ERROR("Reopening alsa pcm device '%s': %s\n", name, snd_strerror(err));
+      }    
+      
+      free(name);
+      
+      if(err < 0) {
+	return -1;
+      }
+    }
+
+
   }
 
   // these are allocated with alloca and automatically freed when
@@ -299,8 +334,19 @@
       }
       /* ok */
       break;
+    case 24:
+      if(audio_info->byteorder == OGLE_AO_BYTEORDER_BE) {
+	i->format = SND_PCM_FORMAT_S32_BE;
+      } else {
+	i->format = SND_PCM_FORMAT_S32_LE;
+      }
+      audio_info->sample_resolution = 32;
+      /* ok */
+      break;
     default:
       /* not supported */
+      ERROR("sample resolution %d not implmented\n",
+	    audio_info->sample_resolution);
       return -1;
       break;
     }
@@ -372,6 +418,7 @@
 	i->sample_rate, snd_pcm_format_name(i->format), 
 	i->channels, i->sample_frame_size);
 
+  audio_info->sample_resolution = i->sample_frame_size / i->channels * 8;
   return 0;
 }
 
@@ -380,7 +427,7 @@
   NOTE("xrun_recovery: %s\n", snd_strerror(err));
   if(err == -EPIPE) {	/* underrun */
     if((err = snd_pcm_prepare(handle)) < 0) {
-      ERROR("Can't recovery from underrun, prepare failed: %s\n",
+      ERROR("Can't recover from underrun, prepare failed: %s\n",
 	    snd_strerror(err));
     }
     return 0;
@@ -389,7 +436,7 @@
       sleep(1);	/* wait until suspend flag is released */
     if(err < 0) {
       if((err = snd_pcm_prepare(handle)) < 0) {
-	ERROR("Can't recovery from suspend, prepare failed: %s\n",
+	ERROR("Can't recover from suspend, prepare failed: %s\n",
 	      snd_strerror(err));
       }
     }
