diff -urN xen-3.0.3_0-src.orig/tools/python/xen/xend/image.py xen-3.0.3_0-src/tools/python/xen/xend/image.py
--- xen-3.0.3_0-src.orig/tools/python/xen/xend/image.py	2006-10-30 18:22:02.000000000 +0000
+++ xen-3.0.3_0-src/tools/python/xen/xend/image.py	2006-10-30 18:24:42.000000000 +0000
@@ -20,8 +20,10 @@
 import os, string
 import re
 import math
+import signal
 
 import xen.lowlevel.xc
+import xen.util.auxbin
 from xen.xend import sxp
 from xen.xend.XendError import VmError
 from xen.xend.XendLogging import log
@@ -205,6 +207,68 @@
                               ramdisk        = self.ramdisk,
                               features       = self.vm.getFeatures())
 
+    def configure(self, imageConfig, deviceConfig):
+        ImageHandler.configure(self, imageConfig, deviceConfig)
+
+        self.pid = 0
+        log.info("configuring linux guest")
+
+        # set up the graphics bits.
+        # FIXME: this is much like what we do for HVM, should it be 
+        # for all image types now?
+        self.display = sxp.child_value(imageConfig, 'display')
+        self.xauthority = sxp.child_value(imageConfig, 'xauthority')
+        self.vncconsole = sxp.child_value(imageConfig, 'vncconsole')
+        self.vnc = sxp.child_value(imageConfig, 'vnc')
+        self.sdl = sxp.child_value(imageConfig, 'sdl')
+        if self.vnc:
+            self.vncdisplay = sxp.child_value(imageConfig, 'vncdisplay',
+                                              int(self.vm.getDomid()))
+            self.vncunused = sxp.child_value(imageConfig, 'vncunused')
+            self.vnclisten = sxp.child_value(imageConfig, 'vnclisten')
+        if self.vnc or self.sdl:
+            log.info("setting use_graphics")
+            self.vm.writeDom("console/use_graphics", "1")
+        else:
+            self.vm.writeDom("console/use_graphics", "0")
+
+    def createDeviceModel(self):
+        if self.pid:
+            return
+        # Execute device model (for us, it's just the fb frontend)
+        if not self.vnc and not self.sdl:
+            return
+
+        if self.vnc:
+            args = [xen.util.auxbin.pathTo("xen-vncfb")]
+            if self.vncunused:
+                args += ['--unused']
+            elif self.vncdisplay:
+                args += [ "--vncport", "%d" %(5900 + self.vncdisplay,) ]
+            if self.vnclisten:
+                args += [ "--listen", self.vnclisten ]
+            if self.vncconsole:
+                args += [ "--vncviewer" ]
+        elif self.sdl:
+            args = [xen.util.auxbin.pathTo("xen-sdlfb")]
+        args = args + [ "--domid", "%d" % self.vm.getDomid(),
+                        "--title", self.vm.info['name'] ]
+        env = dict(os.environ)
+        if self.display:
+            env['DISPLAY'] = self.display
+        if self.xauthority:
+            env['XAUTHORITY'] = self.xauthority
+        log.info("spawning video: %s", args)
+        self.pid = os.spawnve(os.P_NOWAIT, args[0], args, env)
+        log.info("device model pid: %d", self.pid)
+
+    def destroy(self):
+        if not self.pid:
+            return
+        os.kill(self.pid, signal.SIGKILL)
+        os.waitpid(self.pid, 0)
+        self.pid = 0
+
 class PPC_LinuxImageHandler(LinuxImageHandler):
 
     ostype = "linux"
@@ -357,6 +421,10 @@
         if nographic:
             ret.append('-nographic')
             return ret
+	keymap = sxp.child_value(config, 'keymap')
+	if not keymap:
+	    keymap = "en-us"
+        ret += ['-k', keymap]
         if vnc:
             vncdisplay = sxp.child_value(config, 'vncdisplay',
                                          int(self.vm.getDomid()))
@@ -365,7 +433,6 @@
                 ret += ['-vncunused']
             else:
                 ret += ['-vnc', '%d' % vncdisplay]
-            ret += ['-k', 'en-us']
             vnclisten = sxp.child_value(config, 'vnclisten')
             if not(vnclisten):
                 vnclisten = xen.xend.XendRoot.instance().get_vnclisten_address()
@@ -395,7 +462,6 @@
 
     def destroy(self):
         self.unregister_shutdown_watch();
-        import signal
         if not self.pid:
             return
         os.kill(self.pid, signal.SIGKILL)
diff -urN xen-3.0.3_0-src.orig/tools/python/xen/xm/create.py xen-3.0.3_0-src/tools/python/xen/xm/create.py
--- xen-3.0.3_0-src.orig/tools/python/xen/xm/create.py	2006-10-30 18:22:02.000000000 +0000
+++ xen-3.0.3_0-src/tools/python/xen/xm/create.py	2006-10-30 18:25:19.000000000 +0000
@@ -428,6 +428,10 @@
           fn=set_value, default=None,
           use="""Should the device model use SDL?""")
 
+gopts.var('keymap', val='',
+          fn=set_value, default=None,
+          use="""Keyboard mapping for SDL/VNC""")
+
 gopts.var('display', val='DISPLAY',
           fn=set_value, default=None,
           use="X11 display to use")
@@ -485,6 +489,8 @@
 
     if vals.builder == 'hvm':
         configure_hvm(config_image, vals)
+
+    configure_graphics(config_image, vals)        
         
     return config_image
     
@@ -632,14 +638,22 @@
         config_devs.append(['device', config_vif])
 
 
+def configure_graphics(config_image, vals):
+    """Create the config for graphic consoles.
+    """
+    args = [ 'vnc', 'vncdisplay', 'vncconsole', 'vncunused',
+             'sdl', 'display', 'xauthority' ]
+    for a in args:
+        if (vals.__dict__[a]):
+            config_image.append([a, vals.__dict__[a]])
+
+
 def configure_hvm(config_image, vals):
     """Create the config for HVM devices.
     """
     args = [ 'device_model', 'pae', 'vcpus', 'boot', 'fda', 'fdb',
              'localtime', 'serial', 'stdvga', 'isa', 'nographic', 'soundhw',
-             'vnc', 'vncdisplay', 'vncunused', 'vncconsole', 'vnclisten',
-             'sdl', 'display', 'xauthority',
-             'acpi', 'apic', 'usb', 'usbdevice' ]
+             'acpi', 'apic', 'usb', 'usbdevice' 'keymap' ]
     for a in args:
         if (vals.__dict__[a]):
             config_image.append([a, vals.__dict__[a]])
