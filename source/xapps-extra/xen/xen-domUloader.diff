Index: xen-unstable/tools/python/xen/xm/create.py
===================================================================
--- xen-unstable.orig/tools/python/xen/xm/create.py
+++ xen-unstable/tools/python/xen/xm/create.py
@@ -656,9 +656,12 @@ def run_bootloader(vals, config_image):
         warn("The bootentry option is deprecated.  Use bootargs and pass "
              "--entry= directly.")
         vals.bootargs = "--entry=%s" %(vals.bootentry,)
+    if vals.root:
+        vals.bootargs += " --root=%s" % vals.root.split()[0]
+    vals.bootargs += " --disks=\"%s\"" % str(vals.disk)
 
     return bootloader(vals.bootloader, file, not vals.console_autoconnect,
-                      vals.bootargs, config_image)
+                      vals.dryrun, vals.bootargs, config_image)
 
 def make_config(vals):
     """Create the domain configuration.
@@ -674,7 +677,7 @@ def make_config(vals):
 
     map(add_conf, ['name', 'memory', 'maxmem', 'shadow_memory',
                    'restart', 'on_poweroff', 'on_reboot', 'on_crash',
-                   'vcpus', 'features'])
+                   'vcpus', 'features', 'root'])
 
     if vals.uuid is not None:
         config.append(['uuid', vals.uuid])
@@ -692,13 +695,15 @@ def make_config(vals):
         config.append(['backend', ['tpmif']])
     if vals.localtime:
         config.append(['localtime', vals.localtime])
+    if vals.root:
+        config.append(['root', vals.root])
 
     config_image = configure_image(vals)
     if vals.bootloader:
         config_image = run_bootloader(vals, config_image)
         config.append(['bootloader', vals.bootloader])
         if vals.bootargs:
-            config.append(['bootloader_args'], vals.bootargs)
+            config.append(['bootloader_args', vals.bootargs])
     config.append(['image', config_image])
 
     config_devs = []
Index: xen-unstable/tools/python/xen/xend/XendBootloader.py
===================================================================
--- xen-unstable.orig/tools/python/xen/xend/XendBootloader.py
+++ xen-unstable/tools/python/xen/xend/XendBootloader.py
@@ -20,7 +20,7 @@ import shlex
 from XendLogging import log
 from XendError import VmError
 
-def bootloader(blexec, disk, quiet = 0, blargs = None, imgcfg = None):
+def bootloader(blexec, disk, quiet = 0, dryrun = 0, blargs = None, imgcfg = None):
     """Run the boot loader executable on the given disk and return a
     config image.
     @param blexec  Binary to use as the boot loader
@@ -48,6 +48,8 @@ def bootloader(blexec, disk, quiet = 0, 
         args = [ blexec ]
         if quiet:
             args.append("-q")
+        if dryrun:
+            args.append("--dryrun")
         args.append("--output=%s" %(fifo,))
         if blargs is not None:
             args.extend(shlex.split(blargs))
@@ -68,6 +70,7 @@ def bootloader(blexec, disk, quiet = 0, 
                 continue
         break
     ret = ""
+    # TODO: Add timeout, cleanup and raise VmError if it occurs
     while 1:
         select.select([r], [], [])
         s = os.read(r, 1024)
Index: xen-unstable/tools/python/xen/xend/XendDomainInfo.py
===================================================================
--- xen-unstable.orig/tools/python/xen/xend/XendDomainInfo.py
+++ xen-unstable/tools/python/xen/xend/XendDomainInfo.py
@@ -137,6 +137,7 @@ ROUNDTRIPPING_CONFIG_ENTRIES = [
     ('maxmem',          int),
     ('bootloader',      str),
     ('bootloader_args', str),
+    ('root',            str),
     ('features',        str),
     ('localtime',       int),
     ]
@@ -580,6 +581,7 @@ class XendDomainInfo:
             defaultInfo('maxmem',       lambda: 0)
             defaultInfo('bootloader',   lambda: None)
             defaultInfo('bootloader_args', lambda: None)            
+            defaultInfo('root',         lambda: None)
             defaultInfo('backend',      lambda: [])
             defaultInfo('device',       lambda: [])
             defaultInfo('image',        lambda: None)
@@ -1744,6 +1746,7 @@ class XendDomainInfo:
             return
         blcfg = None
         # FIXME: this assumes that we want to use the first disk device
+        vbds = []
         for (n,c) in self.info['device']:
             if not n or not c or n != "vbd":
                 continue
@@ -1751,10 +1754,16 @@ class XendDomainInfo:
             if disk is None:
                 continue
             fn = blkdev_uname_to_file(disk)
-            blcfg = bootloader(self.info['bootloader'], fn, 1,
-                               self.info['bootloader_args'],
-                               self.info['image'])
-            break
+            vbds.append([sxp.child_value(c, "uname"),
+                         sxp.child_value(c, "dev"),
+                         sxp.child_value(c, "mode"),
+                         sxp.child_value(c, "backend")])
+        if vbds:
+            bootargs = [ self.info['bootloader_args'],
+                         "--root=%s" % self.info['root'].split()[0],
+                         "--disks=\"%s\"" % str(vbds) ]
+            blcfg = bootloader(self.info['bootloader'], fn, 1, 0,
+                               bootargs, self.info['image'])
         if blcfg is None:
             msg = "Had a bootloader specified, but can't find disk"
             log.error(msg)
