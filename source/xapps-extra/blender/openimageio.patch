diff -Naur blender-2.79/build_files/cmake/Modules/FindOpenImageIO.cmake blender-2.79-p/build_files/cmake/Modules/FindOpenImageIO.cmake
--- blender-2.79/build_files/cmake/Modules/FindOpenImageIO.cmake	2017-09-11 06:34:59.000000000 +0200
+++ blender-2.79-p/build_files/cmake/Modules/FindOpenImageIO.cmake	2018-02-16 21:24:39.351296022 +0100
@@ -76,6 +76,8 @@
   SET(OPENIMAGEIO_INCLUDE_DIRS ${OPENIMAGEIO_INCLUDE_DIR})
   IF(EXISTS ${OPENIMAGEIO_INCLUDE_DIR}/OpenImageIO/pugixml.hpp)
     SET(OPENIMAGEIO_PUGIXML_FOUND TRUE)
+  ELSE()
+    SET(OPENIMAGEIO_PUGIXML_FOUND FALSE)
   ENDIF()
 ELSE()
   SET(OPENIMAGEIO_PUGIXML_FOUND FALSE)
diff -Naur blender-2.79/intern/cycles/app/cycles_xml.cpp blender-2.79-p/intern/cycles/app/cycles_xml.cpp
--- blender-2.79/intern/cycles/app/cycles_xml.cpp	2017-09-11 06:34:59.000000000 +0200
+++ blender-2.79-p/intern/cycles/app/cycles_xml.cpp	2018-02-16 21:25:17.608341808 +0100
@@ -70,9 +70,9 @@
 
 /* Attribute Reading */
 
-static bool xml_read_int(int *value, pugi::xml_node node, const char *name)
+static bool xml_read_int(int *value, xml_node node, const char *name)
 {
-	pugi::xml_attribute attr = node.attribute(name);
+	xml_attribute attr = node.attribute(name);
 
 	if(attr) {
 		*value = atoi(attr.value());
@@ -82,9 +82,9 @@
 	return false;
 }
 
-static bool xml_read_int_array(vector<int>& value, pugi::xml_node node, const char *name)
+static bool xml_read_int_array(vector<int>& value, xml_node node, const char *name)
 {
-	pugi::xml_attribute attr = node.attribute(name);
+	xml_attribute attr = node.attribute(name);
 
 	if(attr) {
 		vector<string> tokens;
@@ -99,9 +99,9 @@
 	return false;
 }
 
-static bool xml_read_float(float *value, pugi::xml_node node, const char *name)
+static bool xml_read_float(float *value, xml_node node, const char *name)
 {
-	pugi::xml_attribute attr = node.attribute(name);
+	xml_attribute attr = node.attribute(name);
 
 	if(attr) {
 		*value = (float)atof(attr.value());
@@ -111,9 +111,9 @@
 	return false;
 }
 
-static bool xml_read_float_array(vector<float>& value, pugi::xml_node node, const char *name)
+static bool xml_read_float_array(vector<float>& value, xml_node node, const char *name)
 {
-	pugi::xml_attribute attr = node.attribute(name);
+	xml_attribute attr = node.attribute(name);
 
 	if(attr) {
 		vector<string> tokens;
@@ -128,7 +128,7 @@
 	return false;
 }
 
-static bool xml_read_float3(float3 *value, pugi::xml_node node, const char *name)
+static bool xml_read_float3(float3 *value, xml_node node, const char *name)
 {
 	vector<float> array;
 
@@ -140,7 +140,7 @@
 	return false;
 }
 
-static bool xml_read_float3_array(vector<float3>& value, pugi::xml_node node, const char *name)
+static bool xml_read_float3_array(vector<float3>& value, xml_node node, const char *name)
 {
 	vector<float> array;
 
@@ -154,7 +154,7 @@
 	return false;
 }
 
-static bool xml_read_float4(float4 *value, pugi::xml_node node, const char *name)
+static bool xml_read_float4(float4 *value, xml_node node, const char *name)
 {
 	vector<float> array;
 
@@ -166,9 +166,9 @@
 	return false;
 }
 
-static bool xml_read_string(string *str, pugi::xml_node node, const char *name)
+static bool xml_read_string(string *str, xml_node node, const char *name)
 {
-	pugi::xml_attribute attr = node.attribute(name);
+	xml_attribute attr = node.attribute(name);
 
 	if(attr) {
 		*str = attr.value();
@@ -178,9 +178,9 @@
 	return false;
 }
 
-static bool xml_equal_string(pugi::xml_node node, const char *name, const char *value)
+static bool xml_equal_string(xml_node node, const char *name, const char *value)
 {
-	pugi::xml_attribute attr = node.attribute(name);
+	xml_attribute attr = node.attribute(name);
 
 	if(attr)
 		return string_iequals(attr.value(), value);
@@ -190,7 +190,7 @@
 
 /* Camera */
 
-static void xml_read_camera(XMLReadState& state, pugi::xml_node node)
+static void xml_read_camera(XMLReadState& state, xml_node node)
 {
 	Camera *cam = state.scene->camera;
 
@@ -210,7 +210,7 @@
 
 /* Shader */
 
-static void xml_read_shader_graph(XMLReadState& state, Shader *shader, pugi::xml_node graph_node)
+static void xml_read_shader_graph(XMLReadState& state, Shader *shader, xml_node graph_node)
 {
 	xml_read_node(state, shader, graph_node);
 
@@ -220,7 +220,7 @@
 	XMLReader graph_reader;
 	graph_reader.node_map[ustring("output")] = graph->output();
 
-	for(pugi::xml_node node = graph_node.first_child(); node; node = node.next_sibling()) {
+	for(xml_node node = graph_node.first_child(); node; node = node.next_sibling()) {
 		ustring node_name(node.name());
 
 		if(node_name == "connect") {
@@ -349,7 +349,7 @@
 	shader->tag_update(state.scene);
 }
 
-static void xml_read_shader(XMLReadState& state, pugi::xml_node node)
+static void xml_read_shader(XMLReadState& state, xml_node node)
 {
 	Shader *shader = new Shader();
 	xml_read_shader_graph(state, shader, node);
@@ -358,7 +358,7 @@
 
 /* Background */
 
-static void xml_read_background(XMLReadState& state, pugi::xml_node node)
+static void xml_read_background(XMLReadState& state, xml_node node)
 {
 	/* Background Settings */
 	xml_read_node(state, state.scene->background, node);
@@ -385,7 +385,7 @@
 	return mesh;
 }
 
-static void xml_read_mesh(const XMLReadState& state, pugi::xml_node node)
+static void xml_read_mesh(const XMLReadState& state, xml_node node)
 {
 	/* add mesh */
 	Mesh *mesh = xml_add_mesh(state.scene, state.tfm);
@@ -531,7 +531,7 @@
 
 /* Light */
 
-static void xml_read_light(XMLReadState& state, pugi::xml_node node)
+static void xml_read_light(XMLReadState& state, xml_node node)
 {
 	Light *light = new Light();
 
@@ -543,7 +543,7 @@
 
 /* Transform */
 
-static void xml_read_transform(pugi::xml_node node, Transform& tfm)
+static void xml_read_transform(xml_node node, Transform& tfm)
 {
 	if(node.attribute("matrix")) {
 		vector<float> matrix;
@@ -572,7 +572,7 @@
 
 /* State */
 
-static void xml_read_state(XMLReadState& state, pugi::xml_node node)
+static void xml_read_state(XMLReadState& state, xml_node node)
 {
 	/* read shader */
 	string shadername;
@@ -605,9 +605,9 @@
 
 static void xml_read_include(XMLReadState& state, const string& src);
 
-static void xml_read_scene(XMLReadState& state, pugi::xml_node scene_node)
+static void xml_read_scene(XMLReadState& state, xml_node scene_node)
 {
-	for(pugi::xml_node node = scene_node.first_child(); node; node = node.next_sibling()) {
+	for(xml_node node = scene_node.first_child(); node; node = node.next_sibling()) {
 		if(string_iequals(node.name(), "film")) {
 			xml_read_node(state, state.scene->film, node);
 		}
@@ -657,8 +657,8 @@
 static void xml_read_include(XMLReadState& state, const string& src)
 {
 	/* open XML document */
-	pugi::xml_document doc;
-	pugi::xml_parse_result parse_result;
+	xml_document doc;
+	xml_parse_result parse_result;
 
 	string path = path_join(state.base, src);
 	parse_result = doc.load_file(path.c_str());
@@ -667,7 +667,7 @@
 		XMLReadState substate = state;
 		substate.base = path_dirname(path);
 
-		pugi::xml_node cycles = doc.child("cycles");
+		xml_node cycles = doc.child("cycles");
 		xml_read_scene(substate, cycles);
 	}
 	else {
diff -Naur blender-2.79/intern/cycles/CMakeLists.txt blender-2.79-p/intern/cycles/CMakeLists.txt
--- blender-2.79/intern/cycles/CMakeLists.txt	2017-09-12 05:44:17.000000000 +0200
+++ blender-2.79-p/intern/cycles/CMakeLists.txt	2018-02-16 21:24:39.351296022 +0100
@@ -205,6 +205,10 @@
 	add_definitions(-DWITH_CYCLES_DEBUG)
 endif()
 
+if(NOT OPENIMAGEIO_PUGIXML_FOUND)
+	add_definitions(-DWITH_SYSTEM_PUGIXML)
+endif()
+
 include_directories(
 	SYSTEM
 	${BOOST_INCLUDE_DIR}
diff -Naur blender-2.79/intern/cycles/graph/node_xml.cpp blender-2.79-p/intern/cycles/graph/node_xml.cpp
--- blender-2.79/intern/cycles/graph/node_xml.cpp	2017-09-11 06:34:59.000000000 +0200
+++ blender-2.79-p/intern/cycles/graph/node_xml.cpp	2018-02-16 21:23:17.860199152 +0100
@@ -33,7 +33,7 @@
 }
 
 template<int VECTOR_SIZE, typename T>
-static void xml_read_float_array(T& value, pugi::xml_attribute attr)
+static void xml_read_float_array(T& value, xml_attribute attr)
 {
 	vector<string> tokens;
 	string_split(tokens, attr.value());
@@ -51,9 +51,9 @@
 	}
 }
 
-void xml_read_node(XMLReader& reader, Node *node, pugi::xml_node xml_node)
+void xml_read_node(XMLReader& reader, Node *node, xml_node xml_node)
 {
-	pugi::xml_attribute name_attr = xml_node.attribute("name");
+	xml_attribute name_attr = xml_node.attribute("name");
 	if(name_attr) {
 		node->name = ustring(name_attr.value());
 	}
@@ -66,7 +66,7 @@
 			continue;
 		}
 
-		pugi::xml_attribute attr = xml_node.attribute(socket.name.c_str());
+		xml_attribute attr = xml_node.attribute(socket.name.c_str());
 
 		if(!attr) {
 			continue;
@@ -254,9 +254,9 @@
 		reader.node_map[node->name] = node;
 }
 
-pugi::xml_node xml_write_node(Node *node, pugi::xml_node xml_root)
+xml_node xml_write_node(Node *node, xml_node xml_root)
 {
-	pugi::xml_node xml_node = xml_root.append_child(node->type->name.c_str());
+	xml_node xml_node = xml_root.append_child(node->type->name.c_str());
 
 	xml_node.append_attribute("name") = node->name.c_str();
 
@@ -271,7 +271,7 @@
 			continue;
 		}
 
-		pugi::xml_attribute attr = xml_node.append_attribute(socket.name.c_str());
+		xml_attribute attr = xml_node.append_attribute(socket.name.c_str());
 
 		switch(socket.type)
 		{
diff -Naur blender-2.79/intern/cycles/graph/node_xml.h blender-2.79-p/intern/cycles/graph/node_xml.h
--- blender-2.79/intern/cycles/graph/node_xml.h	2017-09-11 06:34:59.000000000 +0200
+++ blender-2.79-p/intern/cycles/graph/node_xml.h	2018-02-16 21:23:17.860199152 +0100
@@ -28,8 +28,8 @@
 	map<ustring, Node*> node_map;
 };
 
-void xml_read_node(XMLReader& reader, Node *node, pugi::xml_node xml_node);
-pugi::xml_node xml_write_node(Node *node, pugi::xml_node xml_root);
+void xml_read_node(XMLReader& reader, Node *node, xml_node xml_node);
+xml_node xml_write_node(Node *node, xml_node xml_root);
 
 CCL_NAMESPACE_END
 
diff -Naur blender-2.79/intern/cycles/util/util_xml.h blender-2.79-p/intern/cycles/util/util_xml.h
--- blender-2.79/intern/cycles/util/util_xml.h	2017-09-11 06:34:59.000000000 +0200
+++ blender-2.79-p/intern/cycles/util/util_xml.h	2018-02-16 21:25:17.608341808 +0100
@@ -25,7 +25,17 @@
 
 OIIO_NAMESPACE_USING
 
+#ifdef WITH_SYSTEM_PUGIXML
+#  define PUGIXML_NAMESPACE pugi
+#else
+#  define PUGIXML_NAMESPACE OIIO_NAMESPACE::pugi
+#endif
+
+using PUGIXML_NAMESPACE::xml_attribute;
+using PUGIXML_NAMESPACE::xml_document;
+using PUGIXML_NAMESPACE::xml_node;
+using PUGIXML_NAMESPACE::xml_parse_result;
+
 CCL_NAMESPACE_END
 
 #endif /* __UTIL_XML_H__ */
-
