diff --git a/build/depends.py b/build/depends.py
index a624cfc..c19fe37 100644
--- a/build/depends.py
+++ b/build/depends.py
@@ -1260,7 +1260,8 @@ class MixxxCore(Feature):
             # that we include. We can't define QT_NO_DEBUG because that would
             # mean turning off QDebug output. qt_noop() is what Qt defines
             # Q_ASSERT to be when QT_NO_DEBUG is defined.
-            build.env.Append(CPPDEFINES="'Q_ASSERT(x)=qt_noop()'")
+            # compile ERROR - crazy -
+            #build.env.Append(CPPDEFINES="'Q_ASSERT(x)=qt_noop()'")
 
         if int(SCons.ARGUMENTS.get('debug_assertions_fatal', 0)):
             build.env.Append(CPPDEFINES='MIXXX_DEBUG_ASSERTIONS_FATAL')
diff --git a/build/features.py b/build/features.py
index a13e143..b128e6c 100644
--- a/build/features.py
+++ b/build/features.py
@@ -997,7 +997,7 @@ class Optimize(Feature):
     LEVEL_NATIVE = 'native'
     LEVEL_LEGACY = 'legacy'
     LEVEL_FASTBUILD = 'fastbuild'
-    LEVEL_DEFAULT = LEVEL_PORTABLE
+    LEVEL_DEFAULT = LEVEL_OFF
 
     def description(self):
         return "Optimization and Tuning"
@@ -1136,9 +1136,10 @@ class Optimize(Feature):
 
             # the following optimisation flags makes the engine code ~3 times
             # faster, measured on a Atom CPU.
-            build.env.Append(CCFLAGS='-O3')
-            build.env.Append(CCFLAGS='-ffast-math')
-            build.env.Append(CCFLAGS='-funroll-loops')
+            # Well get better CPUs and add options for these weird flags ? - crazy -
+            #build.env.Append(CCFLAGS='-O3')
+            #build.env.Append(CCFLAGS='-ffast-math')
+            #build.env.Append(CCFLAGS='-funroll-loops')
 
             # set -fomit-frame-pointer when we don't profile and are not using
             # Clang sanitizers.
@@ -1180,7 +1181,8 @@ class Optimize(Feature):
             elif optimize_level == Optimize.LEVEL_NATIVE:
                 self.status = self.build_status(
                     optimize_level, "tuned for this CPU (%s)" % build.machine)
-                build.env.Append(CCFLAGS='-march=native')
+                # No thx , generic is fine .. - crazy -
+                #build.env.Append(CCFLAGS='-march=native')
                 # http://en.chys.info/2010/04/what-exactly-marchnative-means/
                 # Note: requires gcc >= 4.2.0
                 # macros like __SSE2_MATH__ __SSE_MATH__ __SSE2__ __SSE__
